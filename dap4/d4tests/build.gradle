apply from: "$rootDir/gradle/dependencies.gradle"
apply from: "$rootDir/gradle/java.gradle"
apply from: "$rootDir/gradle/testing.gradle"
apply from: "$rootDir/gradle/coverage.gradle"
apply plugin: 'war'

dependencies {
    // A lot of these depedencies should be in the testRuntime config, not testCompile.

    testCompile project(':dap4:d4core')
    testCompile project(':dap4:d4cdmclient')
    testCompile project(':dap4:d4shared')
    testCompile project(':dap4:d4servletshared')
    testCompile project(':dap4:d4ts')
    testCompile project(':cdm')
    testCompile project(':httpservices')

    testCompile libraries["javax.servlet-api"]
    testCompile libraries["slf4j-api"]
}

test {
    // Causes JUnit to throw an exception: "No tests found in ucar.nc2.util.UnitTestCommon"
    exclude 'dap4/test/util/DapTestCommon.class'

    // Let Gradle run the tests; we don't need our own test suites.
    exclude 'dap4/test/TestDap4All.class'

    // In the d4tests maven-surefire-plugin config, there is a list of included test classes, implying that those
    // are the only ones that should be run. However, not all of them yield success when run from Gradle.
    // I think d4tests just needs some attention: fix broken tests if possible and possibly upgrade JUnit 3 tests to
    // JUnit 4.
}
