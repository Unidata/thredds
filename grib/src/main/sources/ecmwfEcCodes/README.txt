Version of GRIB-API tables used: 1.13.0 (released 2014-12-15; updated by Sean 2014-12-23)

===============

2014-01-28
-----

The tables in the grib1 directory were taken from the grib api package from ECMWF, specifically:

    grib_api-1.11.0/user/share/grib_api/definitions/grib1/localConcepts/ecmf

Originally, the *.table files from

    grib_api-1.11.0/user/share/grib_api/definitions/grib1/

were used. This was suggested by Stephan Siemen (stephan.siemen@ecmwf.int) in an email. Note that
Stephan suggests contacting his colleague Shahram if we have any other questions (and we did). Here
is the email from Stephan explaining ECMWF GRIB tables in general:

+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=

"Hi Sean,

sorry for the late reply. The last weeks have been crazy here with 
committees, office moves and a new HPC arriving.

Yes, you described our system quite accurately and unfortunately 
it is not as good as it perhaps could be. For now we keep things as they 
are, but as I mentioned below there are some long term plans to change 
this.  

We store all parameters in a database which is then used to 
generate the tables on the web pages you pointed to. We also generate 
a copy stored in files for each grib_api release. After installing
grib_api you can with

  grib_info -d

see where these definition are installed. In the code they are stored in

  share/grib_api/definitions
  share/grib_api/definitions/grib1
  share/grib_api/definitions/grib1/localConcepts/
  share/grib_api/definitions/grib2
  share/grib_api/definitions/grib2/localConcepts/

Local extensions should only be made in the 'localConcepts' directories.
Unfortunately there is not much ducumentation at the moment on how 
you can extend the tables, but we have some slides from our grib_api
training you might find useful:

  http://www.ecmwf.int/services/computing/training/material/grib_api/grib_api_advanced_2.pdf

(BTW, we have another grib_api training course end of February 2014)

In the long term we work with the UK Met Office to generate a central 
repository, which will be machine readable) held by the WMO for such 
tables (also BUFR) at

 http://codes.wmo.int/

I hope this helps you little bit further. In case you have more detailed
queries, please do not hesitate to contact my colleague Shahram (cc'd to 
this email).

Regards
Stephan"

+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=

As a follow up, I contacted Shahram, as the table files appeared to be missing
several parameters, and they didn't seem to be parsable. He had several useful
things to say regarding gribapi:

+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=

"Hi Sean
I'll do my best to answer your questions. But bear in mind I have only been here for 2 years,
most of the features you are talking about were done long before then!

See my answers below, marked SN>>

From: "Sean Arms" <sarms@unidata.ucar.edu>
To: "Shahram Najm" <shahram.najm@ecmwf.int>
Sent: Thursday, 16 January, 2014 10:25:14 PM
Subject: Re: GRIB question from UCAR/Unidata

Greetings Shahram!

I've been looking the the grib tables in the grib api software, and I
have a few questions regarding them, specifically grib 1.

====

First big question:

Under the source directory, if I look in the following directory:

grib_api-1.11.0/user/share/grib_api/definitions/grib1

I see several 2.98.*.table files. There are several inconsistencies
between these, and it's quite hard to programatically parse them for
information. For example:

In table 2.98.128.table, all of the units are enclosed in parenthesis at
the end of each line. However, in table 2.98.130.table, essentially none
of the units are inclosed in parenthesis.

Comparing 2.98.128.table, the parameter numbers in 2.98.130.table
printed twice on each line.
SN>>Only grib_dump reads these entries to describe indicatorOfParameter. Generally
we use another mechanism to describe parameter units etc (This is what grib api
calls a "concept"). You are right and the descriptions in the 2.98.*
files have not been updated properly and perhaps we should have either updated
them or changed the underlying mechanism

In 2.98.172.table, there is a typo in which the opening parenthesis for
the unit is 9 instead of (.
SN>> I will fix this. Thanks

In tables 2.98.129, 131, 140, 171, 172, 173, 200, 201, 230, some of the
variable descriptions have parts inclosed in parenthesis, and the units,
for the majority of cases, are not.

The header of these tables indicated that they were generated by a perl
script (param.pl)

I'm curious, does grib-api use these tables directly, or do you use
something different? If you use these files directly, do you have a
general strategy for parsing them?

Also, I noticed there seems to be a directory (localConcepts) where
information from many tables is spread across a handful of files. Are
these what grib-api uses?
SN>> The files under the localConcepts are used to construct our concept of what a parameter is.
For each parameter we construct 4 things: (1) a unique identifier called paramId (2) a short name
(3) A long name (4) units. Note these are edition independent so a parameter is an abstract idea which
may have a concrete representation in grib edition 1 and 2 (and perhaps 3 one day)
====

Second question:

We have a user who is trying to read in a grib 1 file that is supposedly
encoded using ECMWF tables. The file can be found here:

https://dl.dropboxusercontent.com/u/75575742/ECMWF_GNERA_d0001.20121001

According to the information encoded in the file, there are two
parameters coming from table 2.98.288, but are not actually listed in
the table files in grib-api. Information from the header looks like this:
SN>> Your message is truncated here. Perhaps you hit "Send" too quickly?
:)

<second message>

Regarding your last point (which is missing half the message). Actually the
table referenced is grib1/2.98.228.table (not 288)
This again shows why this mechanism was not fully updated as new parameters
were added so in this case grib_dump reports:

   indicatorOfParameter = 247 [Unknown code table entry (grib1/2.98.228.table) ]

Because we did not add the entry '247' to the table grib1/2.98.228.table.
It should look like this:

  247 247  100 metre V wind component (m s**-1)

The best way to look at a grib message to find out parameter information is actually
with "grib_ls" (rather than grib_dump)
E.g.

$ grib_ls -n parameter ECMWF_GNERA_d0001.20121001 | head
centre      paramId     units       name                                shortName
ecmf        129         m**2 s**-2  Geopotential                        z
ecmf        172         (0 - 1)     Land-sea mask                       lsm
ecmf        167         K           2 metre temperature                 2t
ecmf        169         J m**-2     Surface solar radiation downwards   ssrd
ecmf        228246      m s**-1     100 metre U wind component          100u
ecmf        228247      m s**-1     100 metre V wind component          100v
ecmf        167         K           2 metre temperature                 2t
ecmf        169         J m**-2     Surface solar radiation downwards   ssrd


Now it makes perfect sense. Here we are not consulting the 2.98.* tables but the localConcepts!"

+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=


The end result is that the *.table files in gribapi are not suitable for our use. The information we need
is stored in the files under localConcepts. Unfortunately, these are not useful in their current state,
so they must be transformed into "tables" that we can use.

The localConcept files are stored here in the sources directory, and the processed "tables" generated by
code in the grib module are stored in resources.

Upgrade info:

For each new release of GRIB-API, these tables can be updated by placing the new localConcept files into the
sources directory (/src/main/sources/ecmwfGribApi) and running the main method of
/ucar/nc2/grib/grib1/tables/EcmwfLocalConcepts

This will generate the new table files, as well as the appropriate lookupTables.txt

===============

2014-08-01
john + sean

grib1

the things that look like grib tables (*.table), arent actually grib tables that can be used;
instead use localConcepts/*.def

grib2
WTF ??

===============

2014-12-23
Sean

GRIB1 *.def files taken from grib_api-1.13.0/definitions/grib1/localConcepts/ecmf. For completeness, updated
by copying new *.def files to grib/src/main/sources/ecmwfGribApi and running the main method of
ucar/nc2/grib/grib1/tables/EcmwfLocalConcepts.java.

Also note that there is a new def file, called stepType.def. Its contents is this:

# Concept stepType for ECMWF
# set uses the FIRST one
# get returns the LAST match

"instant" = {timeRangeIndicator=0;}
"instant" = {timeRangeIndicator=10;}
"instant" = {timeRangeIndicator=1;}
"instant" = {timeRangeIndicator=14;} # Fields from DWD in MARS

"avg"     = {timeRangeIndicator=3;}

"avgd"    = {timeRangeIndicator=113;}
"avgfc"   = {timeRangeIndicator=113;}

"accum"   = {timeRangeIndicator=4;}
"accum"   = {timeRangeIndicator=2;}

# Since grib1 has not min/max, we had to use our own convention
# therefore we set the centre to ECMWF (98)
"min"     = {timeRangeIndicator=2;centre=98;}
"min"     = {timeRangeIndicator=119;}
"max"     = {timeRangeIndicator=2;centre=98;}
"max"     = {timeRangeIndicator=118;}

"diff"    = {timeRangeIndicator=5;}
"rms"     = {timeRangeIndicator=120;}
"sd"      = {timeRangeIndicator=121;}
"cov"     = {timeRangeIndicator=122;}
"avgua"   = {timeRangeIndicator=123;}
"avgia"   = {timeRangeIndicator=124;}

"avgas"   = {timeRangeIndicator=128;}
"avgad"   = {timeRangeIndicator=130;}
"avgid"   = {timeRangeIndicator=133;}

not sure how to incorporate these into the grib1 tables we generate for use in TDS, so for now
I will simply note its existence.

The following tables are new with this update:

grib/src/main/resources/resources/grib1/ecmwfGribApi/2.98.217.table
grib/src/main/resources/resources/grib1/ecmwfGribApi/2.98.218.table
grib/src/main/resources/resources/grib1/ecmwfGribApi/2.98.219.table
grib/src/main/resources/resources/grib1/ecmwfGribApi/2.98.221.table

===============

2017-12-01 sarms

Downloaded latest version of ecCodes (v2.5.0), which has replaced grib-api.
ecCodes can be found at:

https://software.ecmwf.int/wiki/display/ECC/Releases

Using new def files from definitions/grib1/localConcepts/ecmf. Renamed this
sources directory from emcwfGribApi to ecmwfEcCodes, to reflect that these
are the grib1 def files for ecmwf as taken from the ecCodes package.

It does not look like any changes were made to the tables, but will keep the new
files so that their headers indicate updates were checked today.