<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
  <modelVersion>4.0.0</modelVersion>

  <parent>
    <groupId>edu.ucar</groupId>
    <artifactId>thredds-parent</artifactId>
    <version>4.4.0-SNAPSHOT</version>
  </parent>


  <!-- ===========================================================
           Module Description
       =========================================================== -->
  <!-- groupId>edu.ucar</groupId-->
  <artifactId>tds</artifactId>
  <packaging>war</packaging>
  <name>THREDDS Data Server (TDS)</name>
  <description>
    The THREDDS Data Server (TDS) is a web server that provides catalog and
    data access services for scientific data using OPeNDAP, OGC WCS and WMS,
    HTTP, and other remote data access protocols scientific data.
  </description>
  <url>http://www.unidata.ucar.edu/software/tds/</url>

  <!-- ===========================================================
     Dependencies

     Mandatory dependencies are listed first. Then everything
     else is declared with the "provided" scope, meaning that
     the user have to declare those dependencies himself in
     his own pom.xml file if we want to read some formats.
 =========================================================== -->
  <!--    <dependencyManagement>
      <dependencies>
          <dependency>
              <groupId>edu.ucar</groupId>
              <artifactId>netcdf-parent</artifactId>
              <version>4.2.27-SNAPSHOT</version>
              <type>pom</type>
              <scope>import</scope>
          </dependency>
      </dependencies>
  </dependencyManagement>-->
  <dependencies>

    <dependency>
      <groupId>edu.ucar</groupId>
      <artifactId>cdm</artifactId>
    </dependency>
    <dependency>
      <groupId>edu.ucar</groupId>
      <artifactId>clcommon</artifactId>
    </dependency>
    <dependency>
      <groupId>edu.ucar</groupId>
      <artifactId>bufr</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>edu.ucar</groupId>
      <artifactId>grib</artifactId>
    </dependency>
    <dependency>
      <groupId>edu.ucar</groupId>
      <artifactId>netcdf4</artifactId>
    </dependency>
    <dependency>
      <groupId>edu.ucar</groupId>
      <artifactId>opendap</artifactId>
    </dependency>
    <dependency>
      <groupId>edu.ucar</groupId>
      <artifactId>tdcommon</artifactId>
    </dependency>
    <dependency>
      <groupId>edu.ucar</groupId>
      <artifactId>udunits</artifactId>
    </dependency>
    <dependency>
      <groupId>edu.ucar</groupId>
      <artifactId>visadCdm</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>commons-httpclient</groupId>
      <artifactId>commons-httpclient</artifactId>
    </dependency>
    <dependency>
      <groupId>commons-fileupload</groupId>
      <artifactId>commons-fileupload</artifactId>
    </dependency>

    <dependency>
      <groupId>org.jdom</groupId>
      <artifactId>jdom2</artifactId>
    </dependency>

    <dependency>
      <groupId>org.quartz-scheduler</groupId>
      <artifactId>quartz</artifactId>
    </dependency>
    <dependency>
      <groupId>com.google.protobuf</groupId>
      <artifactId>protobuf-java</artifactId>
    </dependency>
    <!-- 
    <dependency>
      <groupId>net.sf.ehcache</groupId>
      <artifactId>ehcache</artifactId>
      <scope>runtime</scope>
    </dependency>
     -->
     
    <dependency>
      <artifactId>je</artifactId>
      <groupId>com.sleepycat</groupId>
    </dependency>

    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-api</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>slf4j-log4j12</artifactId>
      <scope>runtime</scope>
    </dependency>
    <dependency>
      <groupId>log4j</groupId>
      <artifactId>log4j</artifactId>
    </dependency>
    <dependency>
      <groupId>org.slf4j</groupId>
      <artifactId>jcl-over-slf4j</artifactId>
      <scope>runtime</scope>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-webmvc</artifactId>
    </dependency>

    <dependency>
      <groupId>cas</groupId>
      <artifactId>casclient</artifactId>
    </dependency>

    <!-- THREDDS ISO -->
    <dependency>
      <groupId>EDS</groupId>
      <artifactId>threddsIso</artifactId>
    </dependency>
    <dependency>
    	<groupId>org.jdom</groupId>
    	<artifactId>jdom-legacy</artifactId>
    </dependency>
    <dependency>
		<groupId>net.sf.saxon</groupId>
		<artifactId>saxon</artifactId>
	</dependency>
    <dependency>
		<groupId>net.sf.saxon</groupId>
		<artifactId>saxon-dom</artifactId>
	</dependency>    

    <!-- wms -->
    <dependency>
      <groupId>uk.ac.rdg.resc</groupId>
      <artifactId>ncwms</artifactId>
      <exclusions>
      	<exclusion>
      		<groupId>edu.ucar</groupId>
      		<artifactId>cdm</artifactId>
      	</exclusion>      	
      	<exclusion>
      		<groupId>org.springframework</groupId>
      		<artifactId>spring-webmvc</artifactId>      	
      	</exclusion>
      	<exclusion>
      		<groupId>org.slf4j</groupId>
      		<artifactId>slf4j-api</artifactId>      	
      	</exclusion>
      	<exclusion>
      		<groupId>org.slf4j</groupId>
      		<artifactId>slf4j-log4j12</artifactId>      	
      	</exclusion>
      	<exclusion>
      		<groupId>joda-time</groupId>
      		<artifactId>joda-time</artifactId>      	
      	</exclusion>      	
      </exclusions>
    </dependency>
    
    <dependency>
      <groupId>oro</groupId>
      <artifactId>oro</artifactId>
    </dependency>
    
    <dependency>
      <groupId>jaxen</groupId>
      <artifactId>jaxen</artifactId>
    </dependency>
    <dependency>
      <groupId>org.jfree</groupId>
      <artifactId>jfreechart</artifactId>
    </dependency>

    <!-- dependency>
      <groupId>atg.taglib.json</groupId>
      <artifactId>json-taglib</artifactId>
    </dependency-->

    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>servlet-api</artifactId>
      <scope>provided</scope>
    </dependency>
    <dependency>
      <groupId>javax.servlet</groupId>
      <artifactId>jstl</artifactId>
    </dependency>
    
    <!-- JSR 303 with Hibernate Validator -->
    <dependency>
      <groupId>javax.validation</groupId>
      <artifactId>validation-api</artifactId>
      <version>1.0.0.GA</version>
    </dependency>
    <dependency>
      <groupId>org.hibernate</groupId>
      <artifactId>hibernate-validator</artifactId>
      <version>4.1.0.Final</version>
    </dependency>

    <!-- test -->
    <dependency>
      <groupId>edu.ucar</groupId>
      <artifactId>cdm</artifactId>
      <type>test-jar</type>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>org.springframework</groupId>
      <artifactId>spring-test</artifactId>
      <scope>test</scope>
    </dependency>

    <dependency>
      <groupId>httpunit</groupId>
      <artifactId>httpunit</artifactId>
      <version>1.7</version>
      <scope>test</scope>
    </dependency>

  </dependencies>


  <!-- ================================================================== -->
  <!--     Repositories. This is where Maven looks for dependencies. The  -->
  <!--     Maven repository is implicit and doesn't need to be specified. -->
  <!-- ================================================================== -->
  <!-- repositories>
    <repository>
      <id>geotoolkit</id>
      <name>Geotk repository</name>
      <url>http://maven.geotoolkit.org</url>
    </repository>      
  </repositories-->


  <!-- ===========================================================
           Build configuration
       =========================================================== -->
  <build>
    <finalName>thredds</finalName>
    <!-- 
    	BINARY FILES MUST NEVER EVER EVER EVER BE FILTERED
        Since binary data for general unit testing is in content/thredds/public 
        we define two mutually exclusive resource sets. The first one contains everything but the public directory and is filtered
        The second one only contains the public directory and is not filtered.
        BINARY FILES MUST NEVER EVER EVER EVER BE FILTERED    
    -->
    <testResources>
      <testResource>
        <filtering>true</filtering>
        <directory>${basedir}/src/test/resources</directory>
        <excludes>
          <exclude>content/thredds/public/**</exclude>
          <exclude>content/thredds/cache/**</exclude>
          <exclude>content/thredds/logs/**</exclude>
          <exclude>content/thredds/cataloggen/**</exclude>
        </excludes>
      </testResource>
      <testResource>
        <filtering>false</filtering>
        <directory>${basedir}/src/test/resources</directory>
        <includes>
          <include>content/thredds/public/**</include>
        </includes>
      </testResource>
    </testResources>

    <plugins>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <configuration>
          <skip>${skipTests}</skip>
          <excludes>
            <exclude>thredds/cataloggen/**</exclude>
          </excludes>
          <testExcludes>
            <exclude>thredds/dqc/**/*.java</exclude>
          </testExcludes>          
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-war-plugin</artifactId>
        <configuration>
          <attachClasses>true</attachClasses>
          <!-- This packagingExcludes doesn't seem to work. Now done in dependency/exclusions. -->
          <!--
          <packagingExcludes>
            WEB-INF/lib/commons-logging*.jar,
            WEB-INF/lib/javax.servlet*.jar,
            WEB-INF/lib/jdom-1.0.jar,
            WEB-INF/lib/slf4j-jdk14*.jar,
            WEB-INF/lib/visad-*.jar
          </packagingExcludes>
          -->
          <archive>
            <manifest>
              <addDefaultImplementationEntries>true</addDefaultImplementationEntries>
            </manifest>
            <manifestEntries>
              <Built-On>${maven.build.timestamp}</Built-On>
            </manifestEntries>
          </archive>
          <webResources>
            <resource>
              <targetPath>WEB-INF/classes</targetPath>
              <filtering>true</filtering>
              <directory>${basedir}/src/main/template</directory>
              <includes>
                <include>**/tds.properties</include>
              </includes>
            </resource>
            <resource>
              <targetPath>docs</targetPath>
              <filtering>true</filtering>
              <directory>${basedir}</directory>
              <includes>
                <include>README.txt</include>
                <include>CHANGES.txt</include>
              </includes>
            </resource>
          </webResources>
        </configuration>
      </plugin>

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <configuration>
          <!-- Enabling tests for first unit testing -->
          <skip>${skipTests}</skip>
          <testFailureIgnore>true</testFailureIgnore>
          <includes>
            <include>thredds/server/catalogservice/**</include>
            <include>thredds/server/ncSubset/**</include>
            <include>thredds/server/config/**</include>
            <include>thredds/servlet/**</include>
          </includes>
          <excludes>
            <exclude>thredds/server/config/ServerConfigTestSuit.java</exclude>
            <exclude>thredds/dqc/**</exclude>
          </excludes>
        </configuration>
        <!-- executions>
                    <execution>
                      <id>surefire-it</id>
                      <phase>integration-test</phase>
                      <goals>
                          <goal>test</goal>
                      </goals>
                      <configuration>
                        <skip>false</skip>
                        <test>TestCdmRemoteServer</test>
                      </configuration>
                  </execution>
                  </executions-->
      </plugin>

      <!-- plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <configuration>
          <skip>${skipTests}</skip>
        </configuration>
      </plugin -->
      <!--plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <executions>
          <execution>
            <id>release</id>
            <phase>deploy</phase>
            <configuration>
              <tasks>
                <property name="ftp.dir" value="V:/pub/thredds/v4.3/4.3.11" />
                <echo message="ftp.dir: ${ftp.dir}" />

                <copy todir="${ftp.dir}" overwrite="true">
                  <fileset dir="./target" includes="thredds.war" />
                  <fileset dir="." includes="CHANGES.txt" />
                </copy>

                <checksum>
                  <fileset dir="${ftp.dir}">
                    <include name="*.war" />
                  </fileset>
                </checksum>

              </tasks>
            </configuration>
            <goals>
              <goal>run</goal>
            </goals>
          </execution>
        </executions>
      </plugin-->
    </plugins>
  </build>

  <properties>
    <!-- testContent.root.path>/share/testcatalogs/content</testContent.root.path-->
    <testContent.root.path>content</testContent.root.path>
  </properties>
</project>
