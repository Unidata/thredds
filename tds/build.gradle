import groovy.util.slurpersupport.GPathResult
import groovy.xml.XmlUtil

description = "The THREDDS Data Server (TDS) is a web server that provides catalog and data access services for " +
        "scientific data using OPeNDAP, OGC WCS and WMS, HTTP, and other remote-data-access protocols."
ext.title = "THREDDS Data Server (TDS)"
ext.url = "http://www.unidata.ucar.edu/software/thredds/current/tds/TDS.html"

apply plugin: 'war'

dependencies {
    compile project(":bufr")
    compile project(":cdm")
    compile project(":clcommon")
    compile project(":grib")
    compile project(":netcdf4")
    compile project(":opendap")
    compile project(":tdcommon")
    runtime project(":visadCdm")
    compile project(":waterml")
    compile project(":dap4:d4servletshared")

    compile libraries["coverity-escapers"]
    compile libraries["httpclient"]
    compile libraries["httpcore"]
    compile libraries["commons-fileupload"]
    compile libraries["jdom2"]
    compile libraries["quartz"]
    compile libraries["commons-lang3"]
    compile libraries["commons-io"]
    compile libraries["jcip-annotations"]
    compile libraries["guava"]
    compile libraries["joda-time"]
    compile libraries["52n-xml-waterML-v20"]

    compile libraries["spring-core"]
    compile libraries["spring-context"]
    compile libraries["spring-beans"]
    compile libraries["spring-web"]
    compile libraries["spring-webmvc"]

    runtime libraries["threddsIso"]
    compile libraries["ncwms"]
    compile libraries["geoapi-pending"]
    compile libraries["oro"]

    providedCompile libraries["javax.servlet-api"]
    runtime libraries["taglibs-standard-impl"]
    compile libraries["validation-api"]
    runtime libraries["hibernate-validator"]
    runtime libraries["jaxen"]

    testCompile libraries["spring-test"]
    testCompile libraries["hamcrest-core"]
    testCompile libraries["httpunit"]

    compile libraries["slf4j-api"]
    runtime libraries["log4j-slf4j-impl"]
    runtime libraries["log4j-core"]
    runtime libraries["log4j-web"]
}

// Adds ':tds:prepareInplaceWebAppClasses', which ':it:integrationTest' depends on.
apply plugin: 'org.akhikhl.gretty'

test {
    // From TDS's pom.xml. I guess these are excluded because they're pretty crufty?
    exclude 'thredds/tds/**'
}

// Modify "netCDFtools.jnlp" and save the file as "ToolsUI.jnlp". "netCDFtools.jnlp" will live at:
// http://www.unidata.ucar.edu/software/thredds/current/netcdf-java/webstart/netCDFtools.jnlp.
// "ToolsUI.jnlp" will be packed with TDS and served at "$hostName/thredds/view/ToolsUI.jnlp".
// In terms of content, this modification is the only difference between the two files.
task filterWebStartFile {
    File inputFile = rootProject.findProject(':ui').file("src/main/resources/netCDFtools.jnlp")
    inputs.file inputFile
    
    File outputFile = file("$buildDir/tmp/ToolsUI.jnlp")
    outputs.file outputFile
    
    doLast {
        GPathResult jnlp = new XmlSlurper().parse(inputFile)
        
        // Add "<argument>{catalog}#{dataset}</argument>" to the "application-desc" node
        jnlp.'application-desc'.appendNode {
            argument '{catalog}#{dataset}'
        }
        
        outputFile.parentFile.mkdirs()
        
        outputFile.newWriter().withCloseable {
            // XmlUtil.serialize() will print warnings to STDERR. See https://goo.gl/LG3vlV
            // Those warnings appear to be spurious – see https://goo.gl/cN4mOQ – and in any event, they do not
            // affect the XML that we're generating. So, we're going to temporarily route STDERR output to DEBUG.
            logging.captureStandardError LogLevel.DEBUG
            
            XmlUtil.serialize jnlp, it
            
            // Restore the routing of STDERR messages back to ERROR.
            logging.captureStandardError LogLevel.ERROR
        }
    }
}

// Tests expect for test resources to be copied to the same directory as the test classes.
processTestResources.destinationDir = compileTestJava.destinationDir

processTestResources {
    from "src/main/webapp"
    from "src/main/webapp/WEB-INF/classes"
    
    // Creates an inferred task dependency on filterWebStartFile.
    // See https://docs.gradle.org/current/userguide/more_about_tasks.html#sec:task_input_output_side_effects
    // This file is needed by ViewControllerTest.testLaunchViewerToolsUIVRequest().
    from (tasks.filterWebStartFile.outputs) {
        into 'WEB-INF/views'
    }
}

war {
    // Replace '$projectVersion' and '$buildTimestamp' placeholders with the correct values.
    // Currently, we only use those placeholders in tds.properties and README.txt.
    def properties = [:]
    properties['projectVersion'] = project.version
    properties['buildTimestamp'] = project.buildTimestamp  // Defined in root project.
    
    // War CopySpec already includes everything in 'src/main/webapp', which tds.properties lives within.
    // So, the from() and into() methods aren't needed.
    filesMatching('**/tds.properties') {
        expand properties
    }
    
    from('README.txt') {
        into 'docs'
        expand properties
    }
    
    // This file is needed by ViewerServiceImpl.ToolsUI.getViewerLinkHtml().
    from (tasks.filterWebStartFile.outputs) {
        into 'WEB-INF/views'
    }
}
