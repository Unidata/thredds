description = "The THREDDS Data Server (TDS) is a web server that provides catalog and data access services for " +
        "scientific data using OPeNDAP, OGC WCS and WMS, HTTP, and other remote-data-access protocols."
ext.title = "THREDDS Data Server (TDS)"
ext.url = "http://www.unidata.ucar.edu/software/thredds/current/tds/TDS.html"

apply from: "$rootDir/gradle/any/dependencies.gradle"
apply from: "$rootDir/gradle/any/java.gradle"
apply from: "$rootDir/gradle/any/testing.gradle"
apply from: "$rootDir/gradle/any/coverage.gradle"
apply from: "$rootDir/gradle/any/archiving.gradle"
apply from: "$rootDir/gradle/any/publishing.gradle"

apply plugin: 'war'

dependencies {
    compile project(":bufr")
    compile project(":cdm")
    compile project(":clcommon")
    compile project(":grib")
    compile project(":httpservices")
    compile project(":netcdf4")
    compile project(":opendap")
    compile project(":tdcommon")
    runtime project(":visadCdm")
    compile project(":waterml")

    // DAP4 Dependencies (technically forward)
    compile project(":dap4:d4cdm")
    compile project(":dap4:d4servlet")
    compile project(':dap4:d4core')
    compile project(':dap4:d4lib')

    // Server stuff
    provided libraries["javax.servlet-api"]
    runtime libraries["taglibs-standard-spec"]
    runtime libraries["taglibs-standard-impl"]

    // Apache httpclient libraries
    compile libraries["httpclient"]
    compile libraries["httpcore"]

    compile libraries["coverity-escapers"]
    compile libraries["jdom2"]
    compile libraries["quartz"]
    compile libraries["jsr305"]
    compile libraries["guava"]
    compile libraries["joda-time"]
    
    // WaterML
    compile libraries["52n-xml-waterML-v20"]
    compile libraries["52n-xml-om-v20"]
    compile libraries["xmlbeans"]

    // Spring
    compile libraries["spring-core"]
    compile libraries["spring-context"]
    compile libraries["spring-beans"]
    compile libraries["spring-web"]
    compile libraries["spring-webmvc"]

    // Spring security
    runtime libraries["spring-security-core"]
    runtime libraries["spring-security-config"]
    runtime libraries["spring-security-web"]

    compile libraries["oro"]

    // Needed for XPath operations in mock tests
    testCompile libraries["jaxen"]

    // edal ncwms related libs
    compile libraries["edal-common"]
    compile libraries["edal-cdm"]
    compile libraries["edal-graphics"]
    compile libraries["edal-wms"]
    compile libraries["edal-godiva"]

    // threddsIso related libs
    runtime libraries["threddsIso"]

    runtime libraries["Saxon-HE"]
    runtime libraries["jaxen"]

    // JSR 303 with Hibernate Validator, which is dragging in jboss logging
    compile libraries["validation-api"]
    runtime libraries["hibernate-validator"]

    compile libraries["thymeleaf-spring4"]

    // Testing
    testCompile libraries["spring-test"]
    testCompile libraries["hamcrest-core"]
    testCompile libraries["commons-io"]

    // Logging
    compile libraries["slf4j-api"]
    runtime libraries["log4j-slf4j-impl"]
    runtime libraries["log4j-core"]
    runtime libraries["log4j-web"]
}

// Adds ':tds:prepareInplaceWebAppClasses', which ':it:test' depends on.
apply plugin: 'org.akhikhl.gretty'

//test {
    // From TDS's pom.xml. I guess these are excluded because they're pretty crufty?
//    exclude 'thredds/tds/**'
//}

// Tests expect for test resources to be copied to the same directory as the test classes.
processTestResources.destinationDir = compileTestJava.destinationDir

processTestResources {
    from "src/main/webapp"
    from "src/main/webapp/WEB-INF/classes"
}

war {
    // Exclude tds.properties from the War CopySpec. We'll re-add it below, with filtering.
    // TODO: Is there a less-awkward way to filter a single file when it's already part of a CopySpec?
    exclude 'WEB-INF/classes/thredds/server/tds.properties'  // Relative to src/main/webapp/

    // This is a hack to handle Maven-style placeholders in a file to be filtered: http://goo.gl/9sQebt
    // Once Maven is out of the picture, the easiest way to refactor this is to remove the dots from the property
    // keys, so that expand(Map) works as expected.
    ant.properties['project.version'] = project.version
    ant.properties['build.timestamp'] = project.buildTimestamp  // Defined in root project.

    from ('src/main/webapp/WEB-INF/classes/thredds/server/tds.properties') {
        into 'WEB-INF/classes/thredds/server'
        filter(org.apache.tools.ant.filters.ExpandProperties, project: ant.project)
    }
    from('README.txt') {
        into 'docs'
        filter(org.apache.tools.ant.filters.ExpandProperties, project: ant.project)
    }
}

///////////////////////////////// Godiva 3 /////////////////////////////////

// Adapted from https://blog.eveoh.nl/2012/01/using-google-web-toolkit-with-gradle/
// 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6' is also available, but it has problems.

// First, it modifies the testRuntime configuration after project evaluation:
// https://github.com/steffenschaefer/gwt-gradle-plugin/issues/89. In the case of TDS, this lead to an old version
// of "validation-api" being present on the classpath, which caused hibernate-validator to fail.
//
// Second, it adds gwt-dev and gwt-user to the "compile" config and gwt-servlet to the "runtime" config.
// None of those are necessary at runtime: http://stackoverflow.com/a/5135151/3874643.
// Even worse, the JARs are *huge*, and inflated the size of tds.war by ~59 MB.

configurations {
    gwt
}

dependencies {
    // These are needed by the compileGwt task but nowhere else, which is why we place them in their own config.
    gwt libraries["gwt-user"]
    gwt libraries["gwt-dev"]
}

ext {
    gwtDir = "${project.buildDir}/gwt"
    extraDir = "${project.buildDir}/extra"
}

task compileGwt (dependsOn: classes, type: JavaExec) {
    inputs.source sourceSets.main.java.srcDirs
    inputs.dir sourceSets.main.output.resourcesDir
    outputs.dir gwtDir

    doFirst {
        file(gwtDir).mkdirs()
    }

    main = 'com.google.gwt.dev.Compiler'

    classpath {
        [
            configurations.gwt,                // For com.google.gwt.dev.Compiler in "gwt-dev".
            sourceSets.main.compileClasspath,  // For 'uk/ac/rdg/resc/godiva/Godiva.gwt.xml' in "edal-java".
            sourceSets.main.resources.srcDirs  // For Godiva3.gwt.xml in 'tds/src/main/resources'.
        ]
    }

    args = [
        'Godiva3', // The GWT module, from edal-godiva.
        '-war', gwtDir,
        '-logLevel', 'WARN',  // Only get log messages at level WARN or above. We don't want the spammy output.
        '-localWorkers', '2',
        '-compileReport',
        '-extra', extraDir,
    ]

    maxHeapSize = '256M'
}

war {
    dependsOn compileGwt
    from gwtDir
}
