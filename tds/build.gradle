import edu.ucar.build.ui.ToolsUiJnlpBaseTask
import com.google.common.collect.Iterables

description = "The THREDDS Data Server (TDS) is a web server that provides catalog and data access services for " +
              "scientific data using OPeNDAP, OGC WCS and WMS, HTTP, and other remote-data-access protocols."
ext.title = "THREDDS Data Server (TDS)"
ext.url = "https://www.unidata.ucar.edu/software/thredds/current/tds/TDS.html"

apply from: "$rootDir/gradle/any/dependencies.gradle"
apply from: "$rootDir/gradle/any/java.gradle"
apply from: "$rootDir/gradle/any/testing.gradle"
apply from: "$rootDir/gradle/any/coverage.gradle"
apply from: "$rootDir/gradle/any/archiving.gradle"
apply from: "$rootDir/gradle/any/publishing.gradle"
apply from: "$rootDir/gradle/any/gretty.gradle"

apply plugin: 'war'

dependencies {
    compile project(":bufr")
    compile project(":cdm")
    compile project(":clcommon")
    compile project(":grib")
    compile project(":httpservices")
    compile project(":netcdf4")
    compile project(":opendap")
    compile project(":tdcommon")
    runtime project(":visadCdm")
    compile project(":waterml")

    // DAP4 Dependencies (technically forward)
    compile project(":dap4:d4cdm")
    compile project(":dap4:d4servlet")
    compile project(':dap4:d4core')
    compile project(':dap4:d4lib')

    // Server stuff
    compileOnly libraries["javax.servlet-api"]
    runtime libraries["taglibs-standard-spec"]
    runtime libraries["taglibs-standard-impl"]

    // Apache httpclient libraries
    compile libraries["httpclient"]
    compile libraries["httpcore"]

    compile libraries["coverity-escapers"]
    compile libraries["jdom2"]
    compile libraries["quartz"]
    compile libraries["jsr305"]
    compile libraries["guava"]
    compile libraries["joda-time"]

    // WaterML
    compile libraries["52n-xml-waterML-v20"]
    compile libraries["52n-xml-om-v20"]
    compile libraries["xmlbeans"]

    // Spring
    compile libraries["spring-core"]
    compile libraries["spring-context"]
    compile libraries["spring-beans"]
    compile libraries["spring-web"]
    compile libraries["spring-webmvc"]
    
    runtime libraries["spring-security-web"]     // Needed for FilterChainProxy in applicationContext.xml.
    runtime libraries["spring-security-config"]  // Needed for "xmlns:security" schema in applicationContext.xml.

    compile libraries["oro"]

    // Needed for XPath operations in mock tests
    testCompile libraries["jaxen"]

    // edal ncwms related libs
    compile libraries["edal-common"]
    compile libraries["edal-cdm"]
    compile libraries["edal-graphics"]
    compile libraries["edal-wms"]
    compile libraries["edal-godiva"]

    // threddsIso related libs
    runtime libraries["threddsIso"]

    runtime libraries["Saxon-HE"]
    runtime libraries["jaxen"]

    // JSR 303 with Hibernate Validator, which is dragging in jboss logging
    compile libraries["validation-api"]
    runtime libraries["hibernate-validator"]

    compile libraries["thymeleaf-spring4"]

    // Testing
    testCompile libraries["spring-test"]
    testCompile libraries["hamcrest-core"]
    testCompile libraries["commons-io"]

    // Logging
    compile libraries["slf4j-api"]
    runtime libraries["log4j-slf4j-impl"]
    runtime libraries["log4j-core"]
    runtime libraries["log4j-web"]
}

// Adds ':tds:prepareInplaceWebAppClasses', which ':it:integrationTest' depends on.
apply plugin: 'org.akhikhl.gretty'

test {
    // From TDS's pom.xml. I guess these are excluded because they're pretty crufty?
    exclude 'thredds/tds/**'
}

// Need to evaluate :ui first so that the 'webstartCodebase' property is available.
Project uiProject = rootProject.project(':ui')
evaluationDependsOn uiProject.path

task toolsUiJnlpBase(type: ToolsUiJnlpBaseTask) {
    codebase = uiProject.webstartCodebase
    applicationArgument = '{catalog}#{dataset}'
    outputFile = file("$buildDir/webstart/ToolsUI.jnlp")
}

processTestResources {
    from "src/main/webapp"
    from "src/main/webapp/WEB-INF/classes"
    
    // Tests expect for test resources to be copied to the same directory as the test classes.
    destinationDir = compileTestJava.destinationDir
    
    // Creates an inferred task dependency on toolsUiJnlpBase.
    // See https://docs.gradle.org/current/userguide/more_about_tasks.html#sec:task_input_output_side_effects
    // This file is needed by ViewControllerTest.testLaunchViewerToolsUIVRequest().
    from (tasks.toolsUiJnlpBase.outputs) {
        into 'WEB-INF/views'
    }
}

war {
    // Replace '$projectVersion' and '$buildTimestamp' placeholders with the correct values.
    // Currently, we only use those placeholders in tds.properties and README.txt.
    def properties = [:]
    properties['projectVersion'] = project.version
    properties['buildTimestamp'] = project.buildTimestamp  // Defined in root project.

    // War CopySpec already includes everything in 'src/main/webapp', which tds.properties lives within.
    // So, the from() and into() methods aren't needed.
    filesMatching('**/tds.properties') {
        expand properties
    }

    from('README.txt') {
        into 'docs'
        expand properties
    }

    // This file is needed by ViewerServiceImpl.ToolsUI.getViewerLinkHtml().
    from (tasks.toolsUiJnlpBase.outputs) {
        into 'WEB-INF/views'
    }
}

// This will be used by both :tds and :it.
ext.grettyConfig = {
    httpPort = 8081
    contextPath = '/thredds'

    File testResourcesDir = Iterables.getOnlyElement(sourceSets.test.resources.srcDirs)

    // These enable HTTPS authentication, which is needed to access the TDS admin interface.
    httpsEnabled = true
    sslKeyStorePath = "$testResourcesDir/auth/keystore"
    sslKeyStorePassword = 'secret666'
    realmConfigFile = "$testResourcesDir/auth/tomcat-users.xml"
}

gretty grettyConfig

////////////////////////////////////// Godiva 3 //////////////////////////////////////

// Adapted from https://blog.eveoh.nl/2012/01/using-google-web-toolkit-with-gradle/
// 'de.richsource.gradle.plugins:gwt-gradle-plugin:0.6' is also available, but it has problems.

// First, it modifies the testRuntime configuration after project evaluation:
// https://github.com/steffenschaefer/gwt-gradle-plugin/issues/89. In the case of TDS, this lead to an old version
// of "validation-api" being present on the classpath, which caused hibernate-validator to fail.
//
// Second, it adds gwt-dev and gwt-user to the "compile" config and gwt-servlet to the "runtime" config.
// None of those are necessary at runtime: http://stackoverflow.com/a/5135151/3874643.
// Even worse, the JARs are *huge*, and inflated the size of tds.war by ~59 MB.

configurations {
    gwt
}

dependencies {
    // These are needed by the compileGwt task but nowhere else, which is why we place them in their own config.
    gwt libraries["gwt-user"]
    gwt libraries["gwt-dev"]
}

ext {
    gwtDir = "${project.buildDir}/gwt"
    extraDir = "${project.buildDir}/extra"
}

task compileGwt (dependsOn: classes, type: JavaExec) {
    inputs.file(sourceSets.main.java.srcDirs).skipWhenEmpty()
    inputs.dir sourceSets.main.output.resourcesDir
    outputs.dir gwtDir

    doFirst {
        file(gwtDir).mkdirs()
    }

    main = 'com.google.gwt.dev.Compiler'

    classpath {
        [
            configurations.gwt,                // For com.google.gwt.dev.Compiler in "gwt-dev".
            sourceSets.main.compileClasspath,  // For 'uk/ac/rdg/resc/godiva/Godiva.gwt.xml' in "edal-java".
            sourceSets.main.resources.srcDirs  // For Godiva3.gwt.xml in 'tds/src/main/resources'.
        ]
    }

    args = [
        'Godiva3', // The GWT module, from edal-godiva.
        '-war', gwtDir,
        '-logLevel', 'WARN',  // Only get log messages at level WARN or above. We don't want the spammy output.
        '-localWorkers', '2',
        '-compileReport',
        '-extra', extraDir,
    ]

    maxHeapSize = '256M'
}

war {
    dependsOn compileGwt
    from gwtDir
}
