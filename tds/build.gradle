apply from: "$rootDir/gradle/dependencies.gradle"
apply from: "$rootDir/gradle/java.gradle"
apply from: "$rootDir/gradle/testing.gradle"
apply from: "$rootDir/gradle/coverage.gradle"
apply plugin: 'war'

dependencies {
    compile project(":cdm")
    compile project(":clcommon")
    compile project(":grib")
    compile project(":httpservices")
    compile project(":netcdf4")
    compile project(":opendap")
    compile project(":tdcommon")
    runtime project(":visad")
    compile project(":waterml")
    compile project(":dap4:d4core")
    compile project(":dap4:d4servletshared")

    compile libraries["coverity-escapers"]
    compile libraries["httpclient"]
    compile libraries["httpcore"]
    compile libraries["commons-fileupload"]
    compile libraries["jdom2"]
    compile libraries["quartz"]
    compile libraries["commons-lang3"]
    compile libraries["commons-io"]
    compile libraries["jcip-annotations"]
    compile libraries["guava"]
    compile libraries["joda-time"]
    compile libraries["52n-xml-waterML-v20"]

    compile libraries["spring-core"]
    compile libraries["spring-context"]
    compile libraries["spring-beans"]
    compile libraries["spring-web"]
    compile libraries["spring-webmvc"]

    runtime libraries["threddsIso"]
    compile libraries["ncwms"]
    compile libraries["geoapi-pending"]
    compile libraries["oro"]

    providedCompile libraries["javax.servlet-api"]
    runtime libraries["jstl"]
    compile libraries["validation-api"]
    runtime libraries["hibernate-validator"]
    runtime libraries["jaxen"]

    testCompile libraries["spring-test"]
    testCompile libraries["hamcrest-core"]
    testCompile libraries["httpunit"]

    compile libraries["slf4j-api"]
    runtime libraries["log4j-slf4j-impl"]
    runtime libraries["log4j-core"]
    runtime libraries["log4j-web"]
}

war {
    archiveName = 'thredds.war'

    manifest {
        attributes 'Implementation-Version': project.version,
                'Implementation-Title': 'THREDDS Data Server (TDS)',
                'Implementation-Vendor': 'UCAR/Unidata',
                'Implementation-Vendor-Id': project.version,
                // Commented out to avoid unnecessary re-compilation and re-jarring: http://goo.gl/kbVWXR
                // I think I can fix this by writing a builtOn.txt file in compileJava,
                // and then reading in its value here.
                // 'Built-On': new Date(),
                'Build-Jdk': JavaVersion.current()
    }

}

task printProps << {
    println System.properties['java.version'];
    for (prop in System.properties.propertyNames()) printf("%s = %s%n", prop, System.properties[prop])
}

// Adds ':tds:prepareInplaceWebAppClasses', which ':it:integrationTest' depends on.
apply plugin: 'org.akhikhl.gretty'

test {
    // From TDS's pom.xml. I guess these are excluded because they're pretty crufty?
    exclude 'thredds/tds/**'

//    def contentRoot = 'C:/Users/cwardgar/dev/tools/apache-tomcat-8.0.12/content'
//    def contentRoot = 'Q:/cdmUnitTest/it/content'

//    systemProperty 'tds.content.root.path', contentRoot
//    systemProperty 'tds.dir.cdmUnitTest', 'Q:/cdmUnitTest'
}

// Tests expect for test resources to be copied to the same directory as the test classes.
processTestResources.destinationDir = compileTestJava.destinationDir

processTestResources {
    from "src/main/webapp"
    from "src/main/webapp/WEB-INF/classes"
}
