<?xml version="1.0"?>
<project name="tds" default="makeWar" basedir=".">
  
  <tstamp>
    <format property="build.time" pattern="yyyy-MM-dd HH:mm:ss" timezone="GMT"/>
    <format property="build.time.number" pattern="yyyyMMdd.HHmm" timezone="GMT"/>
  </tstamp>

  <!-- TeamCity sets "build.number" property to value of its build counter. -->
  <property name="build.number" value="${build.time.number}" />
  <property name="build.name" value="${build.number}" />

  <property name="release.version" value="4.3"/>
  <property name="release.version.minor" value="${release.version}.${build.number}"/>
  <property name="release.dir.name" value="${release.version}.${build.name}"/>

  <!-- Load environment and user properties. -->
  <property environment="env"/>
  <property file="${user.home}/build.properties"/>

  <!-- source dirs -->
  <property name="root.dir" location="${basedir}"/>
  <property name="src.dir" location="${root.dir}/src/main/java"/>
  <property name="resources.dir" value="${root.dir}/src/main/resources"/>
  <property name="lib.dir" location="${root.dir}/../lib"/>
  <property name="docs.dir" location="${root.dir}/docs"/>
  <property name="webapp.dir" location="${root.dir}/src/main/webapp"/>

  <!-- target dirs -->
  <property name="build.dir" value="${root.dir}/target"/>
  <property name="build.classes.dir" value="${build.dir}/classes"/>
  <property name="build.debug" value="on"/>
  <property name="build.release" value="false"/>
  <property name="javadoc.dir" value="${build.dir}/javadoc"/>

  <property name="uni.ftp.dir" value="O:"/>
  <property name="uni.www.dir" value="Z:"/>

  <property name="release.dir.root" value="${uni.ftp.dir}/pub/thredds/${release.version}" />
  <property name="release.dir" value="${release.dir.root}/${release.dir.name}" />
  <property name="releaseSnapshot.dir" value="${release.dir.root}/snapshot/${release.dir.name}" />

  <!-- Information about the servlet context and such. -->
  <property name="context.name" value="thredds"/>
  <property name="contextPath" value="/${context.name}"/>
  <property name="war.dir" value="${build.dir}/war/"/>
  <property name="warfile" value="${context.name}.war"/>

  <!-- Source path and target source. -->
  <path id="sourcepath">
    <pathelement location="${src.dir}"/>
  </path>

  <patternset id="sources">
    <include name="thredds/dqc/server/**/*.java"/>
    <exclude name="thredds/examples/*.java"/>
    <include name="thredds/monitor/**/*.java"/>
    <include name="thredds/server/**/*.java"/>
    <include name="thredds/servlet/*.java"/>
    <include name="thredds/servlet/**/*.java"/>
    <exclude name="thredds/servlet/idd/**"/>
    <include name="thredds/util/**/*.java"/>
    <include name="thredds/wcs/servlet/*.java"/>
  </patternset>

  <patternset id="sources-cdmvalidator">
    <include name="thredds/server/cdmvalidator/*.java"/>
    <include name="thredds/server/config/*.java"/>
    <include name="thredds/servlet/**/*.java"/>
    <exclude name="thredds/servlet/idd/**"/>
    <exclude name="thredds/servlet/restrict/**"/>
    <exclude name="thredds/servlet/tomcat/**"/>
    <include name="thredds/util/**/*.java"/>
    <include name="thredds/monitor/**/*.java"/> <!-- ????? -->
  </patternset>

  <!-- Project libraries needed for compile. -->
  <property name="bufr.jar" value="release/bufr-4.3.jar"/>
  <property name="grib.jar" value="release/grib-4.3.jar"/>
  <property name="ncwms.jar" value="release/ncwms.jar" />
  <property name="netcdf.jar" value="release/netcdf-4.3.jar"/>
  <property name="opendap.jar" value="release/opendap-4.3.jar"/>
  <property name="threddsIso.jar" value="release/threddsIso-1.2.2.jar"/>
  <property name="visadCdm.jar" value="release/visadCdm.jar"/>

  <!-- Third-party libraries needed for compile. -->
  <property name="bdb.jar" value="external/je-4.0.71.jar"/>
  <property name="catalina.jar" value="external/catalina.jar"/>
  <property name="commons-lang.jar" value="external/commons-lang-2.4.jar"/>
  <property name="cas.jar" value="external/casclient-2.1.1.jar"/>
  <property name="ehcache.jar" value="external/ehcache-1.6.0.jar"/>
  <property name="fileupload.jar" value="external/commons-fileupload-1.2.1.jar"/>
  <property name="httpclient.jar" value="external/commons-httpclient-3.1.jar"/>
  <property name="jakarta-oro.jar" value="external/jakarta-oro-2.0.8.jar"/>
  <property name="jdom.jar" value="external/jdom.jar"/>
  <property name="jcommon.jar" value="external/jcommon-1.0.15.jar"/>
  <property name="jfreechart.jar" value="external/jfreechart-1.0.12.jar"/>
  <property name="joda.jar" value="external/joda-time-2.0.jar"/>
  <property name="protobuf.jar" value="external/protobuf-java-2.4.1.jar"/>

  <property name="spring-aop.jar" value="external/org.springframework.aop-3.0.5.RELEASE.jar"/>
  <property name="spring-asm.jar" value="external/org.springframework.asm-3.0.5.RELEASE.jar"/>
  <property name="spring-beans.jar" value="external/org.springframework.beans-3.0.5.RELEASE.jar"/>
  <property name="spring-context.jar" value="external/org.springframework.context-3.0.5.RELEASE.jar"/>
  <property name="spring-core.jar" value="external/org.springframework.core-3.0.5.RELEASE.jar"/>
  <property name="spring-expression.jar" value="external/org.springframework.expression-3.0.5.RELEASE.jar"/>
  <property name="spring-web.jar" value="external/org.springframework.web-3.0.5.RELEASE.jar"/>
  <property name="spring-web.servlet.jar" value="external/org.springframework.web.servlet-3.0.5.RELEASE.jar"/>
  <property name="slf4jAPI.jar" value="external/slf4j-api-1.6.4.jar"/>
  <property name="slf4jImpl.jar" value="external/slf4j-log4j12-1.6.4.jar"/>
  <property name="log4j.jar" value="external/log4j-1.2.16.jar"/>
  <property name="commons-logging.jar" value="external/jcl-over-slf4j-1.6.4.jar"/>

  <!-- property name="nlog4j.jar" value="external/nlog4j-1.2.25.jar"/ -->
  <property name="quartz.jar" value="external/quartz-2.1.1.jar"/>
  <property name="jstl.jar" value="external/jstl.jar"/>
  <property name="jstl-standard.jar" value="external/standard.jar"/>

  <!-- Third-party libraries needed for runtime. -->
  <property name="commons-io.jar" value="external/commons-io-1.4.jar"/>
  <property name="epsg-wkt.jar" value="external/epsg-wkt.jar"/>
  <property name="geotk-bundle-referencing.jar" value="external/geotk-bundle-referencing-3.04.jar"/>
  <property name="http-codec.jar" value="external/commons-codec-1.3.jar"/>
  <property name="jaxen.jar" value="external/jaxen-1.1.2.jar"/>
  <property name="json-taglib.jar" value="external/json-taglib-0.4.1.jar"/>

  <!-- The servlet jar file is needed to compile the servlet but is not needed
    by the servlet engine, therefore, it is not needed in the war file. -->
  <property name="servlet.jar" value="external/servlet-api.jar"/>

  <!-- We use some Tomcat deploy tasks that are defined in lib/external/catalina-ant.jar
      (or in the Tomcat distribution at $TOMCAT_HOME/lib). -->
  <property name="catalina-ant.jar" value="external/catalina-ant.jar" />

  <!-- Some extra project and third-party libraries. -->
  <property name="resourcesOptional.jar" value="release/resourcesOptional.jar"/>

  <!-- Libraries needed for tests. -->
  <property name="spring-test.jar" value="external/spring-test-2.5.jar"/>
  <property name="junit.jar" value="external/junit-4.5.jar"/>
  <property name="httpunit.jar" value="external/httpunit.jar"/>

  <fileset id="compile.libraries" dir="${lib.dir}">
    <patternset id="compile.libs">
      <include name="${netcdf.jar}"/>

      <include name="${bufr.jar}"/>
      <include name="${grib.jar}"/>
      <include name="${opendap.jar}"/>
      <include name="${ncwms.jar}"/>
      <include name="${threddsIso.jar}"/>
      <include name="${visadCdm.jar}"/>

      <include name="${bdb.jar}"/>
      <include name="${cas.jar}"/>
      <include name="${commons-lang.jar}"/>
      <include name="${commons-io.jar}"/>
      <include name="${fileupload.jar}"/>
      <!-- ToDo Get rid of Geotk dependence in ThreddsLayer and move this to runtime list. -->
      <include name="${geotk-bundle-referencing.jar}" />
      <include name="${httpclient.jar}"/>
      <include name="${jakarta-oro.jar}"/>
      <include name="${jdom.jar}"/>
      <include name="${joda.jar}"/>
      <include name="${protobuf.jar}"/>
      <include name="${quartz.jar}"/>
      <include name="${slf4jAPI.jar}"/>
      <include name="${spring-beans.jar}"/>
      <include name="${spring-core.jar}"/>
      <include name="${spring-context.jar}"/>
      <include name="${spring-web.jar}"/>
      <include name="${spring-web.servlet.jar}"/>
    </patternset>
  </fileset>

  <fileset id="runtime.libraries" dir="${lib.dir}">
    <patternset id="runtime.libs">
      <include name="${ehcache.jar}" />
      <include name="${epsg-wkt.jar}" />
      <include name="${http-codec.jar}"/>
      <include name="${jaxen.jar}"/>
      <include name="${jcommon.jar}"/>
      <include name="${jfreechart.jar}"/>
      <include name="${json-taglib.jar}"/>
      <include name="${jstl.jar}"/>
      <include name="${jstl-standard.jar}"/>

      <include name="${commons-logging.jar}"/>
      <include name="${log4j.jar}"/>
      <include name="${slf4jImpl.jar}"/>
      <include name="${spring-aop.jar}"/>
      <include name="${spring-asm.jar}"/>
      <include name="${spring-expression.jar}"/>
    </patternset>
  </fileset>

  <fileset id="servlet.compile.libraries" dir="${lib.dir}">
    <include name="${catalina.jar}"/>
    <include name="${servlet.jar}"/>
  </fileset>

  <path id="compile.classpath">
    <fileset refid="compile.libraries" />
    <fileset refid="servlet.compile.libraries" />
  </path>

  <!-- targets -->
  <target name="cleanCompile" depends="clean, compile"/>
  <target name="cleanDist" depends="clean, compile, makeWar"/>
  <target name="cleanTestSetup" depends="clean, compile, test-setup"/>
  <target name="init">
    <mkdir dir="${build.classes.dir}"/>
    <echo message="Initialize ${ant.project.name}"/>
  </target>

  <target name="clean" description="Deletes all files that are generated by the build.">
    <delete dir="${build.dir}" failonerror="false"/>
  </target>

  <target name="release-settings">
    <condition property="build.debuglevel" value="lines">
      <istrue value="${build.release}"/>
    </condition>
    <property name="build.debuglevel" value="lines,vars,source"/>
    <!-- echo>release.build=${release.build}</echo>
    <echo>build.debuglevel=${build.debuglevel}</echo -->
  </target>

  <target name="dist" depends="compile, makeWar, makeJar-TSF, makeSrc-TDS, makeJavadocZip"/>

  <target name="compile" depends="init, release-settings" description="TDS compile">
    <javac destdir="${build.classes.dir}" source="1.6" target="1.6" debug="${build.debug}"
           debuglevel="${build.debuglevel}" includeAntRuntime="false">
      <src refid="sourcepath"/>
      <patternset refid="sources"/>
      <classpath refid="compile.classpath"/>
    </javac>
  </target>

  <target name="makeJar-TSF" >
    <jar jarfile="${build.dir}/tsf-${release.version.minor}.jar" index="true">
      <fileset dir="${build.classes.dir}">
        <include name="thredds/examples/*"/>
        <include name="thredds/servlet/*"/>
      </fileset>

      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-On" value="${build.time}"/>
        <attribute name="Implementation-Title" value="THREDDS Servlet Framework (TSF)"/>
        <attribute name="Implementation-Version" value="${release.version.minor}"/>
        <attribute name="Implementation-Vendor" value="UCAR/Unidata"/>
      </manifest>

    </jar>

  </target>

  <target name="tds-tomcat" depends="compile" >
    <jar jarfile="${build.dir}/tds-tomcat-${release.version.minor}.jar" index="true">
      <fileset dir="${build.classes.dir}">
        <include name="thredds/servlet/tomcat/**"/>
      </fileset>

      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-On" value="${build.time}"/>
        <attribute name="Implementation-Title" value="TDS classes must be put into tomcat"/>
        <attribute name="Implementation-Version" value="${release.version.minor}"/>
        <attribute name="Implementation-Vendor" value="UCAR/Unidata"/>
      </manifest>

    </jar>

  </target>

  <target name="compile-war-extra" description="some extra stuff for war generation">

    <property name="tds.properties.TEMPLATE.path"
              location="src/main/template/thredds/server/tds.properties.TEMPLATE" />
    <property name="tds.properties.file.path"
              value="${webapp.dir}/WEB-INF/classes/thredds/server/tds.properties" />
    <property name="tds.properties.header"
              value="DO NOT EDIT THIS FILE: It is automatically generated from ${tds.properties.TEMPLATE.path}" />
    <copy file="${tds.properties.TEMPLATE.path}"
          tofile="${tds.properties.file.path}"
          overwrite="true">
      <filterset>
        <filter token="VERSION" value="${release.version}"/>
        <filter token="VERSION.MINOR" value="${release.version.minor}"/>
        <filter token="BUILDTIME" value="${build.time.number}"/>
        <filter token="BUILD.NAME" value="${build.name}"/>
        <filter token="HEADER" value="${tds.properties.header}" />
      </filterset>
    </copy>

  </target>

  <property name="ncwms.class.dir" value="${root.dir}/../../ncwms/target/classes"/>

  <target  name="ncwms-setup" description="Create ncwms.jar (assumes already compiled).">
    <jar destfile="${lib.dir}/${ncwms.jar}">
      <fileset dir="${ncwms.class.dir}"/>

      <manifest>
        <attribute name="Built-By" value="Unidata - ${user.name}"/>
        <attribute name="Built-On" value="${build.time}"/>
        <attribute name="Implementation-Title" value="ncWMS for TDS"/>
        <attribute name="Implementation-Version" value="1.0.rc2"/>
        <attribute name="Implementation-Vendor" value="University of Reading"/>
      </manifest>
    </jar>

  </target>

  <property name="readme.file" value="${war.dir}/docs/README.txt" />
  <property name="changeLog.file" value="${war.dir}/docs/CHANGES.txt" />
  <!-- build war directory -->
  <target name="war-setup" depends="compile, compile-war-extra" description="create a distribution">

    <!-- create README file with time and version -->
    <mkdir dir="${war.dir}"/>
    <copy file="README.TEMPLATE" tofile="${readme.file}" overwrite="true">
      <filterset>
        <filter token="BUILDTIME" value="${build.time}"/>
        <filter token="BUILD.NAME" value="${build.name}"/>
        <filter token="VERSION" value="${release.version.minor}"/>
        <filter token="VERSION.MINOR" value="${release.version.minor}"/>
      </filterset>
    </copy>

    <copy file="CHANGES.txt" tofile="${changeLog.file}" overwrite="true">
      <filterset>
        <filter token="BUILDTIME" value="${build.time}"/>
        <filter token="BUILD.NAME" value="${build.name}"/>
        <filter token="VERSION" value="${release.version}"/>
        <filter token="VERSION.MINOR" value="${release.version.minor}"/>
      </filterset>
    </copy>
   
    <!-- copy classes to war classes directory. -->
    <mkdir dir="${war.dir}/WEB-INF/classes"/>
    <copy todir="${war.dir}/WEB-INF/classes" preservelastmodified="true" overwrite="true">
      <fileset dir="${build.classes.dir}"/>
    </copy>

    <!-- copy libraries to war lib directory. -->
    <mkdir dir="${war.dir}/WEB-INF/lib"/>
    <copy todir="${war.dir}/WEB-INF/lib" flatten="true" overwrite="true" preservelastmodified="true">
      <fileset refid="compile.libraries"/>
      <fileset refid="runtime.libraries"/>
    </copy>

   <!-- Copy webapps dir  -->
    <copy todir="${war.dir}" overwrite="true" preservelastmodified="true">
      <fileset dir="${webapp.dir}" />
    </copy>

    <!-- Servlet engine needs write permission on log, config, and catalog directories.
    <chmod file="${war.dir}/initialContent/logs" perm="775" type="dir"/>
    <chmod file="${war.dir}/initialContent/cataloggen/config" perm="775" type="dir"/>
    <chmod file="${war.dir}/initialContent/cataloggen/catalogs" perm="775" type="dir"/>
    <chmod file="${war.dir}/initialContent/dqcServlet/config" perm="775" type="dir"/>  -->

  </target>
  <!-- dist target -->
  <target  name="cleanMakeSrcAndWar" depends="clean, makeSrcAndWar"/>
  <target  name="makeSrcAndWar" depends="makeSrc-TDS, makeWar, makeChecksums"/>

  <target name="cleanMakeWar" depends="clean, makeWar" />

  <target name="makeWar" depends="war-setup" description="create a war file from the distribution directory">
    <jar destfile="${build.dir}/${warfile}">
      <fileset dir="${war.dir}"/>

      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-On" value="${build.time}"/>
        <attribute name="Implementation-Title" value="THREDDS Data Server"/>
        <attribute name="Implementation-Version" value="${release.version.minor}"/>
        <attribute name="Implementation-Vendor" value="UCAR/Unidata"/>
      </manifest>
    </jar>

  </target>

  <target  name="makeChecksums">
    <checksum>
      <fileset dir="${build.dir}">
        <include name="*.jar"/>
        <include name="*.war"/>
      </fileset>
    </checksum>
  </target>

  <!--
   * Targets and properties for building the CDM Validator webapp (cdmvalidator.war):
   * - "makeWar-cdmvalidator" - generates cdmvalidator.war file after calling "war-setup-cdmvalidator".
   * - "war-setup-cdmvalidator" - build web app directory after calling "compile-cdmvalidator" and "compile-war-extras-cdmvalidator".
   * - "compile-cdmvalidator" - compile Java code needed for CDM Validator after calling "clean".
   * - "compile-war-extra-cdmvalidator" - to "compile" property file from TEMPLATE file
   * -->
  <property name="cdmvalidator.webapp.dir" location="${root.dir}/src/main/webapp-cdmValidator"/>
  <property name="cdmvalidator.war.dir" value="${build.dir}/cdmvalidator/"/>
  <property name="cdmvalidator.war.file" value="${build.dir}/cdmvalidator.war"/>

  <!--
   * Target for generating cdmvalidator.war file.
   * -->
  <target name="makeWar-cdmvalidator" depends="war-setup-cdmvalidator"
          description="Make the cdmvalidator.war file.">
    <jar destfile="${cdmvalidator.war.file}">
      <fileset dir="${cdmvalidator.war.dir}"/>

      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-On" value="${build.time}"/>
        <attribute name="Implementation-Title" value="CDM Validator"/>
        <attribute name="Implementation-Version" value="${release.version.minor}"/>
        <attribute name="Implementation-Vendor" value="UCAR/Unidata"/>
      </manifest>
    </jar>
  </target>

  <!--
   * Target to setup cdmvalidator web app directory.
   * -->
  <target name="war-setup-cdmvalidator" depends="clean, compile-cdmvalidator, compile-war-extra-cdmvalidator"
          description="Setup for cdmvalidator.war generation.">

    <!-- create README file with time and version -->
    <mkdir dir="${cdmvalidator.war.dir}"/>
    <copy file="README.cdmvalidator.txt" tofile="${cdmvalidator.war.dir}/README.txt" overwrite="true">
      <filterset>
        <filter token="BUILDTIME" value="${build.time}"/>
        <filter token="VERSION" value="${release.version.minor}"/>
        <filter token="VERSION.MINOR" value="${release.version.minor}"/>
      </filterset>
    </copy>

    <copy file="CHANGES.cdmvalidator.txt" tofile="${cdmvalidator.war.dir}/CHANGES.txt" overwrite="true">
      <filterset>
        <filter token="BUILDTIME" value="${build.time}"/>
        <filter token="VERSION" value="${release.version}"/>
        <filter token="VERSION.MINOR" value="${release.version.minor}"/>
      </filterset>
    </copy>

    <!-- Copy webapps dir  -->
    <copy todir="${cdmvalidator.war.dir}" overwrite="true" preservelastmodified="true">
      <fileset dir="${cdmvalidator.webapp.dir}" />
    </copy>

    <!-- copy classes to war classes directory. -->
    <copy todir="${cdmvalidator.war.dir}/WEB-INF/classes" preservelastmodified="true" overwrite="true">
      <fileset dir="${build.classes.dir}"/>
    </copy>

    <!-- copy libraries to war lib directory. -->
    <mkdir dir="${cdmvalidator.war.dir}/WEB-INF/lib"/>
    <copy todir="${cdmvalidator.war.dir}/WEB-INF/lib" flatten="true" overwrite="true" preservelastmodified="true">
      <fileset refid="compile.libraries"/>
      <fileset refid="runtime.libraries"/>
    </copy>

  </target>

  <!--
   * Target to compile only the code needed by CDM Validator.
   * -->
  <target name="compile-cdmvalidator" depends="init, release-settings" description="CDM Validator compile">
    <javac destdir="${build.classes.dir}" source="1.6" target="1.6" debug="${build.debug}"
           debuglevel="${build.debuglevel}" includeAntRuntime="false">
      <src refid="sourcepath"/>
      <patternset refid="sources-cdmvalidator"/>
      <classpath refid="compile.classpath"/>
    </javac>
  </target>

  <!--
   * Target to compile some extra stuff needed by CDM Validator.
   * -->
  <target name="compile-war-extra-cdmvalidator" description="Extras for cdmvalidator.war generation.">

    <property name="cdmvalidator.properties.TEMPLATE.path"
              location="src/main/template/thredds/server/cdmvalidator.properties.TEMPLATE" />
    <property name="cdmvalidator.properties.file.path"
              value="${cdmvalidator.webapp.dir}/WEB-INF/classes/thredds/server/cdmvalidator.properties" />
    <property name="cdmvalidator.properties.header"
              value="DO NOT EDIT THIS FILE: It is automatically generated from ${cdmvalidator.properties.TEMPLATE.path}" />
    <copy file="${cdmvalidator.properties.TEMPLATE.path}"
          tofile="${cdmvalidator.properties.file.path}"
          overwrite="true">
      <filterset>
        <filter token="VERSION" value="${release.version}"/>
        <filter token="VERSION.MINOR" value="${release.version.minor}"/>
        <filter token="BUILDTIME" value="${build.time.number}"/>
        <filter token="HEADER" value="${cdmvalidator.properties.header}" />
      </filterset>
    </copy>
  </target>

  <!--
   * Targets for building example THREDDS server:
   * - "makeWar-ExampleThredds" -
   * -->
  <target name="makeWar-ExampleThredds" depends="war-setup" description="create a war file from the distribution directory">
    <!-- Copy web.xml into war dir. -->
    <copy file="src/main/webapp-expThredds/WEB-INF/web.xml"
          tofile="${war.dir}/WEB-INF/web.xml"
          overwrite="true" preservelastmodified="true"/>
    <!-- Copy web.xml into war dir. -->
    <mkdir dir="${war.dir}/META-INF"/>
    <copy file="src/main/webapp-expThredds/META-INF/context.xml"
          tofile="${war.dir}/META-INF/context.xml"
          overwrite="true" preservelastmodified="true"/>

    <jar destfile="${build.dir}/expThredds.war">
      <fileset dir="${war.dir}"/>

      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-On" value="${build.time}"/>
        <attribute name="Implementation-Title" value="Example THREDDS Server"/>
        <attribute name="Implementation-Version" value="${release.version.minor}"/>
        <attribute name="Implementation-Vendor" value="UCAR/Unidata"/>
      </manifest>
    </jar>
  </target>

  <target name="makeWar-DqcServletRedirect" depends="init, release-settings"
          description="create a war file from the distribution directory">

    <!-- build thredds.dqc.DqcServletRedirect -->
    <javac destdir="${build.classes.dir}" source="1.6" target="1.6" debug="${build.debug}"
           debuglevel="${build.debuglevel}"
           includeAntRuntime="false">
      <src refid="sourcepath"/>
      <patternset includes="thredds/dqc/server/DqcServletRedirect.java"/>
      <classpath refid="compile.classpath"/>
    </javac>

    <!-- create war dir -->
    <mkdir dir="${war.dir}"/>

    <!-- create README file with time and version -->
    <copy file="README.TEMPLATE" tofile="${war.dir}/docs/README.txt" overwrite="true">
      <filterset>
        <filter token="BUILDTIME" value="${build.time}"/>
        <filter token="VERSION" value="${release.version}"/>
        <filter token="VERSION.MINOR" value="${release.version.minor}"/>
      </filterset>
    </copy>

    <!-- copy classes to war classes directory. -->
    <mkdir dir="${war.dir}/WEB-INF/classes"/>
    <copy todir="${war.dir}/WEB-INF/classes" preservelastmodified="true" overwrite="true">
      <fileset dir="${build.classes.dir}" excludes="ucar/**"/>
    </copy>

    <!-- copy libraries to war lib directory. -->
    <mkdir dir="${war.dir}/WEB-INF/lib"/>
    <copy todir="${war.dir}/WEB-INF/lib" flatten="true" overwrite="true" preservelastmodified="true">
      <fileset refid="compile.libraries"/>
      <fileset refid="runtime.libraries"/>
    </copy>

    <!-- create initialContent directory with log directory
    <mkdir dir="${war.dir}/initialContent/logs"/>
    <chmod file="${war.dir}/initialContent/logs" perm="775" type="dir"/> -->

    <!-- Copy index.html into war dir. -->
    <copy file="src/main/webapp-dqcServletRedirect/index.html"
          tofile="${war.dir}/index.html"
          overwrite="true" preservelastmodified="true"/>

    <!-- Copy web.xml into war dir. -->
    <copy file="src/main/webapp-dqcServletRedirect/WEB-INF/web.xml"
          tofile="${war.dir}/WEB-INF/web.xml"
          overwrite="true" preservelastmodified="true"/>

    <!-- Copy log4j.xml into war dir. -->
    <copy file="src/main/webapp-dqcServletRedirect/WEB-INF/log4j.xml"
          tofile="${war.dir}/WEB-INF/log4j.xml"
          overwrite="true" preservelastmodified="true"/>

    <!-- Copy context.xml into war dir. -->
    <copy file="src/main/webapp-dqcServletRedirect/META-INF/context.xml"
          tofile="${war.dir}/META-INF/context.xml"
          overwrite="true" preservelastmodified="true"/>

    <!-- Create the WAR file. -->
    <jar destfile="${build.dir}/dqcServlet.war">
      <fileset dir="${war.dir}"/>

      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-On" value="${build.time}"/>
        <attribute name="Implementation-Title" value="DqcServletRedirect - test"/>
        <attribute name="Implementation-Version" value="${release.version.minor}"/>
        <attribute name="Implementation-Vendor" value="UCAR/Unidata"/>
      </manifest>
    </jar>

  </target>

  <!-- Make source release. -->
  <property name="tdsSrcRelease.jar" value="tdsSrc-${release.version}.jar"/>
  <target name="makeSrc-TDS" depends="init" description="create TDS source release">
    <jar jarfile="${build.dir}/${tdsSrcRelease.jar}" index="true" duplicate="preserve">
      <fileset dir="${root.dir}/..">
        <include name="common/**" />
        <include name="cdm/**" />
        <include name="lib/**" />
        <include name="intelliJ/**" />
        <include name="tds/**" />

        <exclude name="common/target/**" />
        <exclude name="cdm/doc/**" />
        <exclude name="cdm/target/**" />
        <exclude name="intelliJ/target/**" />
        <exclude name="tds/doc/**" />
        <exclude name="tds/target/**" />
        <exclude name="tds/content/**" />
      </fileset>

      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-On" value="${build.time}"/>
        <attribute name="Implementation-Title" value="THREDDS Data Server (TDS) Source"/>
        <attribute name="Implementation-Version" value="${release.version.minor}"/>
        <attribute name="Implementation-Vendor" value="UCAR/Unidata"/>
      </manifest>
    </jar>

  </target>

  <!-- ********** Javadoc Realease ********** -->
  <!-- Current CDM javadoc URL. -->
  <property name="cdmAll.javadoc.url"
            value="http://www.unidata.ucar.edu/software/netcdf-java/v4.0/javadocAll/"/>

  <!-- Build the Javadocs  -->
  <target name="javadoc" description="make the javadocs">
    <mkdir dir="${javadoc.dir}"/>
    <javadoc Doctitle="THREDDS" Windowtitle="THREDDS" maxmemory="256m" Use="true"
             sourcepathref="sourcepath" destdir="${javadoc.dir}" public="true" source="1.6">

      <classpath refid="compile.classpath"/>

      <package name="dods.servers.netcdf"/>
      <package name="thredds.cataloggen.servlet"/>
      <package name="thredds.dqc.server.*"/>
      <package name="thredds.examples"/>
      <package name="thredds.servlet"/>
      <package name="thredds.servlet.ldm"/>
      <package name="thredds.wcs.servlet"/>

      <link href="${cdmAll.javadoc.url}" />

    </javadoc>
  </target>

  <!-- Create javadoc Zip -->
  <property name="javadocZipReleaseName" value="tdsJavadoc-${release.version}.zip"/>
  <property name="javadocZip.dir" value="${build.dir}/javadocZip"/>
  <property name="javadocZip.target.dir" value="${javadocZip.dir}/thredds-${release.version.minor}/javadoc"/>
  <target name="makeJavadocZip" depends="javadoc"
          description="create a zip file containing THREDDS Data Server javadoc">
    <mkdir dir="${javadocZip.target.dir}"/>
    <copy todir="${javadocZip.target.dir}" overwrite="true">
      <fileset dir="${javadoc.dir}"/>
    </copy>

    <zip destfile="${build.dir}/${javadocZipReleaseName}" basedir="${javadocZip.dir}"/>
  </target>

  <!-- ************* Create Digests ******************** -->
  <property name="tomcat_root" value="C:/Program Files (x86)/Apache Software Foundation/Tomcat-6.0.16"/>
  <path id="tomcatClassPath">
    <fileset dir="${tomcat_root}/bin">
      <include name="*.jar"/>
    </fileset>
    <fileset dir="${tomcat_root}/server/lib">
      <include name="*.jar"/>
    </fileset>
  </path>
  <target name="digest" description="Create password digest">
    <!--pathconvert property="tomcatClassPath.prop" refid="tomcatClassPath" targetos="windows"/>
    <echo>tomcatClassPath=${tomcatClassPath.prop}</echo -->
    <input addproperty="algorithm">Enter algorithm:</input>
    <input addproperty="password">Enter password:</input>
    <java classname="org.apache.catalina.realm.RealmBase" fork="yes">
      <classpath refid="tomcatClassPath"/>
      <arg line="-a ${algorithm} ${password}"/>
    </java>
  </target>


  <!-- ************* DEPLOYMENT ******************** -->
  <property name="username" value="admin"/>
  <target name="deploy-local" description="Deploy web application to localhost">
    <antcall target="deploy">
      <param name="server_url" value="http://localhost:8080"/>
      <param name="tomcat.password" value="${local.password}"/>
    </antcall>
  </target>

  <target name="deploy-uni10-dev" description="Deploy web application to uni10 dev/test server">
    <antcall target="deploy">
      <param name="server_url" value="http://uni10.unidata.ucar.edu:8090"/>
      <param name="tomcat.password" value="${motherlode.password}"/>
    </antcall>
  </target>

  <target name="deploy-motherlode-dev" description="Deploy web application to motherlode dev/test server">
    <antcall target="deploy">
      <param name="server_url" value="http://motherlode.ucar.edu:9080"/>
      <param name="tomcat.password" value="${motherlode.password}"/>
    </antcall>
  </target>

  <target name="deploy-motherlode-live" description="Deploy web application to motherlode live server">
    <antcall target="deploy">
      <param name="server_url" value="http://motherlode.ucar.edu:8080"/>
      <param name="tomcat.password" value="${motherlode.password}"/>
    </antcall>
  </target>

  <!-- Configure the custom Ant tasks for the Manager application -->
  <path id="tomcat.ant.classpath">
    <pathelement location="${lib.dir}/${catalina-ant.jar}"/>
  </path>

  <!-- Configure the custom Ant tasks for the Manager application -->
  <taskdef name="deploy"
           classname="org.apache.catalina.ant.DeployTask"
           classpathref="tomcat.ant.classpath" />
  <taskdef name="list"
           classname="org.apache.catalina.ant.ListTask"
           classpathref="tomcat.ant.classpath"/>
  <taskdef name="reload"
           classname="org.apache.catalina.ant.ReloadTask"
           classpathref="tomcat.ant.classpath"/>
  <taskdef name="resources"
           classname="org.apache.catalina.ant.ResourcesTask"
           classpathref="tomcat.ant.classpath"/>
  <taskdef name="roles"
           classname="org.apache.catalina.ant.RolesTask"
           classpathref="tomcat.ant.classpath"/>
  <taskdef name="start"
           classname="org.apache.catalina.ant.StartTask"
           classpathref="tomcat.ant.classpath"/>
  <taskdef name="stop"
           classname="org.apache.catalina.ant.StopTask"
           classpathref="tomcat.ant.classpath"/>
  <taskdef name="undeploy"
           classname="org.apache.catalina.ant.UndeployTask"
           classpathref="tomcat.ant.classpath"/>

  <target name="deploy" depends="makeWar" description="Deploy web application">
    <deploy url="${server_url}/manager" username="${username}" password="${tomcat.password}" path="${contextPath}"
            war="${build.dir}/${warfile}" update="true"/>
  </target>
  <target name="undeploy" description="Undeploy web application">
    <undeploy url="${server_url}/manager" username="${username}" password="${tomcat.password}" path="${contextPath}"/>
  </target>
  <!-- Webapp lifecycle control -->
  <target name="start" description="Start web application">
    <start url="${server_url}/manager" username="${username}" password="${tomcat.password}" path="${contextPath}"/>
  </target>
  <target name="reload" description="Reload web application">
    <reload url="${server_url}/manager" username="${username}" password="${tomcat.password}" path="${contextPath}"/>
  </target>
  <target name="stop" description="Stop web application">
    <stop url="${server_url}/manager" username="${username}" password="${tomcat.password}" path="${contextPath}"/>
  </target>

  <!-- Clean, make source, make war, make checksums, and copy to snapshot directory on FTP site. -->
  <target name="cleanReleaseSnapshot" depends="cleanMakeSrcAndWar"
          description="clean, build (including checksums), and copy files to the thredds/4.2/snapshot/4.2.{build.name}/ directory">
    <antcall target="doNotUseDirectly-release">
      <param name="target.release.directory" value="${releaseSnapshot.dir}" />
    </antcall>
  </target>

  <!-- Clean, make source, make war, make checksums, and copy to release directory on FTP site. -->
  <target name="cleanRelease" depends="cleanMakeSrcAndWar, release"
          description="clean, build (including checksums), and copy files to the ftp/pub/thredds/4.2/4.2.{build.name}/ directory">
  </target>

  <!-- Copy already built distribution to release directory on FTP site.
     Make sure the same values of 'build.number' and 'build.name' are used
     for the build and for this target:
     'ant -Dbuild.number=X -Dbuild.name=Y makeSrcAnsWar'
     'ant -Dbuild.number=X -Dbuild.name=Y release'
    -->
  <target name="release" description="copies existing distribution files to the ftp/pub/thredds/4.2/4.2.{build.name}/ directory.">
    <antcall target="doNotUseDirectly-release">
      <param name="target.release.directory" value="${release.dir}" />
    </antcall>
  </target>

  <target name="doNotUseDirectly-release">              
    <!-- Set default target directory. -->
    <property name="target.release.directory" value="${user.home}/temp.tdsReleaseTestDir/${release.dir.name}" />
    <mkdir dir="${target.release.directory}" />
    <copy todir="${target.release.directory}" overwrite="true">
      <fileset file="${readme.file}" />
      <fileset file="${changeLog.file}" />
      <fileset dir="${build.dir}">
        <include name="${warfile}" />
        <include name="${warfile}.MD5" />
        <include name="${tdsSrcRelease.jar}" />
        <include name="${tdsSrcRelease.jar}.MD5" />
      </fileset>
    </copy>
  </target>

  <!-- Release catalog manual. (target from thredds/catalog/build.xml) -->
  <!--target name="releaseManual" description="Copy manual to release directory">
    <copy todir="${release.library.dir}" overwrite="true" file="./docs/CatalogManual.doc"/>
  </target-->

  <!-- TESTING  -->
  <property name="test.src.dir" location="${root.dir}/src/test/java"/>
  <property name="test.data.dir" location="${root.dir}/src/test/data"/>
  <property name="test.classes.dir" value="${build.dir}/test/classes"/>
  <property name="test.reports.dir" value="${build.dir}/test/reports"/>

  <property name="cdm.test.classes.jar" value="${root.dir}/../cdm/target/cdmTestClasses.jar" />
  <property name="test.classes.jar" value="${build.dir}/tdsTestClasses.jar"/>

  <path id="test.classpath">
    <path refid="compile.classpath"/>
    <fileset refid="runtime.libraries"/>
    <fileset dir="${lib.dir}">
      <include name="${spring-test.jar}" />
      <include name="${junit.jar}" />
      <include name="${httpunit.jar}" />
    </fileset>
    <pathelement location="${build.classes.dir}"/>
    <fileset file="${cdm.test.classes.jar}"/>
  </path>

  <target name="test-setup" description="compile and setup for tests">
    <mkdir dir="${test.classes.dir}"/>
    <mkdir dir="${test.reports.dir}"/>

    <!-- debugging path -->
    <property name="test.classpath" refid="test.classpath"/>
    <echo>test.classpath=${test.classpath}</echo>

    <javac srcdir="${test.src.dir}" destdir="${test.classes.dir}"
           source="1.6" target="1.6" debug="${build.debug}">
      <classpath refid="test.classpath"/>
    </javac>

    <!-- Copy test data into the test classes directory so can be used as resource. -->
    <copy todir="${test.classes.dir}" overwrite="true">
      <fileset dir="${test.data.dir}"/>
    </copy>

    <jar jarfile="${test.classes.jar}" index="true" duplicate="preserve">
      <fileset dir="${test.classes.dir}" />

      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-On" value="${build.time}"/>
        <attribute name="Implementation-Title" value="TDS Test Classes"/>
        <attribute name="Implementation-Version" value="${release.version.minor}"/>
        <attribute name="Implementation-Vendor" value="UCAR/Unidata"/>
      </manifest>
    </jar>
  </target>

  <target name="unit-test" depends="compile, test-setup" description="run junit tests">
    <antcall target="test-TDS">
      <param name="test.id" value="unit-test" />
      <param name="test.class" value="thredds.TestAll" />
    </antcall>
  </target>

  <!-- Sampling of TDS IDD catalogs. -->
  <property name="tdsCat" value="catalog.xml" />
  <property name="tdsIddCat-models" value="idd/models.xml" />
  <property name="tdsIddCat-metar" value="catalog/station/metar/catalog.xml" />
  <property name="tdsIddCat-radCompNws" value="catalog/nexrad/composite/nws/catalog.xml" />
  <property name="tdsIddCat-radCompUniGini" value="catalog/nexrad/composite/gini/catalog.xml" />
  <property name="tdsIddCat-radCompUniGrib1km" value="catalog/nexrad/composite/1km/files/catalog.xml" />
  <property name="tdsIddCat-radLevel2" value="catalog/nexrad/level2/KFTG/catalog.xml" />
  <property name="tdsIddCat-radLevel3" value="catalog/nexrad/level3/N0R/VNX/catalog.xml" />
  <property name="tdsIddCat-profWind1hr" value="catalog/station/profiler/wind/1hr/catalog.xml" />
  <property name="tdsIddCat-profRASS1hr" value="catalog/station/profiler/RASS/1hr/catalog.xml" />
  <property name="tdsIddCat-soundings" value="catalog/station/soundings/catalog.xml" />
  <property name="tdsIddCat-satellite" value="catalog/satellite/WV/AK-REGIONAL_16km/catalog.xml" />

  <property name="tdsIddCat-full" value="${tdsCat},${tdsIddCat-models}" />
  <!-- Removed ${tdsIddCat-soundings} from below till John/Robb fix BUFR profile problem. -->
  <property name="tdsIddCat-fullSample" value="${tdsIddCat-models},${tdsIddCat-metar},${tdsIddCat-radCompNws},${tdsIddCat-radCompUniGini},${tdsIddCat-radCompUniGrib1km},${tdsIddCat-radLevel2},${tdsIddCat-radLevel3},${tdsIddCat-profWind1hr},${tdsIddCat-profRASS1hr},${tdsIddCat-satellite}" />

  <!-- Used by TeamCity to test motherlode:8080 every hour -->
  <target name="test-TDS-ping-motherlode-8080" description="ping TDS on motherlode:8080">
    <antcall target="test-TDS">
      <param name="thredds.tds.test.id" value="ping-motherlode-8080" />
      <param name="thredds.tds.test.server" value="motherlode.ucar.edu:8080" />
      <param name="thredds.tds.test.level" value="ping-mlode" />
    </antcall>
  </target>

  <target name="test-TDS-ping-motherlode-8081" description="ping TDS on motherlode:8081">
    <antcall target="test-TDS">
      <param name="thredds.tds.test.id" value="ping-motherlode-8081" />
      <param name="thredds.tds.test.server" value="motherlode.ucar.edu:8081" />
      <param name="thredds.tds.test.level" value="ping-mlode" />
    </antcall>
  </target>

  <target name="test-TDS-ping-motherlode-9080" description="ping TDS on motherlode:9080">
    <antcall target="test-TDS">
      <param name="thredds.tds.test.id" value="ping-motherlode-9080" />
      <param name="thredds.tds.test.server" value="motherlode.ucar.edu:9080" />
      <param name="thredds.tds.test.level" value="ping-mlode" />
    </antcall>
  </target>

  <target name="test-TDS-crawl-motherlode-8080" description="crawl TDS on motherlode:8080">
    <antcall target="test-TDS">
      <param name="thredds.tds.test.id" value="crawl-motherlode-8080" />
      <param name="thredds.tds.test.server" value="motherlode.ucar.edu:8080" />
      <param name="thredds.tds.test.level" value="crawl-catalogs" />
      <param name="thredds.tds.test.catalogs" value="${tdsIddCat-models}" />
    </antcall>
  </target>

  <target name="test-TDS-crawl-motherlode-9080" description="crawl TDS on motherlode:9080">
    <antcall target="test-TDS">
      <param name="thredds.tds.test.id" value="crawl-motherlode-9080" />
      <param name="thredds.tds.test.server" value="motherlode.ucar.edu:9080" />
      <param name="thredds.tds.test.level" value="crawl-catalogs" />
      <param name="thredds.tds.test.catalogs" value="${tdsIddCat-models}" />
    </antcall>
  </target>

  <target name="test-TDS-ping-overlode-8080" description="ping TDS at NSF">
    <antcall target="test-TDS">
      <param name="thredds.tds.test.id" value="ping-overlode-8080" />
      <param name="thredds.tds.test.server" value="thredds.cise-nsf.gov:8080" />
      <param name="thredds.tds.test.level" value="ping-idd" />
    </antcall>
  </target>

  <target name="test-TDS-crawl-overlode-8080" description="crawl TDS at NSF">
    <antcall target="test-TDS">
      <param name="thredds.tds.test.id" value="crawl-overlode-8080" />
      <param name="thredds.tds.test.server" value="thredds.cise-nsf.gov:8080" />
      <param name="thredds.tds.test.level" value="crawl-catalogs"  />
      <param name="thredds.tds.test.catalogs" value="${tdsIddCat-models}" />
    </antcall>
  </target>

  <target name="test-TDS-crawlLimitedCat1Ds-mlode-8080">
    <antcall target="test-TDS">
      <param name="thredds.tds.test.id" value="crawlLimitedCat1Ds-mlode-8080" />
      <param name="thredds.tds.test.level" value="crawl-catalogs-and1DsPerCollection"  />
      <param name="thredds.tds.test.catalogs" value="${tdsIddCat-fullSample}" />
    </antcall>
  </target>

  <target name="test-TDS-crawlLimitedCat1Ds-mlode-8081">
    <antcall target="test-TDS">
      <param name="thredds.tds.test.id" value="crawlLimitedCat1Ds-mlode-8081" />
      <param name="thredds.tds.test.server" value="motherlode.ucar.edu:8081" />
      <param name="thredds.tds.test.level" value="crawl-catalogs-and1DsPerCollection"  />
      <param name="thredds.tds.test.catalogs" value="${tdsIddCat-fullSample}" />
    </antcall>
  </target>

  <target name="test-TDS-crawlLimitedCat1Ds-mlode-9080">
    <antcall target="test-TDS">
      <param name="thredds.tds.test.id" value="crawlLimitedCat1Ds-mlode-9080" />
      <param name="thredds.tds.test.server" value="motherlode.ucar.edu:9080" />
      <param name="thredds.tds.test.level" value="crawl-catalogs-and1DsPerCollection"  />
      <param name="thredds.tds.test.catalogs" value="${tdsIddCat-fullSample}" />
    </antcall>
  </target>


  <!-- =========================== -->
  <property name="tdsMlodeIdvCat" value="idv/models.xml" />
  <property name="tdsMlodeCatGen" value="cataloggen/catalogs/uniModelsInvCat1.0en.xml,cataloggen/catalogs/idv-rt-models.InvCat1.0.xml,idv/rt-models.xml" />

  <property name="tdsIddCat-sample" value="${tdsIddCat-metar},${tdsIddCat-radCompNws},${tdsIddCat-radCompUniGrib1km},${tdsIddCat-radLevel2},${tdsIddCat-radLevel3},${tdsIddCat-profWind1hr},${tdsIddCat-profRASS1hr},${tdsIddCat-satellite}" />

  <property name="tdsNewMlodeAll" value="${tdsIddCat-sample}" />
  <!--property name="tdsNewMlodeAll" value="${tdsIddCat-models},${tdsMlodeIdvCat},${tdsMlodeCatGen},${tdsIddCat-sample}" /-->

<!-- =========================== -->

  <!-- -->
  <target name="test-TDS-by-hand" description="test a TDS by hand">
    <antcall target="test-TDS">
      <param name="thredds.tds.test.id" value="test-1-by-hand" />
      <param name="thredds.tds.test.server" value="motherlode.ucar.edu:8081" />
      <param name="thredds.tds.test.level" value="ping-catalogs" />
      <param name="thredds.tds.test.catalogs" value="${tdsIddCat-fullSample}" />
      <!--
      Ping each catalog in the given list of catalogs (in this case,
      a fairly full list of catalogs):
        <param name="thredds.tds.test.level" value="ping-catalogs" />
        <param name="thredds.tds.test.catalogs" value="${tdsIddCat-full}" />

      Crawl each catalog in the given list (in this case, a fairly full
      list of catalogs minus their ancestor catalog "/thredds/catalog.xml"):
        <param name="thredds.tds.test.level" value="crawl-catalogs" />
        <param name="thredds.tds.test.catalogs" value="${tdsIddCat-fullSample}" />

      Crawl each catalog in given list and open one dataset per collection of node datasets
      (the list of catalogs is only "idv/models.xml" catalog):
        <param name="thredds.tds.test.level" value="crawl-catalogs-and1DsPerCollection"  />
        <param name="thredds.tds.test.catalogs" value="${tdsMlodeIdvCat}" />
       -->

    </antcall>
  </target>


  <!-- Make sure to set the following properties:
       1) "thredds.tds.test.id"
       2) "thredds.tds.test.server"
       3) "thredds.tds.test.level"
       4) "thredds.tds.test.catalogs" -->
  <target name="test-TDS" description="test a TDS">
    <!-- Set default values for properties. -->
    <property name="thredds.tds.test.id" value="test-TDS" />
    <property name="thredds.tds.test.server" value="motherlode.ucar.edu:8080" />
    <property name="thredds.tds.test.level" value="ping-catalogs" />
    <property name="thredds.tds.test.catalogs" value="catalog.xml" />
    <property name="thredds.tds.test.catalog" value="catalog.xml" />
    <!-- Print the property values. -->
    <echo>thredds.tds.test.id=${thredds.tds.test.id}</echo>
    <echo>thredds.tds.test.server=${thredds.tds.test.server}</echo>
    <echo>thredds.tds.test.level=${thredds.tds.test.level}</echo>
    <echo>thredds.tds.test.catalogs=${thredds.tds.test.catalogs}</echo>
    <echo>[OR : thredds.tds.test.catalog=${thredds.tds.test.catalog}]</echo>

    <property name="junit.temp.dir" value="${build.dir}/junit/temp" />
    <mkdir dir="${junit.temp.dir}" />

    <mkdir dir="${test.reports.dir}/${thredds.tds.test.id}"/>
    <junit printsummary="false" errorProperty="test.failed" failureProperty="test.failed"
           fork="on"  dir="${root.dir}" tempdir="${junit.temp.dir}">
      <classpath>
        <path refid="test.classpath" />
        <pathelement location="${test.classes.jar}" />
      </classpath>

      <jvmarg value="-ea"/>
      <jvmarg value="-Dthredds.tds.test.server=${thredds.tds.test.server}"/>
      <jvmarg value="-Dthredds.tds.test.level=${thredds.tds.test.level}"/>
      <jvmarg value="-Dthredds.tds.test.catalogs=${thredds.tds.test.catalogs}"/>
      <formatter type="xml"/>
      <formatter type="brief" usefile="false"/>
      <test todir="${test.reports.dir}/${thredds.tds.test.id}" name="thredds.tds.ethan.TestAll"/>
    </junit>

    <!-- #Generate test reports -->
    <junitreport todir="${test.reports.dir}/${thredds.tds.test.id}">
      <fileset dir="${test.reports.dir}/${thredds.tds.test.id}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${test.reports.dir}/${thredds.tds.test.id}"/>
    </junitreport>
    <!-- create temporary file indicating these tests failed -->
    <!-- #Test case bypass trick -->
    <echo message="last build failed tests" file="${test.reports.dir}/${thredds.tds.test.id}/failed"/>
    <fail if="test.failed">FAILED! Unit tests failed.  Look at ${test.reports.dir}/${thredds.tds.test.id}/index.html for details.</fail>
    <!-- Remove test failed file, as these tests succeeded -->
    <delete file="${test.reports.dir}/${thredds.tds.test.id}/failed"/>
    <echo message="SUCCESS! Unit tests succeeded.  Look at ${test.reports.dir}/${thredds.tds.test.id}/index.html for details."/>
  </target>


  <target name="test-crawl-random-dataset-on-all-unidata-managed-TDS">
    <antcall target="run-unit-test">
      <param name="test.id" value="CrawlAndCompareDatasetsOnAllUnidataManagedTds"/>
      <param name="test.class" value="thredds.tds.idd.CrawlAndCompareDatasetsOnAllUnidataManagedTds"/>
    </antcall>
  </target>

  <target name="test-ping-all-unidata-managed-TDS">
    <antcall target="run-unit-test">
      <param name="test.id" value="PingAllUnidataManagedTds"/>
      <param name="test.class" value="thredds.tds.idd.PingAllUnidataManagedTds"/>
    </antcall>
  </target>

  <!--
    - Run a unit test, assumes "compile", and "test-setup" targets.
    -
    - @param test.id a string identifier used in result directory paths.
    - @param test.class the name of the test Class to run.
    -->
  <target name="run-unit-test" description="run a unit test with parameters 'test.id' and 'test.class'.">

    <property name="junit.temp.dir" value="${build.dir}/junit/temp" />
    <mkdir dir="${junit.temp.dir}" />

    <mkdir dir="${test.reports.dir}/${test.id}"/>
    <junit printsummary="false" errorProperty="test.failed" failureProperty="test.failed"
           fork="on" dir="${root.dir}" tempdir="${junit.temp.dir}">
      <classpath>
        <path refid="test.classpath" />
        <pathelement location="${test.classes.jar}" />
      </classpath>

      <jvmarg value="-ea"/>
      <formatter type="xml"/>
      <formatter type="brief" usefile="false"/>
      <test todir="${test.reports.dir}/${test.id}"
            name="${test.class}"/>
    </junit>

    <!-- #Generate test reports -->
    <junitreport todir="${test.reports.dir}/${test.id}">
      <fileset dir="${test.reports.dir}/${test.id}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${test.reports.dir}/${test.id}"/>
    </junitreport>
    <!-- create temporary file indicating these tests failed -->
    <!-- #Test case bypass trick -->
    <echo message="last build failed tests" file="${test.reports.dir}/${test.id}/failed"/>
    <fail if="test.failed">FAILED! Unit tests failed.  Look at ${test.reports.dir}/${test.id}/index.html for details.</fail>
    <!-- Remove test failed file, as these tests succeeded -->
    <delete file="${test.reports.dir}/${test.id}/failed"/>
    <echo message="SUCCESS! Unit tests succeeded.  Look at ${test.reports.dir}/${test.id}/index.html for details."/>
  </target>

  <!-- Add some tasks to help automate war building -->
  <target name="allwar">
	  <ant dir="../opendap" target="clean" inheritAll="false"/>
	  <ant dir="../opendap" target="thredds" inheritAll="false"/>
	  <ant dir="../cdm" target="clean" inheritAll="false"/>
	  <ant dir="../cdm" target="thredds" inheritAll="false"/>
	  <ant dir="." target="cleanMakeWar" inheritAll="false"/>
  </target>


</project>
