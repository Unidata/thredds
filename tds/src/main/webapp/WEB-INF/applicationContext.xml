<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
							http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
              http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
              http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
              http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.2.xsd">


    <!-- Enables the Spring MVC @Controller programming model  -->
    <mvc:annotation-driven/>

    <!-- Application root Context: defines shared resources visible to all other web components -->
    <!-- enabling component-scan in Spring for annotated wirings -->
    <!-- <context:annotation-config /> can be omitted if <context:component-scan> is specified -->
    <context:component-scan base-package="thredds"/>

    <!-- enable @PostConstruct, @PreDestroy annotation -->
    <!-- bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/ -->

    <!-- servlet filters -->
    <bean id="springDelegatingFilter" class="org.springframework.security.web.FilterChainProxy">
        <constructor-arg>
            <list>
                <security:filter-chain pattern="/dap4/**" filters="
           httpHeadFilter,
           requestQueryFilterAllowAngleBrackets,
           requestCORSFilter,
           requestBracketingLogMessageFilter"/>
                <security:filter-chain pattern="/dodsC/**" filters="
           httpHeadFilter,
           requestQueryFilterAllowAngleBrackets,
           requestCORSFilter,
           requestBracketingLogMessageFilter"/>
                <security:filter-chain pattern="/**" filters="
           httpHeadFilter,
           requestQueryFilter,
           requestCORSFilter,
           requestBracketingLogMessageFilter"/>
            </list>
        </constructor-arg>
    </bean>

    <!-- Process HEAD requests on all GETS, see http://axelfontaine.com/blog/http-head.html -->
    <bean id="httpHeadFilter" class="thredds.servlet.filter.HttpHeadFilter"/>
    <bean id="requestQueryFilter" class="thredds.servlet.filter.RequestQueryFilter"/>
    <bean id="requestQueryFilterAllowAngleBrackets" class="thredds.servlet.filter.RequestQueryFilter">
        <property name="allowAngleBrackets" value="true"/>
    </bean>
    <bean id="requestCORSFilter" class="thredds.servlet.filter.RequestCORSFilter"/>
    <bean id="requestBracketingLogMessageFilter" class="thredds.servlet.filter.RequestBracketingLogMessageFilter"/>

    <!-- Properties -->
    <!-- tell spring that tds.properties gets read in first and overrides anything else -->
    <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <!-- Check system properties before looking in tds.properties. -->
        <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>

        <!-- Default is "false": An exception will be thrown if a placeholder fails to resolve.
        Switch this flag to "true" in order to preserve the placeholder String as-is in such a case,
        leaving it up to other placeholder configurers to resolve it. -->
        <property name="ignoreUnresolvablePlaceholders" value="true"/>

        <property name="locations">
            <list>
                <value>classpath:thredds/server/tds.properties</value>
            </list>
        </property>
    </bean>

    <util:map id="dataRootLocationAliasExpanders" map-class="java.util.HashMap">
        <entry key="cdmUnitTest" value="${unidata.testdata.path}/cdmUnitTest"/>
    </util:map>

    <!-- replace threddsConfig.xml when possible (experimental) -->
    <import resource="tdsGlobalConfig.xml"/>

    <!-- Config Beans -->
    <bean id="htmlConfig" class="thredds.server.config.HtmlConfigBean">
        <property name="webappUrl" value="${tds.url}"/>
        <property name="webappDocsUrl" value="${tds.documentation.url}"/>
        <property name="webappLogoUrl" value="${tds.logo.url}"/>
        <property name="webappLogoAlt" value="${tds.logo.alt}"/>
        <property name="installUrl" value="${tds.install.url}"/>
    </bean>
    <bean id="corsConfig" class="thredds.server.config.CorsConfigBean"/>
    <bean id="tdsUpdateConfig" class="thredds.server.config.TdsUpdateConfigBean"/>
    <bean id="wmsConfig" class="thredds.server.config.WmsConfigBean"/>

    <!-- Typically we use Spring wiring when we need to share instances. Also using @Component scanning -->
    <!-- bean id="tdsInit" class="thredds.server.config.TdsInit" />
    <bean id="configCatalogInitialization" class="thredds.core.ConfigCatalogInitialization" />
    <bean id="configCatalogCache" class="thredds.server.catalog.ConfigCatalogCache" / -->

    <bean id="fcTriggerEventBus" class="com.google.common.eventbus.AsyncEventBus">
        <constructor-arg value="fcTriggerEventBus"/>
        <constructor-arg ref="fcTriggerExecutor"/>
    </bean>
    <bean id="fcTriggerExecutor" class="java.util.concurrent.Executors" factory-method="newFixedThreadPool">
        <constructor-arg type="int" value="1"/>
    </bean>

    <!-- Restricted Access (using container managed security, eg Tomcat, or CAMS) -->
    <bean id="restrictedDatasetAuthorizer" class="thredds.servlet.restrict.TomcatAuthorizer">
        <property name="useSSL" value="false"/>
        <property name="sslPort" value="8443"/>
    </bean>

    <!-- ESGF
    <bean id="restrictedDatasetAuthorizer" class="esg.orp.app.tds.TDSAuthorizer"/ -->

    <!-- JMX -->
    <bean id="openRAFMonitor" class="thredds.monitor.OpenRAFMonitorImpl"/>
    <bean id="netcdfFileCacheMonitor" class="thredds.monitor.NetcdfFileCacheMonitorImpl"/>
    <bean id="fmrcCacheMonitor" class="thredds.monitor.FmrcCacheMonitorImpl"/>

    <!-- Configuration for JMX exposure in the application
    <bean id="mbeanExporter" class="org.springframework.jmx.export.MBeanExporter" lazy-init="false">
        <property name="beans">
            <util:map>
                <entry key="thredds:name=OpenRAF" value-ref="openRAFMonitor"/>
                <entry key="thredds:name=netcdfFileCache" value-ref="netcdfFileCacheMonitor"/>
            </util:map>
        </property>
    </bean> -->

</beans>
