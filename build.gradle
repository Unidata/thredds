allprojects {
    // Matches Maven's "project.groupId". Used in MANIFEST.MF for "Implementation-Vendor-Id".
    group = "edu.ucar"
    // Matches Maven's "project.version". Used in MANIFEST.MF for "Implementation-Version".
    version = '4.6.12-SNAPSHOT'
    // Eventually, we'll stop appending "SNAPSHOT" to our versions and just use this.
    status = 'development'
}

// Matches Maven's "project.description".
description = "The Unidata THREDDS project includes the netCDF-Java library (aka CDM) " +
        "and the THREDDS Data Server (TDS)."

import java.text.SimpleDateFormat

// These will be inherited by subprojects: http://goo.gl/5mvqf7
// After declaration, they should NOT be referred to using the "ext" namespace, instead preferring e.g.
// "project.title" or simply "title": http://stackoverflow.com/questions/14530901
// That way, the property will be robustly resolved, as described here: http://goo.gl/UBq0en
// Otherwise, only the one specific ExtraPropertiesExtension will be searched.
ext {
    // Matches Maven's "project.name". Used in MANIFEST.MF for "Implementation-Title".
    title = "Parent THREDDS and CDM modules"

    // Matches Maven's "project.organization.name". Used in MANIFEST.MF for "Implementation-Vendor".
    vendor = "UCAR/Unidata"

    // Matches Maven's "project.url". Used in MANIFEST.MF for "Implementation-URL".
    url = "https://www.unidata.ucar.edu/software/thredds/current/netcdf-java/documentation.htm"

    SimpleDateFormat iso_8601_format = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ")
    buildTimestamp = iso_8601_format.format(new Date())

    // Project groups:
    nonJavaProjects = allprojects.findAll { it.path in [ ':', ':dap4', ':ncIdv' ] }
    javaProjects = allprojects - nonJavaProjects

    internalProjects = allprojects.findAll { it.path in [
            ':dap4', ':dap4:d4tests', ':dap4:d4ts', ':dap4:d4tswar', ':opendap:dtswar',
            ':ncIdv', ':it', ':cdm-test', ':testUtil'
    ] }
    publishedProjects = allprojects - internalProjects      // Includes root project.
}

// Due to a Gradle limitation, we cannot externalize this buildscript block into a script plugin. However, we can
// exploit the fact that dependencies specified in a parent's buildscript block are visible to all children.
// Thus, as long as we declare all plugins here, no child needs its own buildscript block. See http://goo.gl/2y3KhZ.
buildscript {
    apply from: "$rootDir/gradle/dependencies.gradle"
    
    repositories {
        jcenter()
        maven {
            url "https://plugins.gradle.org/m2/"  // For Gradle plugins.
        }
        maven {
            url "https://dl.bintray.com/cwardgar/maven/"  // For 'com.cwardgar.gretty-fork:gretty'.
        }
    }
    dependencies {
        classpath libraries["gretty"]
        classpath libraries["shadow"]
        classpath libraries["coveralls-gradle-plugin"]
    
        classpath libraries["guava"]  // For various utility methods used in the build scripts.
    }
}

apply from: "$rootDir/gradle/dependencies.gradle"

apply from: "$rootDir/gradle/testing.gradle"
apply from: "$rootDir/gradle/java.gradle"
apply from: "$rootDir/gradle/coverage.gradle"
apply from: "$rootDir/gradle/archiving.gradle"

// Order dependency: publishing.gradle creates publications for artifacts created in fatJars.gradle.
apply from: "$rootDir/gradle/fatJars.gradle"
apply from: "$rootDir/gradle/publishing.gradle"
