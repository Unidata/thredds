<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
    "http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
  <title>CoordinateSystemsNeed</title>
  <link rel="stylesheet" href="../cdm.css" type="text/css"/>
</head>

<body>
<H2>We need Coordinate Systems</H2>

<P>I think that the next really important feature of Scientific Data Format/Model design is addding good API support for georeferencing coordinate systems.
  Arguably, HDF, netCDF, and <SPAN style="BACKGROUND: #ffffce">OpenDAP</SPAN> are the best/widely used general purpose scientific data format/access protocols.
  All have made some steps towards specifying coordinate systems (netCDF coordinate variables, HDF dimension scales, <SPAN
      style="BACKGROUND: #ffffce">OpenDAP</SPAN> Grid map variables) but I think none have done a complete job.

<P>Most well-written datasets specify the coordinate systems in the dataset, but without explicit library support, they do so in different ways, often
  documented by a <A
      href="https://www.unidata.ucar.edu/packages/netcdf/conventions.html">Convention</A>. We are working closely with the HDF5 developers, who are interested in
  extending dimensions scales, and we are considering extensions of the netCDF model to comprise netCDF-4. With <SPAN style="BACKGROUND: #ffffce">OpenDAP</SPAN>
  4.0 under consideration, it seems like a unique and fortuitous time for all 3 data models to consider new features in ways that are compatible with each
  other.

<P>I have done some prototyping of the functionality I think we need for coordinate systems in the netcdf-Java library, see the user manual, chapter <A
    href="https://www.unidata.ucar.edu/packages/netcdf-java/v2.1/NetcdfJavaUserManual.htm#_Toc42914935">3.2</A> for some of the details, and implemented the
  prototype in the <SPAN
      style="BACKGROUND: #ffffce"><FONT color=#0000ff>CoordinateSystem</FONT></SPAN>, <SPAN style="BACKGROUND: #ffffce"><FONT
      color=#0000ff>CoordinateAxis</FONT></SPAN>, and <SPAN style="BACKGROUND: #ffffce"><FONT
      color=#0000ff>CoordinateTransform</FONT></SPAN> classes of the ucar.nc2.dataset package (see the <A
      href="https://www.unidata.ucar.edu/packages/netcdf-java/v2.1/javadoc/index.html">javadoc</A>).

<P>To summarize some definitions:
<OL>
  <LI>A <B>general coordinate system</B> assigns to each value in a data field a list of coordinate values.
  <LI>A <B>georeferencing coordinate system</B> assigns space and time coordinates.
  <LI>A <B>coordinate transform</B> is a function from one coordinate system to another.</LI>
</OL>
<P>Some of the things we may need that are not currenly expressible by the OPeNDAP Grid datatype:
<OL>
  <LI>Multidimensional coordinate axes are needed, eg to assign lat/lon coordinates to model output on a projection.
  <LI>There can be multiple coordinate systems for a single variable, eg specify both lat/lon and x,y coordinates on the projection plane.
  <LI>"Station Data" is a collection of point data that you may want to georeference, that are not in a Grid.
  <LI>Expressing coordinate transformation can be done with attribute conventions, but can get complicated.
  <LI>As coordinate systems and transforms get more complicated, its compelling to factor them out into their own structure, since typicaly they are used by
    many or most of the fields in a dataset.
  </LI>
</OL>
<P>There is a good argument whether HDF/netCDF/OpenDAP should remain concerned only with the syntax of datasets, and build layers on top to handle the
  semantics. I think the layered approach is correct, but I think each of those libraries should ship with a standard API for handling semantics. This will then
  encourage dataset providers and server writers to write the datasets in ways that get correctly interpreted by the semantic handler(s). Further, to make
  dataset entries in DL/GCMD-type search facilities useful, we need at least spatial and temporal bounding boxes, and viewers need full coordinate systems to
  correctly visualize the data. This is why I think a standard way of specifying georeferencing coordinates systems is <B>the</B> most importand thing we could
  add to our Data Models and APIs.
</body>
</html>
