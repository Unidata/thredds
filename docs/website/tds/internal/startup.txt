TDS startup

0. tomcat loads thredds.war with /WEB-INF/web.xml

this part sets up a spring listener that gets the contextConfigLocation from the web.xml:

  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>/WEB-INF/applicationContext.xml</param-value>
  </context-param>

  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
    
  then theres this for the "root servlet, which is spring:
  
    <!-- root servlet -->
  <servlet>
    <servlet-name>root</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>/WEB-INF/spring-servlet.xml</param-value>
    </init-param>
    <load-on-startup>1</load-on-startup>
  </servlet>

also see

http://stackoverflow.com/questions/3652090/difference-between-applicationcontext-xml-and-spring-servlet-xml-in-spring


1. Log4j2 manages to get itself called first. All loggers in config get created. Apparently this "load first" was not happening
in Log4j1. Need to tell it where the log files go.

2013-09-02 16:53:36,057 DEBUG Calling createProperty on class org.apache.logging.log4j.core.config.Property for element property with params(name="tds.content.root.path", value="../../content")


WEB-INF/classes/log4j2.xml

  <properties>
    <property name="tds.content.root.path">../content</property>
    <property name="tds.log.dir">${sys:tds.content.root.path}/thredds/logs</property>
  </properties>

this has default, plus override from command line.


2. Spring is then called

2013-09-02 16:59:45,288 DEBUG Calling createProperty on class org.apache.logging.log4j.core.config.Property for element property with params(name="tds.content.root.path", value="../../content")

mappings are done, eg:

2013-09-02T16:59:45.709-0600 [     14609][        ] INFO  org.springframework.web.context.ContextLoader: Root WebApplicationContext: initialization started

not clear if classses are loaded here


3. applicationContext is processed, and TdsContext bean is made:

2013-09-02T16:59:49.530-0600 [     18430][        ] INFO  serverStartup: TdsContext version= 4.3.20120406.1714 - 20120406.1714


  <!-- tell spring that tds.properties gets read in first and overrides anything else -->
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="systemPropertiesModeName" value="SYSTEM_PROPERTIES_MODE_OVERRIDE"/>
    <property name="locations">
      <list>
        <value>classpath:thredds/server/tds.properties</value>
      </list>
    </property>
  </bean>

  C:\dev\github\thredds\tds\src\main\webapp\WEB-INF\classes\thredds\server\tds.properties
  -------------------
  # DO NOT EDIT THIS FILE: It is automatically generated from /tds/src/main/template/thredds/server/tds.properties
  tds.version=4.3.20120406.1714
  tds.version.brief=4.3
  tds.version.builddate=20120406.1714

  tds.url=https://www.unidata.ucar.edu/projects/THREDDS/tech/TDS.html
  tds.documentation.url=https://www.unidata.ucar.edu/projects/THREDDS/tech/TDS.html
  tds.logo.url=threddsIcon.gif
  tds.logo.alt=TDS

  tds.content.root.path=../../content
  tds.content.path=thredds
  tds.content.startup.path=WEB-INF/altContent/startup
  tds.content.idd.path=WEB-INF/altContent/idd/thredds
  tds.content.motherlode.path=WEB-INF/altContent/motherlode/thredds

  tds.config.file=threddsConfig.xml

  tds.install.url=catalog.html

  tds.dir.share=/share
  tds.dir.cdmUnitTest=/share/testdata/cdmUnitTest

  generated with subst: by maven from:

           <webResources>
             <resource>
               <targetPath>WEB-INF/classes</targetPath>
               <filtering>true</filtering>
               <directory>${basedir}/src/main/template</directory>
               <includes>
                 <include>**/tds.properties</include>
               </includes>
             </resource>
             <resource>
               <targetPath>docs</targetPath>
               <filtering>true</filtering>
               <directory>${basedir}</directory>
               <includes>
                 <include>README.txt</include>
                 <include>CHANGES.txt</include>
               </includes>
             </resource>
           </webResources>


--- using /src/main/template/thredds/server/tds.properties

tds.version=${project.version}
tds.version.builddate=${build.timestamp}

tds.url=https://www.unidata.ucar.edu/projects/THREDDS/tech/TDS.html
tds.documentation.url=https://www.unidata.ucar.edu/projects/THREDDS/tech/TDS.html
tds.logo.url=threddsIcon.gif
tds.logo.alt=TDS

tds.content.root.path=../../content
tds.content.path=thredds
tds.content.startup.path=WEB-INF/altContent/startup
tds.content.idd.path=WEB-INF/altContent/idd/thredds
tds.content.motherlode.path=WEB-INF/altContent/motherlode/thredds

tds.config.file=threddsConfig.xml

tds.install.url=catalog.html

tds.dir.share=/share
tds.dir.cdmUnitTest=/share/testdata/cdmUnitTest

** problem is that tds.content.root.path is specified in 2 places.

4. TdsContext.afterPropertiesSet

    ServletUtil.setContextPath(contextPath);
	ServletUtil.setRootPath(this.rootDirSource.getRootDirectoryPath());
    ServletUtil.setContentPath(this.contentDirSource.getRootDirectoryPath());
    ThreddsConfig.init(tdsConfigFile.getPath());
    InvDatasetFeatureCollection.setContext(contextPath);
    TdsConfigMapper tdsConfigMapper = new TdsConfigMapper();  // not sure if this is used ? perhaps intended as replaccement for CdmInit?
	
	
5. CmInit.afterPropertiesSet



