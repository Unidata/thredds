<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"
"http://www.w3.org/TR/html4/loose.dtd">
<html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1">
<title>TDS Caching</title>
  <link rel='stylesheet' href='../../../../archive/src/docs/web/thredds/tech/tds.css' type='text/css' />
</head>

<body>
  <h1>TDS Caching</h1>
  <address>
  May, 2011
  </address>

  <h2>Catalog caching test</h2>
  <p>mlode:8081, standard catalogs</p>
  <h3>1. turn off catalog caching.</h3>
  <p>TdsMonitor: catalog service 18974 requests, 176 msecs/req, 794 Mbytes total</p>
  <p>294.8 Mbyte heap</p>
  <p>Heap use:</p>
  <ol>
    <li>FileCache: 68 Mbytes, 208 files
      <ol>
        <li>NetcdfDatasets : between 7.8M and 200K (Grib) </li>
      </ol>
    </li>
    <li>Jsp : 16 M</li>
    <li>DataRootHandler / PathMatcher: 16 M
      <ol>
        <li>159 entries, InvDatsetScan (20K each), InvDatsetImpl (1.4M !) but most may be a shared InvCatalogFactory. But why do we have these? Are they really FMRC ?</li>
        <li><em><strong>remove InvCatalogFactory reference from InvCatalog - done for TDS 4.2.8</strong></em></li>
        <li>InvDatasestScan is retaining link to its parents</li>
      </ol>
    </li>
    <li>ehcache: 12 M</li>
    <li>fmrcDatasets : 6 M each. most in FmrcInvLite, 46M total</li>
    <li>quartz : 5 M</li>
    <li>bdb : 80 M 
      <ol>
        <li>bdb stores n 10M files, n us around 9 or 10. so we dont need 80 M cache (!) at least right now</li>
        <li>bdb uses percent * JXV max bytes, default appears to be 2 % = 80 Mb. </li>
        <li><strong>Allow cache size to be set by user</strong></li>
        <li>Set to maxSize = 20 Mb for motherload (?)</li>
        <li>nCacheMiss=17,403</li>
      </ol>
    </li>
    <li>org.geotoolkit 7M</li>
  </ol>
  <h3>2. turn on catalog caching.</h3>
  <p>TdsMonitor: catalog service 10134 requests, 114 msecs/req 359 Mbytes</p>
  <p>&nbsp;</p>
  <hr>
  <em>below this line: update: Aug 10, 2006 </em>
  <h2>Disk Caching</h2>
<p>Settings on motherlode 3.12: </p>
  <table width="890" border="1">
    <tr>
      <td width="255"><p><strong>NetcdfFile, Nexrad2</strong> (compress) </p>
      <p><strong>GribIOSP, BufrIOSP</strong> (index) </p>
      <p><strong>WCS </strong>(temp file) </p></td>
      <td width="152">CachePath</td>
      <td width="201">/data/tmp/thredds/cache/</td>
      <td width="96"><strong>DiskCache</strong></td>
      <td width="152"><p>scour hourly</p>
        <p>allow 1 Gbyte </p></td>
    </tr>
    <tr>
      <td><strong>Aggregation </strong>(joinExisting)</td>
      <td>CacheAged</td>
      <td>/data/tmp/thredds/cacheAged/</td>
      <td><strong>DiskCache2</strong></td>
      <td><p>scour 12 hours</p>
      <p>over 10 days old </p></td>
    </tr>
    <tr>
      <td><strong>NetcdfServlet </strong>(temp file) </td>
      <td>NetcdfServletCachePath</td>
      <td>/data/tmp/thredds/ncCache/</td>
      <td><strong>DiskCache2</strong></td>
      <td><p>scour daily </p>
      <p>over 1 day old</p></td>
    </tr>
    <tr>
      <td><strong>CoordSysValidatorServlet </strong>(upload file)</td>
      <td>CdmValidatorCachePath</td>
      <td>/data/tmp/thredds/cdmCache/</td>
      <td><strong>DiskCache2</strong></td>
      <td><p>scour daily </p>
      <p>over  30 days</p></td>
    </tr>
  </table>
  <p>&nbsp;</p>
  <h3>DiskCache</h3>
  <p>This disk-based cache is used when you need to write into a directory, but you dont have write permission, for example: </p>
  <ol>
    <li>writing grib index files</li>
    <li>uncompressing radar level 2 files </li>
  </ol>
  <p>The following directory is used for caching: <strong>${tomcat_home}/content/thredds/cache/, </strong>unless overridden in     <em><strong>contentPath+&quot;/params.xml&quot;</strong></em>:</p>
  <pre>    String cache = ServletParams.getInitParameter(&quot;CachePath&quot;, contentPath + &quot;cache/&quot;);<br>    DiskCache.setRootDirectory(cache);<br>    DiskCache.setCachePolicy(false); // allow to write into data directory if possible

   // each hour, starting in 30 minutes
   timer.scheduleAtFixedRate( new CacheScourTask(), c.getTime(), (long) 1000 * 60 * 60 );</pre>
  <p>The files are written in the data directory if possible, so that they have the same lifetime as the data file. When that is not possible, the files are written to <strong>/content/thredds/cache</strong>. This directory is scoured (by a Timer in ThreddsDefault) every hour, to remove oldest files when disk capacity is exceeded. </p>
  <h3>DiskCache2</h3>
  <p>This disk-based cache  is used by  <strong>ucar.nc2.ncml.Aggregation</strong>, to persist NcML files, to make aggregation as efficient as possible. </p>
  <p>The following directory is used for caching: <strong>${tomcat_home}/content/thredds/cachePersist/</strong></p>
  <p>The following controls are set in ThreddsDefault.java. These need to be externalized:</p>
  <pre>    // for efficiency, persist aggregations. every 12 hours, delete stuff older than 10 days<br>    String cache2 = ServletParams.getInitParameter(&quot;CacheAged&quot;, contentPath + &quot;cacheAged/&quot;);</pre>
  <p>    The directory is scoured (by a Timer in DiskCache2) removing files that are older than a certain date. </p>
  <hr>
  <h2>Object Caching </h2>
  <h3>NetcdfFileCache</h3>
  <p>NetcdfFile objects are cached in memory for performance. When acquired, the object is locked so another thread cannot use. When closed, the lock is removed. When the cache is full, older objects are removed from the cache, and all resources released. </p>
  <p>The raf object is left open while its in the cache. This  creates a read lock which may prevent the file from being opened in write mode. However. multiple readers can access.???</p>
  <p> The following controls are set in ThreddsDefault.java. These need to be externalized:</p>
  <pre>    // allow 100 - 200 open files, cleanup every 2 minutes<br>    NetcdfFileCache.init(100, 200, 2 * 60, 2 * 60);
</pre>
  <h3>NetcdfDatasetCache</h3>
  <p>NetcdfDataset objects are cached in memory for performance. This is used by WCS server. The following controls are set in ThreddsDefault.java. These need to be externalized:</p>
  <pre>    // allow 100 - 200 open files, cleanup every 2 minutes<br>    NetcdfDataset.init(100, 200, 2 * 60, 2 * 60);</pre>
  <h3>FileCache</h3>
  <p>RandomAccessFile objects are cached in memory  for performance. This is used by the HTTP file server, in particular to support byte range requests. The following controls are set in ThreddsDefault.java. These need to be externalized:</p>
  <pre>    // allow 100 - 200 open files, cleanup every 2 minutes<br>    FileCache.init(100, 200, 2 * 60, 2 * 60);</pre>
</div>
<hr width="100%">
<h2 align="left">Catalog Caching</h2>
<p align="left">On startup, TDS reads in all static catalogs (which can be thought of as configuration files) and caches them. If the catalog has an &quot;expires&quot; attribute, it will reread them upon expiration. You can force re-reading by putting an old expires date on them. You can also force rereading the catalogs through a &quot;reinit&quot; command, if you have https enabled and are authorized.</p>
<p>Dynamic catalogs are generated dynamically. We are considering caching them for some amount of time, but i dont think we've implemented yet.<br>
</p>
<hr>
<h2>File System Caching</h2>
<p>May 2012</p>
<ul>
  <li>Uses ehcache object caching</li>
  <li>Granularity is a directory</li>
  <li>Check lastModified date, if changed then make OS request for list of directories</li>
  <li>Divide into daily (EG) subdirectories, so never have to scan older ones.</li>
</ul>
<h3>motherlode memory use</h3>
<ul>
  <li>44 CacheDirectory (avg 800 files/dir)</li>
  <li>34,651 CacheFile (6.6M) (avg 190 bytes/file)</li>
  <li>11,550 MFileCached (.xml and .gbx8 get filtered out) (462K) (avg 40 bytes/file, wraps the CacheFile)</li>
</ul>
<p>currently have 1000 ehcache entity, clearly too large.</p>
<p>make each CacheDirectory seperate ehcache entity ??</p>
<p>possible turn off ehcache as default, not yet sure of benefits. possibly not needed for just fmrc. most useful for datasetScan?</p>
<p>CDM default is dont use, must turn on by calling DatasetCollectionManager.setController()</p>
<p>&nbsp;</p>
<h2>FMRC Caching</h2>
<ul>
  <li>uses Berkeley DB</li>
  <li> default root dir is ${user.home}/.unidata/bdb</li>
  <li>MetadataManager.setCacheDirectory();<br />
  </li>
</ul>
<h3>motherlode memory use</h3>
<ul>
  <li>44 FMRC (45M)</li>
  <li>44 FmrcInvLite (33M)</li>
  <li>469 FmrcInvLite.GridInventory (21M)</li>
  <li>106 FmrcInvLite.GridSet (10M)</li>
  <li>98K FmrcInvLite.TimeInv (4M)</li>
  <li>44 NetcdfDataset (7M)</li>
  <li>3K VariableDS (7M)</li>
  <li>32K Attributes (4M)</li>
</ul>
<p align="left">&nbsp;</p>
</body>
</html>
