import com.google.common.collect.Iterables
import edu.ucar.build.ui.ToolsUiJnlpBaseTask
import edu.ucar.build.ui.ToolsUiJnlpExtensionTask
import org.codehaus.groovy.runtime.NioGroovyMethods

import java.util.jar.JarEntry
import java.util.jar.JarFile
import java.util.jar.JarOutputStream

description = "Provides a graphical interface to much of the functionality in the CDM library."
ext.title = "ToolsUI"

apply from: "$rootDir/gradle/any/dependencies.gradle"
apply from: "$rootDir/gradle/any/java.gradle"
apply from: "$rootDir/gradle/any/testing.gradle"
apply from: "$rootDir/gradle/any/coverage.gradle"
apply from: "$rootDir/gradle/any/archiving.gradle"
apply from: "$rootDir/gradle/any/publishing.gradle"

dependencies {
    compile project(":cdm")
    compile project(":clcommon")
    compile project(":bufr")
    compile project(":grib")
    compile project(":netcdf4")
    compile project(":opendap")
    compile project(":visadCdm")
    compile project(":waterml")
    compile project(":httpservices")

    runtime project(":visadCdm")  // For Gempak IOSPs.

    // compile libraries["ehcache-core"]  // used in TdsMonitor to cache IP lookups
    compile libraries["jdom2"]
    compile libraries["spring-context"]
    compile libraries["jcommon"]
    compile libraries["jfreechart"]
    compile libraries["jgoodies-forms"]
    compile libraries["httpclient"]
    compile libraries["httpcore"]
    compile libraries["bounce"]
    compile libraries["imgscalr-lib"]
    compile libraries["commons-lang3"]
    compile libraries["guava"]

    compile libraries["slf4j-api"]
    runtime libraries["slf4j-jdk14"]
}

//////////////////////////////////////////////////////////

ext {
    // See http://docs.oracle.com/javase/8/docs/technotes/guides/deploy/manifest.html#CIHJIIHD
    // See http://docs.oracle.com/javase/8/docs/technotes/guides/javaws/developersguide/syntax.html#jnlp_elements
    // The Codebase attributes in the JAR manifest and JNLP must match, or else javaws fails to start with the error:
    // "Application Blocked by Java Security".
    webstartCodebase = "https://www.unidata.ucar.edu/software/thredds/current/netcdf-java/webstart/"

    // Webstart can also work if both Codebase attributes are unspecified.
    // Setting this property to null will produce a manifest and JNLP files with no Codebase attributes.
    // LOOK: Use this for local Webstart testing; use the other for deployment to production.
//     webstartCodebase = null

    webstartWorkingDir = "build/signed"
    if (project.hasProperty("webdir")) {
        webstartDir = new File(webdir, "webstart")
    }

    depsToRejar = ['xmlbeans-2.6.0.jar', 'Saxon-HE-9.4.0.6.jar']
}

jar {
    manifest {
        Map<String,?> attribs = [:]
        attribs['Main-Class'] = 'ucar.nc2.ui.ToolsUI'

        // MANIFEST.MF is an @Input to the Jar task, so when it changes, Jar will be considered out-of-date.
        // Here, we're writing an attribute to MANIFEST.MF. When its value changes, MANIFEST.MF will change,
        // and Jar will be considered out-of-date.
        // So, indirectly, we've made the "runtime" configuration an @Input to the Jar task.
        attribs['Class-Path'] = configurations.runtime.collect { it.name }.join(' ')

        // The attributes below are necessary for Web Start; see http://goo.gl/Ob6Wid.
        // ui-<version>.jar is the main jar in the ToolsUI extension JNLP file, so only its manifest needs these.
        attribs['Application-Name'] = project.title
        attribs['Permissions'] = 'all-permissions'
        attribs['Trusted-Only'] = 'true'
        if (webstartCodebase) {
            attribs['Codebase'] = webstartCodebase
        }

        attributes attribs
    }

    // I used to create META-INF/INDEX.LIST here to speedup Web Start loading, but it turns out that Spring and
    // INDEX.LIST don't get along: https://jira.spring.io/browse/SPR-5705
    // As a result, I don't think that Web Start is loading jars lazily as I intended.
    // LOOK: Does that make the 'Class-Path' manifest attribute and 'download="lazy"' JNLP attributes pointless?
}

task toolsUiJnlpExtension(type: ToolsUiJnlpExtensionTask) {
    codebase = webstartCodebase
    outputFile = file("$buildDir/webstart/netCDFtoolsExtraJars.jnlp")
}

task toolsUiJnlpBase(type: ToolsUiJnlpBaseTask, dependsOn: toolsUiJnlpExtension) {
    File toolsUiJnlpExtensionFile = Iterables.getOnlyElement(tasks.toolsUiJnlpExtension.outputs.files.files)

    codebase = webstartCodebase
    extensionJnlpFileName = toolsUiJnlpExtensionFile.name
    outputFile = file("$buildDir/webstart/netCDFtools.jnlp")
}

/*
 * It's possible to test web start files locally before deploying them.
 * 1. Open your gradle.properties file (~/.gradle/gradle.properties) and change "webdir" to a local directory,
 *    such as '/Users/cwardgar/Desktop'
 * 2. Uncomment the 'webstartCodebase = null' line in the ext{} block above.
 * 3. Run this task: ./gradlew :ui:clean :ui:releaseWebstart
 * 4. You may need to white-list web starts from the local file system. Go to Java Control Panel->Security->
 *    Edit Site List... and add the entry "file:/".
 * 5. cd to "webdir" and execute "javaws netCDFtools.jnlp". You may also be able to simply double-click that file,
 *    but I couldn't get that working (and there was no error feedback).
 */
/*
 * The following properties should be in gradle.properties:
 * keystore=name of keystore file
 * keystoreAlias=idv
 * keystorePassword=password of keystore file
 * webdir:parent of conan content directory
 */
// TODO: Use the Sync task for this.
task releaseWebstart(group: 'Release', dependsOn: ['jar', 'toolsUiJnlpExtension', 'toolsUiJnlpBase'])  {
    doLast {
        if (project.hasProperty("webdir") && project.hasProperty("keystore")
                && project.hasProperty("keystoreAlias") && project.hasProperty("keystorePassword")) {
            ant.delete(dir: webstartWorkingDir)
            ant.mkdir(dir: webstartWorkingDir)

            copy {
                println "copyJnlp"
                from Iterables.getOnlyElement(tasks.toolsUiJnlpExtension.outputs.files.files)
                from Iterables.getOnlyElement(tasks.toolsUiJnlpBase.outputs.files.files)
                from rootProject.file('docs/website/netcdf-java/nc.gif')
                // Referenced in the ToolsUI base JNLP file.
                into webstartWorkingDir
            }

            println "signjar:"
            println "\twebdir = $webdir"
            println "\tkeystore = $keystore"
            println "\tkeystoreAlias = $keystoreAlias"
            println "\tkeystorePassword = $keystorePassword"

            ant.signjar(jar: tasks.jar.archivePath, destDir: webstartWorkingDir, alias: keystoreAlias,
                    keystore: keystore, storepass: keystorePassword, preservelastmodified: true, verbose: false)

            for (file in configurations.runtime.resolve()) {
                if (depsToRejar.contains(file.name)) {
                    println "$file contains duplicate entries or old signature files. Rejarring."

                    File rejarredFile = new File(temporaryDir, file.name)
                    rejar file, rejarredFile
                    file = rejarredFile
                }

                println "Signing $file"
                ant.signjar(jar: file, destDir: webstartWorkingDir, alias: keystoreAlias,
                        keystore: keystore, storepass: keystorePassword, preservelastmodified: true, verbose: false)
            }

            ant.delete(dir: webstartDir)
            ant.mkdir(dir: webstartDir)

            copy {
                println "copy2web"
                from(webstartWorkingDir)
                into webstartDir
            }
        } else {
            println "Several properties (\"webdir\", \"keystore\", \"keystoreAlias\", \"keystorePassword\" )\n"
            +"must be defined to run \"releaseWebstart\" task."
        }
    }

}

///////////////////////////////////////////////////////

javadoc {
    title = 'All javadoc for netcdf-java version ' + version
    source = fileTree(dir: '../bufr/src/main/java', include: '**/*.java')
    source = source.plus(fileTree(dir: '../cdm/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../clcommon/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../grib/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../httpservices/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../netcdf4/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../opendap/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../udunits/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../ui/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../visad/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../waterml/src/main/java', include: '**/*.java'))

    source = source.plus(fileTree(dir: '../dap4/d4core/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../dap4/d4lib/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../dap4/d4cdm/src/main/java', include: '**/*.java'))
}

task releaseDocs(dependsOn: javadoc, group: 'Release') {
    doLast {
        if (project.hasProperty("webdir")) {
            String releaseDir = new File(webdir, "javadocAll").absolutePath

            ant.delete(dir: releaseDir)
            ant.mkdir(dir: releaseDir)

            copy {
                println "copyDocs to " + releaseDir
                from("build/docs/javadoc")
                into releaseDir
            }
        } else {
            println "Property \"webdir\" must be defined to run \"releaseDocs\" task."
        }
    }
}

///////////////////////////////////////////////////////

/**
 * Creates a new JAR file at {@code destJarFile} containing the contents of {@code origJarFile}. Any duplicate
 * entries in {@code origJarFile} will be excluded from {@code destJarFile}. Also, any old signature files
 * (i.e. META-INF/*.DSA, META-INF/*.SF, META-INF/*.RSA) will be excluded.
 *
 * @param origJarFile the original JAR file.
 * @param destJarFile the destination JAR file.
 */
def rejar(File origJarFile, File destJarFile) {
    JarFile origJar = new JarFile(origJarFile);

    NioGroovyMethods.withCloseable(origJar) {
        JarOutputStream jarOutStream = new JarOutputStream(
                new BufferedOutputStream(new FileOutputStream(destJarFile)))

        NioGroovyMethods.withCloseable(jarOutStream) {
            java.util.regex.Pattern signatureFilePattern = ~/META-INF\/.+\.(DSA|SF|RSA)/
            Set<String> entriesWritten = new HashSet<>();

            for (JarEntry origJarEntry : origJar.entries()) {
                if (origJarEntry.name =~ signatureFilePattern) {
                    logger.debug "Excluding signature file: $origJarEntry.name"
                } else if (!entriesWritten.add(origJarEntry.getName())) {
                    logger.debug "Skipping duplicate entry: $origJarEntry.name"
                } else {
                    writeEntry origJar, origJarEntry, jarOutStream
                }
            }
        }
    }
}

def writeEntry(JarFile jar, JarEntry jarEntry, JarOutputStream jarOutStream) {
    try {
        jarOutStream.putNextEntry(jarEntry);
        InputStream jarEntryInputStream = jar.getInputStream(jarEntry)

        NioGroovyMethods.withCloseable(jarEntryInputStream) {
            byte[] buffer = new byte[8192];
            int bytesRead;

            while ((bytesRead = jarEntryInputStream.read(buffer)) != -1) {
                jarOutStream.write(buffer, 0, bytesRead)
            }
        }
    } finally {
        jarOutStream.closeEntry();
    }
}
