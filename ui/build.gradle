apply plugin: 'shadow'
import org.gradle.api.plugins.shadow.transformers.AppendingTransformer

sourceSets {
    main {
        java {
            srcDir 'src/java'
            exclude 'thredds/ui/catalog/search/**'   // eliminate lucene
       }
   }
}

dependencies {
  compile project(':cdm')
  compile project(':clcommon')
  compile project(':bufr')
  compile project(':grib')
  compile project(':netcdf4')
  compile (project(':opendap'))  { // eliminate servlet
      transitive = false
    }
  compile (project(':visad')) {   // eliminate original visad.jar
    transitive = false
  }
  compile ('com.jgoodies:forms:1.0.7')
  compile (group: 'org.jfree', name: 'jfreechart', version: jfreechartVersion) {
    exclude group: 'com.lowagie'
  }
  compile ('org.bounce:bounce:0.14')
  compile ('org.imgscalr:imgscalr-lib:4.2')
  compile ('org.itadaki:bzip2:0.9.1')
  compile ('net.sf.ehcache:ehcache:1.6.2')

  compile (group: 'org.springframework', name: 'spring-core', version:springVersion) {
    transitive = false  // commons-logging
  }
  compile group: 'org.springframework', name: 'spring-context', version:springVersion

  testCompile project(':cdm').sourceSets.test.output
  runtime group: 'org.slf4j', name: 'slf4j-jdk14', version: slf4jVersion
}

jar {
  manifest {
    attributes 'Implementation-Title': 'toolsUI'
  }
}

//////////////////////////////////////////////////////////

ext {
  toolsUIjar = 'toolsUI-'+version+'.jar'
  webstartWorkingDir = "build/signed"
  webstartDir = webdir + "webstart"
}

shadow {
  outputFile = file("${destinationDir }/${toolsUIjar}")
  stats = true

  exclude 'AUTHORS'    // crap from other packages
  exclude 'DATE'
  exclude 'LICENCE'
  exclude 'LICENSE'
  exclude 'NOTICE'
  exclude '*.txt'
  exclude '*.xml'
  exclude 'META-INF/DEPENDENCIES'
  exclude 'META-INF/LICENSE'
  exclude 'META-INF/NOTICE'
  exclude 'META-INF/*.DSA'
  exclude 'META-INF/*.RSA'
  exclude 'META-INF/*.txt'
  exclude 'META-INF/*.xml'

  artifactSet {
      exclude 'commons-logging:commons-logging:*'
  }

  jar {
    manifest {
      attributes 'Main-Class': 'ucar.nc2.ui.ToolsUI'
    }
  }

  transformer(AppendingTransformer) {
      resource = 'META-INF/spring.handlers'
   }
   transformer(AppendingTransformer) {
      resource = 'META-INF/spring.schemas'
   }
}

task releaseWebstart << {
  ant.delete(dir: webstartWorkingDir)
  ant.mkdir(dir: webstartWorkingDir)

  copy {
    println "copyJnlp"
    from 'netCDFtools.jnlp'
    from 'netCDFtoolsExtraJars.jnlp'
    into webstartWorkingDir
  }

  println "signjar"
  ant.signjar(jar: "build/libs/ui-" + version + ".jar", signedjar: webstartWorkingDir + "/netcdfUI.jar",
          alias: keystoreAlias, keystore: keystore, storepass: keystorePassword,
          preservelastmodified: "true")
  for (file in configurations.runtime.resolve()) {
    println " " + file
    ant.signjar(destDir: webstartWorkingDir, jar: file, alias: keystoreAlias, keystore: keystore, storepass: keystorePassword,
            preservelastmodified: "true")
  }

  copy {
    println "copy2web"
    from(webstartWorkingDir)
    rename { String fileName ->
      pos = fileName.lastIndexOf('-');
      fileName2 = (pos >= 0) ? fileName.substring(0, pos) + ".jar" : fileName
      println " " + fileName + " -> " + fileName2
      fileName2
    }
    into webstartDir
  }
}

/* following properties should be in gradle.properties:
   keystore=name of keystore file
   keystoreAlias=idv
   keystorePassword=password of keystore file
   webdir:parent of conan content directory
   ftpdir:ftp directory
 */
task releaseCdm(dependsOn: ['shadow', 'releaseWebstart']) << {
  println "copy " + toolsUIjar + " to " + ftpdir
  copy { // does not give error message
    from 'build/libs/' + toolsUIjar
    into ftpdir
  }
}

///////////////////////////////////////////////////////

javadoc {
  title = 'All javadoc for netcdf-java version ' + version
  source = fileTree(dir: '../bufr/src/main/java', include: '**/*.java')
  source = source.plus(fileTree(dir: '../cdm/src/main/java', include: '**/*.java'))
  source = source.plus(fileTree(dir: '../clcommon/src/main/java', include: '**/*.java'))
  source = source.plus(fileTree(dir: '../grib/src/main/java', include: '**/*.java'))
  source = source.plus(fileTree(dir: '../netcdf4/src/main/java', include: '**/*.java'))
  source = source.plus(fileTree(dir: '../opendap/src/main/java', include: '**/*.java'))
  source = source.plus(fileTree(dir: '../udunits/src/main/java', include: '**/*.java'))
  source = source.plus(fileTree(dir: '../ui/src/main/java', include: '**/*.java'))
  source = source.plus(fileTree(dir: '../visad/src/main/java', include: '**/*.java'))
}

task releaseDocs(dependsOn: javadoc) << {
  releaseDir = webdir + "javadocAll"

  ant.delete(dir: releaseDir)
  ant.mkdir(dir: releaseDir)

  copy {
    println "copyDocs to " + releaseDir
    from("build/docs/javadoc")
    into releaseDir
  }
}

///////////////////////////////////////////////////////

task showDependencies << {
  for (file in configurations.runtime.resolve()) {
     println " " + file
   }
}





