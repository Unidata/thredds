apply plugin: 'shadow'

import com.github.jengelman.gradle.plugins.shadow.transformers.ManifestResourceTransformer
import com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer
import com.github.jengelman.gradle.plugins.shadow.transformers.ServiceFileTransformer
import org.codehaus.groovy.runtime.NioGroovyMethods

import java.util.jar.JarEntry
import java.util.jar.JarFile
import java.util.jar.JarOutputStream

dependencies {
    compile project(':cdm')
    compile project(':clcommon')
    compile project(':bufr')
    compile project(':grib')
    compile project(':netcdf4')
    compile(project(':opendap')) {
        exclude module: 'javax.servlet-api'
    }
    compile project(':visad')
    compile project(':waterml')

    // DAP4 dependencies (technically forward)
    compile project(':dap4:d4core')
    compile project(':dap4:d4shared')
    compile project(':dap4:d4cdmshared')
    compile project(':dap4:d4cdmclient')

    compile('org.jfree:jcommon:1.0.23')
    compile(group: 'org.jfree', name: 'jfreechart', version: jfreechartVersion) {
        exclude group: 'com.lowagie'
    }
    compile('com.jgoodies:jgoodies-forms:1.6.0')

    compile('org.bounce:bounce:0.14')
    compile('org.imgscalr:imgscalr-lib:4.2')
    compile('org.itadaki:bzip2:0.9.1')
    compile('net.sf.ehcache:ehcache-core:2.6.2')
    compile('org.apache.commons:commons-lang3:3.1')

    compile(group: 'org.springframework', name: 'spring-core', version: springVersion) {
        transitive = false  // commons-logging
    }
    compile group: 'org.springframework', name: 'spring-context', version: springVersion

    testCompile project(':cdm').sourceSets.test.output
    runtime group: 'org.slf4j', name: 'slf4j-jdk14', version: slf4jVersion
}

jar {
    manifest {
        attributes 'Implementation-Title': 'toolsUI'
    }
}

//////////////////////////////////////////////////////////

ext {
    toolsUIjar = 'toolsUI-' + version + '.jar'
    webstartWorkingDir = "build/signed"
    if (project.hasProperty("webdir")) {
        webstartDir = webdir + "webstart"
    }

    jarsContainingDuplicateEntries = [ 'xmlbeans-2.6.0.jar' ]
}

shadow {
    outputFile = file("${destinationDir}/${toolsUIjar}")
    stats = true

    exclude 'AUTHORS'    // crap from other packages
    exclude 'DATE'
    exclude 'LICENCE'
    exclude 'LICENSE'
    exclude 'NOTICE'
    exclude '*.txt'
    exclude '*.xml'
    exclude 'META-INF/DEPENDENCIES'
    exclude 'META-INF/LICENSE'
    exclude 'META-INF/NOTICE'
    exclude 'META-INF/*.DSA'
    exclude 'META-INF/*.RSA'
    exclude 'META-INF/*.txt'
    exclude 'META-INF/*.xml'

    artifactSet {
        exclude 'commons-logging:commons-logging:*'
    }

    jar {
        manifest {
            attributes 'Main-Class': 'ucar.nc2.ui.ToolsUI'
        }
    }

    transformer(ManifestResourceTransformer) {
        mainClass = 'ucar.nc2.ui.ToolsUI'
    }
    transformer(AppendingTransformer) {
        resource = 'META-INF/spring.handlers'
    }
    transformer(AppendingTransformer) {
        resource = 'META-INF/spring.schemas'
    }
    transformer(ServiceFileTransformer) { }
}

// It's possible to test web start files locally before deploying them.
//   1. Open your gradle.properties file (~/.gradle/gradle.properties) and change "webdir" to a local directory,
//      such as /thredds/ui/build.
//   2. Comment-out the 'Codebase' manifest attribute in the top-level build.gradle.
//   3. Run this task.
//   4. Open the 2 JNLP files that were copied to webdir. Remove the "codebase" and "href" attributes from the top-level
//      "jnlp" element.
//   5. You may also need to white-list web starts from the local file system. Go to Java Control Panel->Security->
//      Edit Site List... and add the entry "file:/".
//   6. Change to webdir and execute "javaws netCDFtools.jnlp". You may also be able to simply double-click that file,
//      but I couldn't get that working (and there was no error feedback).
task releaseWebstart(dependsOn: jar) << {
    if (project.hasProperty("webdir") && project.hasProperty("keystore")
            && project.hasProperty("keystoreAlias") && project.hasProperty("keystorePassword")) {
        ant.delete(dir: webstartWorkingDir)
        ant.mkdir(dir: webstartWorkingDir)

        copy {
            println "copyJnlp"
            from 'netCDFtools.jnlp'
            from 'netCDFtoolsExtraJars.jnlp'
            into webstartWorkingDir
        }

        println "signjar:"
        println "\twebdir = $webdir"
        println "\tkeystore = $keystore"
        println "\tkeystoreAlias = $keystoreAlias"
        println "\tkeystorePassword = $keystorePassword"

        ant.signjar(jar: "build/libs/ui-" + version + ".jar", signedjar: webstartWorkingDir + "/netcdfUI.jar",
                alias: keystoreAlias, keystore: keystore, storepass: keystorePassword,
                preservelastmodified: "true")

        for (file in configurations.runtime.resolve()) {
            if (jarsContainingDuplicateEntries.contains(file.name)) {
                println "$file contains duplicate entries. Rejarring."

                File rejarredFile = new File(temporaryDir, file.name)
                rejar file, rejarredFile
                file = rejarredFile
            }

            println "Signing $file"
            ant.signjar(destDir: webstartWorkingDir, jar: file, alias: keystoreAlias, keystore: keystore,
                    storepass: keystorePassword, preservelastmodified: true, verbose: true)
        }

        copy {
            println "copy2web"
            from( webstartWorkingDir )
            into webstartDir
        }
    } else {
        println "Several properties (\"webdir\", \"keystore\", \"keystoreAlias\", \"keystorePassword\" )\n"
        +"must be defined to run \"releaseWebstart\" task."
    }
}

/* following properties should be in gradle.properties:
   keystore=name of keystore file
   keystoreAlias=idv
   keystorePassword=password of keystore file
   webdir:parent of conan content directory
   ftpdir:ftp directory
 */
task releaseCdm(dependsOn: shadowJar) << {
    if (project.hasProperty("ftpdir")) {
        println "copy " + toolsUIjar + " to " + ftpdir
        copy { // does not give error message
            from 'build/distributions/' + toolsUIjar
            into ftpdir
        }
    } else {
        println "Property \"ftpdir\" must be defined to run \"releaseCdm\" task."
    }
}

///////////////////////////////////////////////////////

javadoc {
    title = 'All javadoc for netcdf-java version ' + version
    source = fileTree(dir: '../bufr/src/main/java', include: '**/*.java')
    source = source.plus(fileTree(dir: '../cdm/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../clcommon/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../grib/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../httpservices/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../netcdf4/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../opendap/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../udunits/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../ui/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../visad/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../waterml/src/main/java', include: '**/*.java'))

    source = source.plus(fileTree(dir: '../dap4/d4core/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../dap4/d4shared/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../dap4/d4cdmshared/src/main/java', include: '**/*.java'))
    source = source.plus(fileTree(dir: '../dap4/d4cdmclient/src/main/java', include: '**/*.java'))
}

task releaseDocs(dependsOn: javadoc) << {
    if (project.hasProperty("webdir")) {
        def releaseDir = webdir + "javadocAll"

        ant.delete(dir: releaseDir)
        ant.mkdir(dir: releaseDir)

        copy {
            println "copyDocs to " + releaseDir
            from("build/docs/javadoc")
            into releaseDir
        }
    } else {
        println "Property \"webdir\" must be defined to run \"releaseDocs\" task."
    }
}

///////////////////////////////////////////////////////

task showDependencies << {
    for (file in configurations.runtime.resolve()) {
        println " " + file
    }
}


/**
 * Creates a new JAR file at {@code destJarFile} containing the contents of {@code origJarFile}. Any duplicate
 * entries in {@code origJarFile} will be excluded from {@code destJarFile}.
 *
 * @param origJarFile the original JAR file.
 * @param destJarFile the destination JAR file.
 */
def rejar(File origJarFile, File destJarFile) {
    JarFile origJar = new JarFile(origJarFile);

    NioGroovyMethods.withCloseable(origJar) {
        JarOutputStream jarOutStream = new JarOutputStream(
                new BufferedOutputStream(new FileOutputStream(destJarFile)))

        NioGroovyMethods.withCloseable(jarOutStream) {
            Set<String> entriesWritten = new HashSet<>();

            for (JarEntry origJarEntry : origJar.entries()) {
                if (entriesWritten.add(origJarEntry.getName())) {
                    writeEntry(origJar, origJarEntry, jarOutStream)
                } else {
                    logger.debug("Skipping duplicate entry: $origJarEntry.name")
                }
            }
        }
    }
}

def writeEntry(JarFile jar, JarEntry jarEntry, JarOutputStream jarOutStream) {
    try {
        jarOutStream.putNextEntry(jarEntry);
        InputStream jarEntryInputStream = jar.getInputStream(jarEntry)

        NioGroovyMethods.withCloseable(jarEntryInputStream) {
            byte[] buffer = new byte[8192];
            int bytesRead;

            while ((bytesRead = jarEntryInputStream.read(buffer)) != -1) {
                jarOutStream.write(buffer, 0, bytesRead)
            }
        }
    } finally {
        jarOutStream.closeEntry();
    }
}
