// Gradle dependency managment.
// This technique was inspired by: http://stackoverflow.com/questions/9547170

//================================================ Repositories ================================================//

// TODO: Specify preferred repository with each dependency definition (although, have a sensible default).
// Then, based on the declared dependencies, automatically add the necessary repos, and ONLY the necessary repos.
repositories {
    // Prefer JCenter to Maven Central. See
    // https://blog.bintray.com/2015/02/09/android-studio-migration-from-maven-central-to-jcenter/
    jcenter()
    mavenCentral()  // JCenter isn't quite a superset of Maven Central.
    maven {
        url "https://artifacts.unidata.ucar.edu/content/repositories/unidata"
    }
    maven {
        url "https://artifacts.unidata.ucar.edu/content/repositories/unidata-3rdparty/"
    }
    maven {
        url "https://dl.bintray.com/cwardgar/maven/"  // For 'com.cwardgar.gretty:gretty-fork'.
    }
}

//================================================ Dependencies ================================================//

ext {
    // Extra properties must be declared in the "ext" namespace. After declaration, they can be used without prefix.
    // These will be inherited by subprojects.
    versions = [:]
    libraries = [:]
}

////////////////////////////////////////// Plugins //////////////////////////////////////////

libraries["gretty"] = "com.cwardgar.gretty-fork:gretty:1.0.3"

libraries["shadow"] = "com.github.jengelman.gradle.plugins:shadow:1.2.3"

libraries["coveralls-gradle-plugin"] = "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.6.3"

libraries["gradle-extra-configurations-plugin"] = "com.netflix.nebula:gradle-extra-configurations-plugin:3.1.0"

libraries["sonarqube-gradle-plugin"] = "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.1"

libraries["license-gradle-plugin"] = "gradle.plugin.nl.javadude.gradle.plugins:license-gradle-plugin:0.13.1"

////////////////////////////////////////// Spring //////////////////////////////////////////

versions["spring"] = "4.3.2.RELEASE"

libraries["spring-core"] = "org.springframework:spring-core:${versions["spring"]}"

libraries["spring-context"] = "org.springframework:spring-context:${versions["spring"]}"

libraries["spring-beans"] = "org.springframework:spring-beans:${versions["spring"]}"

libraries["spring-web"] = "org.springframework:spring-web:${versions["spring"]}"

libraries["spring-webmvc"] = "org.springframework:spring-webmvc:${versions["spring"]}"

////////////////////////////////////////// Spring security //////////////////////////////////////////

// Latest update is 4.1.3.RELEASE. However, we cannot upgrade due to an error:
//   Configuration problem: You cannot use a spring-security-4.0.xsd schema with Spring Security 4.1.
//   Please update your schema declarations to the 4.1 schema.
//   Offending resource: ServletContext resource [/WEB-INF/applicationContext.xml]
versions["spring-security"] = "4.0.4.RELEASE"

libraries["spring-security-core"] = "org.springframework.security:spring-security-core:${versions["spring-security"]}"

libraries["spring-security-config"] = "org.springframework.security:spring-security-config:${versions["spring-security"]}"

libraries["spring-security-web"] = "org.springframework.security:spring-security-web:${versions["spring-security"]}"

// "spring-security-taglibs" is only used in the Maven build of wmotables.
// wmotables is not built in Gradle, but I'm leaving this here so that
// dependencies.gradle matches the root POM's dependencyManagement section as closely as possible.
libraries["spring-security-taglibs"] = "org.springframework.security:spring-security-taglibs:${versions["spring-security"]}"

////////////////////////////////////////// XML Beans //////////////////////////////////////////

libraries["xmlbeans"] = "org.apache.xmlbeans:xmlbeans:2.6.0"

versions["52n-common-xml"] = "2.2.0"

libraries["52n-xml-waterML-v20"] = "org.n52.sensorweb:52n-xml-waterML-v20:${versions["52n-common-xml"]}"

libraries["52n-xml-gml-v321"] = "org.n52.sensorweb:52n-xml-gml-v321:${versions["52n-common-xml"]}"

libraries["52n-xml-sweCommon-v20"] = "org.n52.sensorweb:52n-xml-sweCommon-v20:${versions["52n-common-xml"]}"

libraries["52n-xml-om-v20"] = "org.n52.sensorweb:52n-xml-om-v20:${versions["52n-common-xml"]}"

libraries["52n-xml-sampling-v20"] = "org.n52.sensorweb:52n-xml-sampling-v20:${versions["52n-common-xml"]}"

////////////////////////////////////////// Logging //////////////////////////////////////////

versions["slf4j"] = "1.7.21"

libraries["slf4j-api"] = "org.slf4j:slf4j-api:${versions["slf4j"]}"

libraries["slf4j-jdk14"] = "org.slf4j:slf4j-jdk14:${versions["slf4j"]}"

libraries["jcl-over-slf4j"] = "org.slf4j:jcl-over-slf4j:${versions["slf4j"]}"

versions["log4j"] = "2.6.2"

libraries["log4j-api"] = "org.apache.logging.log4j:log4j-api:${versions["log4j"]}"

libraries["log4j-core"] = "org.apache.logging.log4j:log4j-core:${versions["log4j"]}"

libraries["log4j-web"] = "org.apache.logging.log4j:log4j-web:${versions["log4j"]}"

libraries["log4j-slf4j-impl"] = "org.apache.logging.log4j:log4j-slf4j-impl:${versions["log4j"]}"

////////////////////////////////////////// Testing //////////////////////////////////////////

libraries["junit"] = "junit:junit:4.12"

libraries["JUnitParams"] = "pl.pragmatists:JUnitParams:1.0.5"

libraries["spring-test"] = "org.springframework:spring-test:${versions["spring"]}"

libraries["hamcrest-core"] = "org.hamcrest:hamcrest-core:1.3"

libraries["commons-io"] = "commons-io:commons-io:2.5"

libraries["commons-compress"] = "org.apache.commons:commons-compress:1.12"

// These four are all for Spock.
libraries["spock-core"] = "org.spockframework:spock-core:1.0-groovy-2.4"

libraries["groovy-all"] = "org.codehaus.groovy:groovy-all:2.4.7"

// In Spock, allows mocking of classes (in addition to interfaces).
libraries["cglib-nodep"] = "cglib:cglib-nodep:3.2.4"

// In Spock, allows mocking of classes without default constructor (together with CGLIB).
libraries["objenesis"] = "org.objenesis:objenesis:2.4"

////////////////////////////////////////// Other //////////////////////////////////////////

// See https://github.com/coverity/coverity-security-library
libraries["coverity-escapers"] = "com.coverity.security:coverity-escapers:1.1.1"

libraries["guava"] = "com.google.guava:guava:19.0"

libraries["httpclient"] = "org.apache.httpcomponents:httpclient:4.5.2"

libraries["httpcore"] = "org.apache.httpcomponents:httpcore:4.4.5"

libraries["httpmime"] = "org.apache.httpcomponents:httpmime:4.5.2"

// command line parser
libraries["jcommander"] = "com.beust:jcommander:1.48"

libraries["jdom2"] = "org.jdom:jdom2:2.0.6"

// used by FMRC - replace ?
// Latest version is 5.0.73. Can we upgrade?
libraries["je"] = "com.sleepycat:je:4.0.92"

libraries["jna"] = "net.java.dev.jna:jna:4.2.2"

// replace by javax.time
libraries["joda-time"] = "joda-time:joda-time:2.9.4"

// HTML scraper used in GRIB
libraries["jsoup"] = "org.jsoup:jsoup:1.9.2"

// Annotations
libraries["jsr305"] = "com.google.code.findbugs:jsr305:3.0.1"

libraries["protobuf-java"] = "com.google.protobuf:protobuf-java:3.0.2"

libraries["visad"] = "edu.wisc.ssec:visad:2.0-20130124"

// replace ??
libraries["commons-lang3"] = "org.apache.commons:commons-lang3:3.4"

// GRIB
libraries["jj2000"] = "edu.ucar:jj2000:5.3"

////////////////////////////// TDS ///////////////////////////////////////////

libraries["aws-java-sdk-s3"] = "com.amazonaws:aws-java-sdk-s3:1.11.35"

// Latest version is 3.10.1. Can we upgrade?
libraries["chronicle-map"] = "net.openhft:chronicle-map:2.4.15"

libraries["javax.servlet-api"] = "javax.servlet:javax.servlet-api:3.1.0"

versions["taglibs"] = "1.2.5"

libraries["taglibs-standard-spec"] = "org.apache.taglibs:taglibs-standard-spec:${versions["taglibs"]}"

libraries["taglibs-standard-impl"] = "org.apache.taglibs:taglibs-standard-impl:${versions["taglibs"]}"

libraries["jaxen"] = "jaxen:jaxen:1.1.6"

libraries["oro"] = "oro:oro:2.0.8"

// The latest version is 3.0.1.RELEASE. Can we update?
libraries["thymeleaf-spring4"] = "org.thymeleaf:thymeleaf-spring4:3.0.2.RELEASE"

versions["edal"] = "1.2.5"

libraries["edal-common"] = "uk.ac.rdg.resc:edal-common:${versions["edal"]}"

libraries["edal-cdm"] = dependencies.create("uk.ac.rdg.resc:edal-cdm:${versions["edal"]}") {
    // These are dependencies that are included in edal-cdm, but are provided by
    // us already, so we will exclude these from the edal-cdm artifact.
    exclude group: 'edu.ucar', module: 'cdm'
    exclude group: 'edu.ucar', module: 'udunits'
    exclude group: 'edu.ucar', module: 'netcdf4'
    exclude group: 'edu.ucar', module: 'grib'
    exclude group: 'edu.ucar', module: 'opendap'
    exclude group: 'com.sleepycat', module: 'je'
    exclude group: 'oro', module: 'oro'
}

libraries["edal-wms"] = "uk.ac.rdg.resc:edal-wms:${versions["edal"]}"

libraries["edal-graphics"] = "uk.ac.rdg.resc:edal-graphics:${versions["edal"]}"

libraries["edal-godiva"] = dependencies.create("uk.ac.rdg.resc:edal-godiva:${versions["edal"]}") {
    // In edal-godiva's POM, this should have been marked "provided" instead of "compile", because it's
    // not needed at runtime. We have to exclude it ourselves as a result.
    exclude module: 'gwt-user'
}

versions["gwt"] = "2.7.0"

libraries["gwt-user"] =  "com.google.gwt:gwt-user:${versions["gwt"]}"

libraries["gwt-dev"] = "com.google.gwt:gwt-dev:${versions["gwt"]}"

libraries["threddsIso"] = "EDS:threddsIso:2.3.0-SNAPSHOT"

libraries["Saxon-HE"] = "net.sf.saxon:Saxon-HE:9.7.0-8"

libraries["quartz"] = "org.quartz-scheduler:quartz:2.2.3"

// Version update note:
// spring-context 4.x is limited to hibernate-validator 4.3.2.Final. We can't update to hibernate-validator 5.x
// hibernate-validator 4.3.2.Final is limited to validation-api 1.0.0.GA. We can't update to validation-api 1.1.0.Final

libraries["hibernate-validator"] = "org.hibernate:hibernate-validator:4.3.2.Final"

libraries["validation-api"] = "javax.validation:validation-api:1.0.0.GA"

////////////////////////////////////////// ToolsUI //////////////////////////////////////////

// What the hell is this? Google search turns up nothing.
libraries["bounce"] = "org.bounce:bounce:0.14"

// Old and crufty. Only used by TdsMonitor in :ui. Can we switch to Guava caches?
// libraries["ehcache-core"] = "net.sf.ehcache:ehcache-core:2.6.2"

libraries["imgscalr-lib"] = "org.imgscalr:imgscalr-lib:4.2"

libraries["jcommon"] = "org.jfree:jcommon:1.0.23"

libraries["jfreechart"] = "org.jfree:jfreechart:1.0.19"

// Latest version is 1.9.0, but there is breakage when we try to upgrade.
libraries["jgoodies-forms"] = "com.jgoodies:jgoodies-forms:1.6.0"

//////////////////////////// Transitive dependency replacements and exclusions ////////////////////////////

// Executes the given closure against all objects in this collection, and any objects subsequently added to this
// collection. See org.gradle.api.DomainObjectCollection.all(Closure)
configurations.all {
    resolutionStrategy {
        // Replace every instance of "commons-logging" in the dependency tree with "jcl-over-slf4j". This effectively
        // converts every JCL call to an slf4j call. Pulled in by the following first-level dependencies:
        //     org.apache.httpcomponents:httpclient:4.5.2
        //     +--- org.apache.httpcomponents:httpcore:4.4.4 -> 4.4.5
        //     +--- commons-logging:commons-logging:1.2
        //
        //     org.springframework:spring-core:4.3.2.RELEASE
        //     \--- commons-logging:commons-logging:1.2
        //
        //     +--- uk.ac.rdg.resc:edal-graphics:1.2.5-SNAPSHOT
        //     |    +--- net.sf.json-lib:json-lib:2.4
        //     |    |    +--- commons-beanutils:commons-beanutils:1.8.0
        //     |    |    |    \--- commons-logging:commons-logging:1.1.1 -> 1.2
        //     |    |    +--- commons-logging:commons-logging:1.1.1 -> 1.2
        eachDependency { DependencyResolveDetails dep ->
            if (dep.requested.name == 'commons-logging') {
                dep.useTarget libraries["jcl-over-slf4j"]
            }
        }

        // Use commons-collections 3.2.2 instead of 3.2.1. Pulled in by the following first-level dependencies:
        //     uk.ac.rdg.resc:edal-graphics:1.2.5-SNAPSHOT
        //     +--- net.sf.json-lib:json-lib:2.4
        //     |    +--- commons-collections:commons-collections:3.2.1
        //     \--- org.apache.velocity:velocity:1.7
        //          +--- commons-collections:commons-collections:3.2.1
        force 'commons-collections:commons-collections:3.2.2'
    
        // Use xstream 1.4.9 instead of 1.4.8. Pulled in by the following first-level dependency:
        //     net.openhft:chronicle-map:2.4.15
        //     +--- com.thoughtworks.xstream:xstream:1.4.8
        force 'com.thoughtworks.xstream:xstream:1.4.9'
    }

    // STAX comes with Java 1.6+. Pulled in by the following first-level dependencies:
    //     net.openhft:chronicle-map:2.4.15
    //     +--- org.codehaus.jettison:jettison:1.3.7
    //     |    \--- stax:stax-api:1.0.1
    //
    //     org.apache.xmlbeans:xmlbeans:2.6.0
    //     \--- stax:stax-api:1.0.1
    exclude group: 'stax', module: 'stax-api'

    // Another SLF4J binding that we don't want. Pulled in by the following first-level dependencies:
    //     uk.ac.rdg.resc:edal-common:1.2.5-SNAPSHOT
    //     +--- org.slf4j:slf4j-log4j12:1.7.2
    //
    //     uk.ac.rdg.resc:edal-godiva:1.2.5-SNAPSHOT
    //     \--- org.slf4j:slf4j-log4j12:1.7.2 (*)
    exclude group: 'org.slf4j', module: 'slf4j-log4j12'
}
