apply from: "$rootDir/gradle/dependencies.gradle"
apply plugin: "java"

dependencies {
    testCompile libraries["junit"]

    if (name != "cdm") {
        // Applying this to "cdm" creates a circular dependency.
        testCompile project(path: ':cdm', configuration: 'testArtifacts')
    }
}

tasks.withType(Test) {
    useJUnit {
        String testdataDirPath = getTestdataDirPath()
        if (!testdataDirPath) {
            logger.warn "Skipping all NeedsCdmUnitTest tests: \"unidata.testdata.path\" property not defined."
            // FIXME: This is spammy.
            // Also, calling (or not calling) this method does not affect a Test task's up-to-date status.
            excludeCategories 'ucar.unidata.test.util.NeedsCdmUnitTest'
        } else if (!new File(testdataDirPath).isDirectory()) {
            logger.warn "Skipping all NeedsCdmUnitTest tests: \"$testdataDirPath\" directory not found."
            excludeCategories 'ucar.unidata.test.util.NeedsCdmUnitTest'
        }
    }

    if (!System.env['TRAVIS']) {
        ignoreFailures true
    }
}

// Add an SLF4J binding to testRuntime, if necessary.
afterEvaluate {
    if (testRuntimeHasDepNamed("slf4j-api")) {
        if (!testRuntimeHasDepNamed("slf4j-jdk14") && !testRuntimeHasDepNamed("log4j-slf4j-impl")) {
            dependencies.testRuntime libraries["slf4j-jdk14"]  // Default binding.
        }
    }
}

boolean testRuntimeHasDepNamed(String depName) {
    // Groovy truth: empty collections are coerced to false.
    configurations.testRuntime.allDependencies.findAll { it.name == depName }
}

// Copied from ucar.nc2.util.Misc with minor modification.
String getTestdataDirPath() {
    String threddsPropFileName = "thredds.properties";
    String testdataDirPropName = "unidata.testdata.path";
    String testdataDirPath = null;

    if (testdataDirPath == null)
        testdataDirPath = System.getProperty(testdataDirPropName);  // Check for system property

    if (testdataDirPath == null) {
        File userHomeDirFile = new File(System.getProperty("user.home"));
        File userThreddsPropsFile = new File(userHomeDirFile, threddsPropFileName);
        if (userThreddsPropsFile.exists() && userThreddsPropsFile.canRead()) {
            Properties userThreddsProps = new Properties();
            try {
                userThreddsProps.load(new FileInputStream(userThreddsPropsFile));
            } catch (IOException e) {
                System.out.println("**Failed loading user THREDDS property file: " + e.getMessage());
            }
            if (!userThreddsProps.isEmpty()) {
                testdataDirPath = userThreddsProps.getProperty(testdataDirPropName);
            }
        }
    }

    return testdataDirPath;
}
