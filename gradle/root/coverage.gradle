if (name != "thredds") {
    throw new GradleException("This script plugin should only be applied to the root project, not '$name'.")
}

apply plugin: "jacoco"
apply plugin: "base" // Gives us the "clean" task for removing rootJacocoReport's output.
apply from: "$rootDir/gradle/any/properties.gradle"  // For Coveralls repo token property.

gradle.projectsEvaluated {  // Several statements below rely upon all subprojects having been evaluated.
    // Add the source directories for each Java subproject to one big FileCollection.
    // Ditto for the class directories.
    Collection<Project> javaProjects = subprojects.findAll { it.plugins.withType(JavaPlugin) }
    FileCollection allSubprojectSourceDirs = files(javaProjects*.sourceSets*.main*.allSource*.srcDirs)
    FileCollection allSubprojectClassDirs = files(javaProjects*.sourceSets*.main*.output)
    
    task rootJacocoReport(type: JacocoReport, group: 'Reports') {
        description = 'Generates an aggregate coverage report from all subprojects'
        dependsOn tasks.testAll  // Added in root/testing.gradle.
    
        reports.xml.enabled = true  // Needed by the coveralls task.
    
        // Add the source directories for the :buildSrc project. Note that by this time in the 'thredds' config,
        // :buildSrc has already run as a SEPARATE build (see http://stackoverflow.com/questions/26597147),
        // so we cannot programmatically access its Project object to retrieve these paths.
        // Also add the source directories of all Java subprojects.
        sourceDirectories = files('buildSrc/src/main/groovy', allSubprojectSourceDirs)
        
        // Ditto for class directories.
        classDirectories = files('buildSrc/build/classes/main', allSubprojectClassDirs)
    
        Closure isExtendedByJacoco = { Task task -> task.extensions.findByType(JacocoTaskExtension) }
        Collection<Task> tasksExtendedByJacoco = subprojects*.tasks*.matching(isExtendedByJacoco).flatten()
        Collection<File> subprojectExeData = tasksExtendedByJacoco*.jacoco*.destinationFile
        
        // Some of subprojectExeData may not exist. That's okay! Only existing executionData are passed to Ant task.
        executionData = files('buildSrc/build/jacoco/test.exec', subprojectExeData)
    }
    
    apply plugin: "com.github.kt3k.coveralls"
    
    /*
     * Ordinarily, I'd be able to configure the "coveralls" task by using the "coveralls(Closure)" dynamic method
     * added to Project when the above plugin is applied. However, the plugin also adds an extension with the same
     * name (see http://goo.gl/GVE4v6). As a result, Project now has TWO dynamic methods with the "coveralls(Closure)"
     * signature.
     *
     * Which method takes precedence: the one that configures the extension or the one that configures the task? I
     * can't find a definitive answer, but the Gradle docs (http://goo.gl/KPXLpf) seem to indicate that the extension
     * wins (it appears earlier in the list--hardly definitive, I know).
     *
     * Operating under this assumption, we must explicitly indicate that we are configuring the "coveralls" task. Why
     * not just create a new task of type CoverallsTask? Something like "task coverallsReport(type: CoverallsTask)"?
     *
     * Unfortunately, that gives an error: "Extension of type 'CoverallsPluginExtension' does not exist", originating
     * from here: http://goo.gl/HAZk1L. The behavior does not occur when the task is defined in the root build script,
     * meaning it's most likely a Gradle bug, not a coveralls-gradle-plugin bug. That's not surprising: there are lots
     * of weird and poorly-defined limitations about what you can and can't do in a script plugin.
     */
    tasks.coveralls { Task task ->
        group = 'Reports'
        description = 'Uploads the aggregate coverage report to Coveralls'
        dependsOn tasks.rootJacocoReport
        
        // This task logs the entire coveralls.io JSON payload (~27 MB) to the INFO log level.
        // We don't want to see it, so we're going to bump this task's log level up to LIFECYCLE.
        //
        // In Gradle 3.0, LoggingManager.setLevel() was removed without an appropriate (public) replacement.
        // So, we have no choice but to use the deprecated, internal class's method.
        (task.logging as org.gradle.logging.LoggingManagerInternal).level = LogLevel.LIFECYCLE
        
        // We want to add the COVERALLS_REPO_TOKEN entry, but coveralls.env is an UnmodifiableMap.
        // So, create a copy of env, add our entry, then replace the old map with it.
        Map<String, String> envCopy = new HashMap<>(env)
        // Defer invocation of getPropertyOrFailBuild() until the execution phase, using lazy GStrings.
        envCopy["COVERALLS_REPO_TOKEN"] = "${-> getPropertyOrFailBuild COVERALLS_REPO_TOKEN_KEY}"
        env = envCopy
        
        // Configure the "coveralls" extension. These properties only appear on the extension, not the task.
        coveralls {
            jacocoReportPath = tasks.rootJacocoReport.reports.xml.destination
            sourceDirs = tasks.rootJacocoReport.sourceDirectories.flatten()
    
            sendToCoveralls = true
            saveAsFile = true  // Save JSON payload to file, so we can use it for UP-TO-DATE checking.
    
            inputs.file jacocoReportPath
            outputs.file saveFilePath
        }
        
        doLast {
            println "The latest Coveralls report can be found at https://coveralls.io/github/Unidata/thredds"
        }
    }
}
