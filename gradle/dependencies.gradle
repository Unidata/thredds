// Gradle dependency managment.
// This technique was inspired by: http://stackoverflow.com/questions/9547170

//================================================ Repositories ================================================//

// TODO: Specify preferred repository with each dependency definition (although, have a sensible default).
// Then, based on the declared dependencies, automatically add the necessary repos, and ONLY the necessary repos.
repositories {
    mavenCentral()
    maven {
        url "https://artifacts.unidata.ucar.edu/content/repositories/unidata"
    }
    maven {
        url "https://artifacts.unidata.ucar.edu/content/repositories/unidata-3rdparty/"
    }
}

//================================================ Dependencies ================================================//

ext {
    // Extra properties must be declared in the "ext" namespace.
    // After declaration, they can be used without prefix.
    versions = [:]
    libraries = [:]
}

////////////////////////////////////////// Plugins //////////////////////////////////////////

libraries["gretty"] = "org.akhikhl.gretty:gretty:1.2.0"

libraries["shadow"] = "com.github.jengelman.gradle.plugins:shadow:0.8"

libraries["coveralls-gradle-plugin"] = "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1"

////////////////////////////////////////// Spring //////////////////////////////////////////

versions["spring"] = "3.2.12.RELEASE"

libraries["spring-core"] = "org.springframework:spring-core:${versions["spring"]}"

libraries["spring-context"] = "org.springframework:spring-context:${versions["spring"]}"

libraries["spring-beans"] = "org.springframework:spring-beans:${versions["spring"]}"

libraries["spring-web"] = "org.springframework:spring-web:${versions["spring"]}"

libraries["spring-webmvc"] = "org.springframework:spring-webmvc:${versions["spring"]}"

////////////////////////////////////////// Spring security //////////////////////////////////////////

versions["spring-security"] = "3.2.5.RELEASE"

libraries["spring-security-config"] = "org.springframework.security:spring-security-config:${versions["spring-security"]}"

libraries["spring-security-taglibs"] = "org.springframework.security:spring-security-taglibs:${versions["spring-security"]}"

////////////////////////////////////////// XML Beans //////////////////////////////////////////

libraries["xmlbeans"] = "org.apache.xmlbeans:xmlbeans:2.6.0"

libraries["52n-oxf-xmlbeans"] = "org.n52.sensorweb:52n-oxf-xmlbeans:1.12"

versions["52n-common-xml"] = "1.1.5"

libraries["52n-xml-waterML-v20"] = "org.n52.sensorweb:52n-xml-waterML-v20:${versions["52n-common-xml"]}"

libraries["52n-xml-gml-v321"] = "org.n52.sensorweb:52n-xml-gml-v321:${versions["52n-common-xml"]}"

libraries["52n-xml-sweCommon-v20"] = "org.n52.sensorweb:52n-xml-sweCommon-v20:${versions["52n-common-xml"]}"

libraries["52n-xml-om-v20"] = "org.n52.sensorweb:52n-xml-om-v20:${versions["52n-common-xml"]}"

libraries["52n-xml-sampling-v20"] = "org.n52.sensorweb:52n-xml-sampling-v20:${versions["52n-common-xml"]}"

////////////////////////////////////////// Logging //////////////////////////////////////////

versions["slf4j"] = "1.7.7"

libraries["slf4j-api"] = "org.slf4j:slf4j-api:${versions["slf4j"]}"

libraries["slf4j-jdk14"] = "org.slf4j:slf4j-jdk14:${versions["slf4j"]}"

libraries["jcl-over-slf4j"] = "org.slf4j:jcl-over-slf4j:${versions["slf4j"]}"

versions["log4j"] = "2.2"

libraries["log4j-api"] = "org.apache.logging.log4j:log4j-api:${versions["log4j"]}"

libraries["log4j-core"] = "org.apache.logging.log4j:log4j-core:${versions["log4j"]}"

libraries["log4j-web"] = "org.apache.logging.log4j:log4j-web:${versions["log4j"]}"

libraries["log4j-slf4j-impl"] = "org.apache.logging.log4j:log4j-slf4j-impl:${versions["log4j"]}"

////////////////////////////////////////// Testing //////////////////////////////////////////

libraries["junit"] = "junit:junit:4.12"

libraries["spring-test"] = "org.springframework:spring-test:${versions["spring"]}"

libraries["hamcrest-core"] = "org.hamcrest:hamcrest-core:1.3"

libraries["com.eclipsesource.restfuse"] = "com.restfuse:com.eclipsesource.restfuse:1.0.0"

libraries["httpunit"] = "httpunit:httpunit:1.7"

////////////////////////////////////////// Other //////////////////////////////////////////

// See https://github.com/coverity/coverity-security-library
libraries["coverity-escapers"] = "com.coverity.security:coverity-escapers:1.1.1"

libraries["bounce"] = "org.bounce:bounce:0.14"

libraries["imgscalr-lib"] = "org.imgscalr:imgscalr-lib:4.2"

libraries["httpclient"] = "org.apache.httpcomponents:httpclient:4.2.6"

libraries["httpcore"] = "org.apache.httpcomponents:httpcore:4.2.5"

libraries["ehcache-core"] = "net.sf.ehcache:ehcache-core:2.6.2"

libraries["jcip-annotations"] = "net.jcip:jcip-annotations:1.0"

libraries["jdom2"] = "org.jdom:jdom2:2.0.4"

libraries["je"] = "com.sleepycat:je:4.0.92"

libraries["jna"] = "net.java.dev.jna:jna:4.1.0"

libraries["joda-time"] = "joda-time:joda-time:2.2"

libraries["jsoup"] = "org.jsoup:jsoup:1.7.2"

libraries["protobuf-java"] = "com.google.protobuf:protobuf-java:2.5.0"

libraries["quartz"] = "org.quartz-scheduler:quartz:2.2.0"

libraries["visad"] = "edu.wisc.ssec:visad:2.0-20130124"

libraries["jcommander"] = "com.beust:jcommander:1.35"

libraries["commons-lang3"] = "org.apache.commons:commons-lang3:3.3.2"

libraries["guava"] = "com.google.guava:guava:18.0"

libraries["jj2000"] = "edu.ucar:jj2000:5.2"

libraries["bzip2"] = "org.itadaki:bzip2:0.9.1"

libraries["xz"] = "org.tukaani:xz:1.0"

libraries["jcommon"] = "org.jfree:jcommon:1.0.23"

libraries["jfreechart"] = "org.jfree:jfreechart:1.0.19"

libraries["jgoodies-forms"] = "com.jgoodies:jgoodies-forms:1.6.0"

libraries["commons-fileupload"] = "commons-fileupload:commons-fileupload:1.2.2"

libraries["commons-io"] = "commons-io:commons-io:2.4"

libraries["commons-compress"] = "org.apache.commons:commons-compress:1.8.1"

libraries["oro"] = "oro:oro:2.0.8"

libraries["ncwms"] = dependencies.create("uk.ac.rdg.resc:ncwms:1.2.tds.4.6.0") {
    // This is an external dependency on an old artifact of ours.
    // The "cdm" artifact that we build in this project will take its place.
    // This needs to be a local exclusion; globally excluding "edu.ucar:cdm" would be very bad.
    exclude group: 'edu.ucar', module: 'cdm'  // version "4.6.0"
}

libraries["geoapi-pending"] = "org.opengis:geoapi-pending:3.1-M04"

libraries["javax.servlet-api"] = "javax.servlet:javax.servlet-api:3.1.0"

libraries["jstl"] = "javax.servlet:jstl:1.2"

libraries["validation-api"] = "javax.validation:validation-api:1.0.0.GA"

libraries["hibernate-validator"] = "org.hibernate:hibernate-validator:4.3.1.Final"

libraries["jaxen"] = "jaxen:jaxen:1.1.4"

libraries["threddsIso"] = "EDS:threddsIso:2.2.5"

//////////////////////////// Transitive dependency replacements and exclusions ////////////////////////////

configurations.all {
    // Replace every instance of "commons-logging" in the dependency tree with "jcl-over-slf4j".
    // This effectively converts every jcl call to an slf4j call.
    // "commons-logging" is dragged in by spring-core and httpclient.
    resolutionStrategy.eachDependency { DependencyResolveDetails dep ->
        if (dep.requested.name == 'commons-logging') {
            dep.useTarget libraries["jcl-over-slf4j"]
        }
    }

    // STAX comes with Java 1.6+
    // Dragged in by xmlbeans
    exclude group: 'stax', module: 'stax-api'

    // Xerces comes with Java 1.6+
    // This SHOULD be okay, but see http://stackoverflow.com/questions/1167757
    // Dragged in by 52n-oxf-xmlbeans
    exclude group: 'xerces', module: 'xercesImpl'

    // This is an old version of the servlet API: v2. We're using v3.
    // Dragged in by httpunit.
    exclude group: 'javax.servlet', module: 'servlet-api'

    // Includes a lot of classes that already come with Java 1.6+
    // and we don't use the "tidy" functionality (i.e. HTML pretty printing) anyway.
    // Dragged in by httpunit.
    exclude group: 'jtidy', module: 'jtidy'
}
