// Gradle dependency managment.
// This technique was inspired by: http://stackoverflow.com/questions/9547170

//================================================ Repositories ================================================//

allprojects {  // Doesn't apply any plugins: safe to run closure on all projects.
    // TODO: Specify preferred repository with each dependency definition (although, have a sensible default).
    // Then, based on the declared dependencies, automatically add the necessary repos, and ONLY the necessary repos.
    repositories {
        // Prefer JCenter to Maven Central. See
        // https://blog.bintray.com/2015/02/09/android-studio-migration-from-maven-central-to-jcenter/
        jcenter()
        mavenCentral()  // JCenter isn't quite a superset of Maven Central.
        
        // All of the repositories below could be replaced with:
        //     url "https://artifacts.unidata.ucar.edu/repository/unidata-all/"
        // which is a group repository that contains all other repositories. However, I prefer to list all source
        // repos explicitly so that we know where all artifacts ultimately come from.
        
        // Hosted release repositories.
        maven {
            // For "threddsIso", "ncwms", "visad" and "jj2000".
            url "https://artifacts.unidata.ucar.edu/repository/unidata-releases/"
        }
        maven {
            // For "bounce" and several dependencies needed by "ncwms".
            // Contains artifacts that are not available in any other Maven repository on the net.
            // We should be concerned that we're relying on any such artifacts. TODO: Remove our dependence on these.
            url "https://artifacts.unidata.ucar.edu/repository/unidata-3rdparty/"
        }
    
        // Hosted proxy repositories. In the event that the remote repos go away, we still have copies of the artifacts.
        maven {
            // For geotoolkit JARs, which are needed by "ncwms". Repositories are not inherited from a dependency,
            // so we must duplicate ncwms's needed repos here. See https://stackoverflow.com/a/19908009/3874643.
            //
            // This repo proxies "https://nexus.geomatys.com/repository/geotoolkit/", which Gradle seems to have
            // difficulty interacting with. It complains about malformed class files in the JARs that it downloads
            // from there, which lead to compilation failures in :tds:compileJava. I cannot pinpoint the exact cause,
            // but I suspect it's because the host requires clients to support SNI, but Gradle currently does not
            // (see https://github.com/gradle/gradle/issues/1868). A proxy repository circumvents the issue: it
            // downloads the artifacts from the source repo on behalf of Gradle. That way, Gradle needn't interact
            // with the source repo at all.
            url "https://artifacts.unidata.ucar.edu/repository/unidata-geotoolkit/"
        }
    
        // Third-party repositories.
        maven {
            url "https://dl.bintray.com/cwardgar/maven/"  // For 'com.cwardgar.gretty-fork:gretty'.
        }
        maven {
            url "http://maven.asascience.com/maven/ncsos-releases/"  // For "ncsos".
        }
        maven {
            url "http://52north.org/maven/repo/releases/"  // For "52n-oxf-xmlbeans".
        }
        
        // Hosted snapshot repository. We want this to be last so that we can minimize warnings such as:
        //   Failed to get resource: HEAD. [HTTP HTTP/1.1 400 Repository version policy:
        //   SNAPSHOT does not allow version: 1.4:
        //   https://artifacts.unidata.ucar.edu/repository/unidata-snapshots/org/khelekore/prtree/1.4/prtree-1.4.pom]
        // The warning is harmless, and is even an expected part of artifact resolution, but it's spammy as hell,
        // especially when you're running something like "./gradlew dependencies".
        maven {
            // For "threddsIso" and "ncwms" snapshots.
            url "https://artifacts.unidata.ucar.edu/repository/unidata-snapshots/"
        }
    }
}

//================================================ Dependencies ================================================//

ext {
    // Extra properties must be declared in the "ext" namespace. After declaration, they can be used without prefix.
    // These will be inherited by subprojects.
    versions = [:]
    libraries = [:]
}

////////////////////////////////////////// Plugins //////////////////////////////////////////

libraries["gretty"] = "com.cwardgar.gretty-fork:gretty:2.0.1"

libraries["shadow"] = "com.github.jengelman.gradle.plugins:shadow:1.2.3"

libraries["coveralls-gradle-plugin"] = "org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.3.1"

////////////////////////////////////////// Spring //////////////////////////////////////////

versions["spring"] = "4.3.20.RELEASE"

libraries["spring-core"] = "org.springframework:spring-core:${versions["spring"]}"

libraries["spring-context"] = "org.springframework:spring-context:${versions["spring"]}"

libraries["spring-beans"] = "org.springframework:spring-beans:${versions["spring"]}"

libraries["spring-web"] = "org.springframework:spring-web:${versions["spring"]}"

libraries["spring-webmvc"] = "org.springframework:spring-webmvc:${versions["spring"]}"

////////////////////////////////////////// Spring security //////////////////////////////////////////

versions["spring-security"] = "3.2.5.RELEASE"

libraries["spring-security-config"] = "org.springframework.security:spring-security-config:${versions["spring-security"]}"

libraries["spring-security-taglibs"] = "org.springframework.security:spring-security-taglibs:${versions["spring-security"]}"

////////////////////////////////////////// XML Beans //////////////////////////////////////////

libraries["xmlbeans"] = "org.apache.xmlbeans:xmlbeans:2.6.0"

libraries["52n-oxf-xmlbeans"] = "org.n52.sensorweb:52n-oxf-xmlbeans:2.0.0-alpha.3.3"

versions["52n-common-xml"] = "2.1.0"

libraries["52n-xml-waterML-v20"] = "org.n52.sensorweb:52n-xml-waterML-v20:${versions["52n-common-xml"]}"

libraries["52n-xml-gml-v321"] = "org.n52.sensorweb:52n-xml-gml-v321:${versions["52n-common-xml"]}"

libraries["52n-xml-sweCommon-v20"] = "org.n52.sensorweb:52n-xml-sweCommon-v20:${versions["52n-common-xml"]}"

libraries["52n-xml-om-v20"] = "org.n52.sensorweb:52n-xml-om-v20:${versions["52n-common-xml"]}"

libraries["52n-xml-sampling-v20"] = "org.n52.sensorweb:52n-xml-sampling-v20:${versions["52n-common-xml"]}"

////////////////////////////////////////// Logging //////////////////////////////////////////

versions["slf4j"] = "1.7.22"

libraries["slf4j-api"] = "org.slf4j:slf4j-api:${versions["slf4j"]}"

libraries["slf4j-jdk14"] = "org.slf4j:slf4j-jdk14:${versions["slf4j"]}"

libraries["jcl-over-slf4j"] = "org.slf4j:jcl-over-slf4j:${versions["slf4j"]}"

versions["log4j"] = "2.8.2"

libraries["log4j-api"] = "org.apache.logging.log4j:log4j-api:${versions["log4j"]}"

libraries["log4j-core"] = "org.apache.logging.log4j:log4j-core:${versions["log4j"]}"

libraries["log4j-web"] = "org.apache.logging.log4j:log4j-web:${versions["log4j"]}"

libraries["log4j-slf4j-impl"] = "org.apache.logging.log4j:log4j-slf4j-impl:${versions["log4j"]}"

////////////////////////////////////////// Testing //////////////////////////////////////////

libraries["junit"] = "junit:junit:4.12"

libraries["spring-test"] = "org.springframework:spring-test:${versions["spring"]}"

libraries["hamcrest-core"] = "org.hamcrest:hamcrest-core:1.3"

libraries["com.eclipsesource.restfuse"] = "com.restfuse:com.eclipsesource.restfuse:1.0.0"

libraries["httpunit"] = "httpunit:httpunit:1.7"

libraries["xmlunit-core"] = "org.xmlunit:xmlunit-core:2.3.0"

// These four are all for Spock.
libraries["spock-core"] = "org.spockframework:spock-core:1.0-groovy-2.4"

libraries["groovy-all"] = "org.codehaus.groovy:groovy-all:2.4.7"

// In Spock, allows mocking of classes (in addition to interfaces).
libraries["cglib-nodep"] = "cglib:cglib-nodep:3.2.4"

// In Spock, allows mocking of classes without default constructor (together with CGLIB).
libraries["objenesis"] = "org.objenesis:objenesis:2.4"

////////////////////////////////////////// Other //////////////////////////////////////////

// See https://github.com/coverity/coverity-security-library
libraries["coverity-escapers"] = "com.coverity.security:coverity-escapers:1.1.1"

libraries["bounce"] = "org.bounce:bounce:0.14"

libraries["imgscalr-lib"] = "org.imgscalr:imgscalr-lib:4.2"

libraries["httpclient"] = "org.apache.httpcomponents:httpclient:4.5.1"

libraries["httpcore"] = "org.apache.httpcomponents:httpcore:4.4.4"

libraries["httpmime"] = "org.apache.httpcomponents:httpmime:4.5.1"

// Old and crufty. Only used by TdsMonitor in :ui. Can we switch to Guava caches?
libraries["ehcache-core"] = "net.sf.ehcache:ehcache-core:2.6.2"

libraries["jcip-annotations"] = "net.jcip:jcip-annotations:1.0"

libraries["jdom2"] = "org.jdom:jdom2:2.0.4"

libraries["je"] = "com.sleepycat:je:18.3.12"

libraries["jna"] = "net.java.dev.jna:jna:4.2.2"

libraries["joda-time"] = "joda-time:joda-time:2.8.1"

libraries["jsoup"] = "org.jsoup:jsoup:1.11.2"

libraries["protobuf-java"] = "com.google.protobuf:protobuf-java:3.5.0"

libraries["quartz"] = "org.quartz-scheduler:quartz:2.3.2"

libraries["visad"] = "edu.wisc.ssec:visad:2.0-20130124"

libraries["jcommander"] = "com.beust:jcommander:1.35"

libraries["commons-lang3"] = "org.apache.commons:commons-lang3:3.3.2"

libraries["guava"] = "com.google.guava:guava:27.0.1-jre"

libraries["jj2000"] = "edu.ucar:jj2000:5.3"

libraries["xz"] = "org.tukaani:xz:1.0"

libraries["jcommon"] = "org.jfree:jcommon:1.0.23"

libraries["jfreechart"] = "org.jfree:jfreechart:1.0.19"

libraries["jgoodies-forms"] = "com.jgoodies:jgoodies-forms:1.6.0"

libraries["commons-fileupload"] = "commons-fileupload:commons-fileupload:1.3.3"

libraries["commons-io"] = "commons-io:commons-io:2.4"

libraries["commons-compress"] = "org.apache.commons:commons-compress:1.8.1"

libraries["oro"] = "oro:oro:2.0.8"

libraries["ncwms"] = dependencies.create("uk.ac.rdg.resc:ncwms:1.2.tds.4.6.14") {
    // This is an external dependency on an old artifact of ours.
    // The "cdm" artifact that we build in this project will take its place.
    // This needs to be a local exclusion; globally excluding "edu.ucar:cdm" would be very bad.
    exclude group: 'edu.ucar', module: 'cdm'  // version "4.6.1"
}

libraries["javax.servlet-api"] = "javax.servlet:javax.servlet-api:3.1.0"

libraries["taglibs-standard-impl"] = "org.apache.taglibs:taglibs-standard-impl:1.2.5"

libraries["validation-api"] = "javax.validation:validation-api:1.0.0.GA"

libraries["hibernate-validator"] = "org.hibernate:hibernate-validator:4.3.2.Final"

libraries["jaxen"] = "jaxen:jaxen:1.1.4"

libraries["threddsIso"] = "EDS:threddsIso:2.2.12"

libraries["aws-java-sdk-s3"] = dependencies.create("com.amazonaws:aws-java-sdk-s3:1.11.236") {
    // exclude jackson deps so that they can be overridden 
    // with 2.7.x deps to address security issue. See
    // https://github.com/aws/aws-sdk-java/issues/1159
    // as of the time these were added, the versions of these were:
    // jackson-core: 2.6.7
    // jackson-annotations: 2.6.0
    // jackson-databind: 2.6.7.1
    exclude group: 'com.fasterxml.jackson.core', module: 'jackson-core'
    exclude group: 'com.fasterxml.jackson.core', module: 'jackson-annotations'
    exclude group: 'com.fasterxml.jackson.core', module: 'jackson-databind'
}

// replace the jackson.core libs that were excluded from aws-java-sdk-s3
libraries["jackson-core"] = "com.fasterxml.jackson.core:jackson-core:2.10.0"
libraries["jackson-annotations"] = "com.fasterxml.jackson.core:jackson-annotations:2.10.0"
libraries["jackson-databind"] = "com.fasterxml.jackson.core:jackson-databind:2.10.0"

libraries["ncsos"] = dependencies.create("com.asascience:ncsos:1.4.3") {
    // This is an external TDS plugin that depends on an old
    // thredds-parent artifact of ours (version 4.5.3).
    // Need to exclude old artifacts used in the build
    exclude group: 'edu.ucar', module: 'netcdf4'
    exclude group: 'edu.ucar', module: 'tds'
}

//////////////////////////// Transitive dependency replacements and exclusions ////////////////////////////

allprojects {  // Doesn't apply any plugins: safe to run closure on all projects.
    // Executes the given closure against all objects in this collection, and any objects subsequently added to this
    // collection. See org.gradle.api.DomainObjectCollection.all(Closure)
    configurations.all {
        // Replace every instance of "commons-logging" in the dependency tree with "jcl-over-slf4j".
        // This effectively converts every jcl call to an slf4j call.
        // "commons-logging" is dragged in by spring-core and httpclient.
        resolutionStrategy.eachDependency { DependencyResolveDetails dep ->
            if (dep.requested.name == 'commons-logging') {
                dep.useTarget libraries["jcl-over-slf4j"]
            }
        }

        // STAX comes with Java 1.6+
        // Dragged in by xmlbeans
        exclude group: 'stax', module: 'stax-api'

        // Xerces comes with Java 1.6+
        // This SHOULD be okay, but see http://stackoverflow.com/questions/1167757
        // Dragged in by 52n-oxf-xmlbeans
        exclude group: 'xerces', module: 'xercesImpl'

        // This is an old version of the servlet API: v2. We're using v3.
        // Dragged in by httpunit.
        exclude group: 'javax.servlet', module: 'servlet-api'

        // Includes a lot of classes that already come with Java 1.6+
        // and we don't use the "tidy" functionality (i.e. HTML pretty printing) anyway.
        // Dragged in by httpunit.
        exclude group: 'jtidy', module: 'jtidy'
    }
}
