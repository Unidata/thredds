<?xml version="1.0"?>
<project name="cdm" default="makeMain" basedir=".">
  <echo>basedir=${basedir}</echo>
  <tstamp>
    <format property="build.time" pattern="yyyy-MM-dd HH:mm:ss" timezone="GMT"/>
    <format property="build.time.number" pattern="yyyyMMdd.HHmm" timezone="GMT"/>
  </tstamp>

  <property name="release.version" value="4.3"/>
  <!-- TeamCity sets "build.number" property to value of its build counter. -->
  <property name="build.number" value="3" />
  <property name="build.number" value="${build.time.number}" />
  <property name="release.version.minor" value="${release.version}.${build.number}"/>

  <property name="build.debug" value="on"/>
  <property name="build.release" value="false"/>

  <!-- Load environment and user properties. -->
  <property environment="env"/>
  <property file="${user.home}/build.properties"/>

  <!-- Directories for releasing to FTP or WWW site, defaults are John's.
       Override by adding to build.properties file.
    -->
  <property name="uni.ftp.dir" value="O:"/>
  <property name="uni.www.dir" value="Z:"/>

  <property name="root.dir" location="${basedir}"/>
  <property name="src.dir" location="${root.dir}/src/main/java"/>
  <property name="timingSrc.dir" location="${root.dir}/src/timing/java"/>
  <property name="commonSrc.dir" location="${root.dir}/../common/src/main/java"/>
  <property name="resources.dir" location="${root.dir}/src/main/resources"/>
  <property name="doc.dir" location="${root.dir}/doc"/>
  <property name="lib.dir" location="${root.dir}/../lib"/>

  <property name="build.dir" value="${root.dir}/target"/>
  <property name="build.classes.dir" value="${build.dir}/classes"/>
  <property name="javadoc.dir" value="${build.dir}/javadoc"/>
  <property name="javadocAll.dir" value="${build.dir}/javadocAll"/>

  <property name="release.library.dir" value="${uni.ftp.dir}/pub/netcdf-java/v${release.version}/"/>
  <property name="release.doc.dir" value="${uni.ftp.dir}/pub/netcdf-java/v${release.version}/"/>
  <property name="release.html.dir" value="${uni.www.dir}/content/software/netcdf-java/v${release.version}/"/>
  <property name="release.schema.dir" value="${uni.www.dir}/schema"/>
  <property name="release.javadoc.dir" value="${uni.www.dir}/content/software/netcdf-java/v${release.version}/javadoc/"/>
  <property name="release.javadocAll.dir" value="${uni.www.dir}/content/software/netcdf-java/v${release.version}/javadocAll/"/>
  <property name="webstart_dir" value="${uni.www.dir}/content/software/netcdf-java/v${release.version}/webstart"/>

  <property name="bdb.jar" value="je-4.0.71.jar"/>
  <property name="bounce.jar" value="bounce-0.14.jar"/>
  <property name="bufr.jar" value="bufr-4.3.jar"/>
  <property name="ehcache.jar" value="ehcache-1.6.0.jar"/>
  <property name="grib.jar" value="grib-4.3.jar"/>
  <property name="httpclient3.jar" value="commons-httpclient-3.1.jar"/>
  <property name="commons-logging.jar" value="jcl-over-slf4j-1.6.4.jar"/>
  <property name="http-codec.jar" value="commons-codec-1.3.jar"/>
  <property name="joda.jar" value="joda-time-2.0.jar"/>
  <property name="jdom.jar" value="jdom.jar"/>
  <property name="jfreechart.jar" value="jfreechart-1.0.12.jar"/>
  <property name="jcommon.jar" value="jcommon-1.0.15.jar"/>
  <property name="guiBuilder.jar" value="forms_rt.jar"/>
  <property name="jgoodies.jar" value="forms-1.0.7.jar"/>
  <property name="junit.jar" value="junit-4.5.jar"/>
  <property name="easymock.jar" value="easymock-2.5.2.jar"/>
  <property name="loggingAPI.jar" value="slf4j-api-1.6.4.jar"/>
  <property name="logging-minimal.jar" value="slf4j-jdk14-1.6.4.jar"/>
  <property name="logging-maximal.jar" value="slf4j-log4j12-1.6.4.jar"/>
  <property name="log4j.jar" value="log4j-1.2.16.jar"/>
  <!-- property name="lucene.jar" value="lucene.jar"/ -->
  <property name="opendap.jar" value="opendap-4.3.jar"/>
  <property name="protobuf.jar" value="protobuf-java-2.4.1.jar"/>
  <property name="quartz.jar" value="quartz-2.1.1.jar"/>
  <property name="resourcesOptional.jar" value="resourcesOptional.jar"/>
  <property name="spring-aop.jar" value="org.springframework.aop-3.0.5.RELEASE.jar"/>
  <property name="spring-asm.jar" value="org.springframework.asm-3.0.5.RELEASE.jar"/>
  <property name="spring-beans.jar" value="org.springframework.beans-3.0.5.RELEASE.jar"/>
  <property name="spring-context.jar" value="org.springframework.context-3.0.5.RELEASE.jar"/>
  <property name="spring-core.jar" value="org.springframework.core-3.0.5.RELEASE.jar"/>
  <property name="spring-expression.jar" value="org.springframework.expression-3.0.5.RELEASE.jar"/>
  <property name="threeten.jar" value="threeten-core-0.6.3.jar"/>
  <property name="visadCdm.jar" value="visadCdm-4.3.jar"/>

  <!-- source -->
  <path id="sourcepath">
    <pathelement location="${src.dir}"/>
    <!--pathelement location="${commonSrc.dir}"/-->
  </path>

  <!-- Libraries -->
  <fileset id="compile.libraries" dir="${lib.dir}">
    <include name="external/${bdb.jar}"/>
    <include name="external/${ehcache.jar}"/>
    <include name="external/${httpclient3.jar}"/>
    <include name="external/${jdom.jar}"/>
    <include name="external/${joda.jar}"/>
    <include name="external/${loggingAPI.jar}"/>
    <include name="external/${protobuf.jar}"/>
    <include name="external/${quartz.jar}"/>
  </fileset>

  <path id="compile.classpath">
    <fileset refid="compile.libraries"/>
  </path>

  <!-- targets -->
  <target name="init">
    <mkdir dir="${build.classes.dir}"/>
    <echo message="Initialize ${ant.project.name}"/>
  </target>

  <target name="clean" description="Deletes all files that are generated by the build.">
    <delete dir="${build.dir}" failonerror="false"/>
  </target>

  <target name="release-settings">
    <condition property="build.debuglevel" value="lines">
      <istrue value="${build.release}"/>
    </condition>
    <property name="build.debuglevel" value="lines,vars,source"/>
    <!-- echo>release.build=${release.build}</echo>
       <echo>build.debuglevel=${build.debuglevel}</echo -->
  </target>

  <!-- $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$  -->
  <!-- core library -->
  <patternset id="sources-core">
    <include name="ucar/ma2/*.java"/>
    <include name="ucar/nc2/*.java"/>
    <include name="ucar/nc2/iosp/netcdf3/N3iosp.java"/>
    <include name="ucar/nc2/util/DebugFlagsImpl.java"/>
    <include name="ucar/nc2/util/TimeSocket.java"/>
    <include name="ucar/nc2/util/**/*.java"/>
  </patternset>

  <target name="compile-core" depends="release-settings" description="library compile">
    <delete dir="${build.classes.dir}" failonerror="false"/>
    <mkdir dir="${build.classes.dir}"/>

    <javac destdir="${build.classes.dir}" debug="${build.debug}" debuglevel="${build.debuglevel}" includeAntRuntime="false">
      <src refid="sourcepath"/>
      <patternset refid="sources-core"/>
      <classpath refid="compile.classpath"/>
    </javac>
  </target>

  <!-- make core library jars -->
  <property name="core.dir" value="${build.dir}/core"/>
  <property name="jarCore" value="ncCore-${release.version}.jar"/>
  <target name="makeCore" depends="compile-core" description="make core library jar">
    <delete dir="${core.dir}" failonerror="false"/>
    <mkdir dir="${core.dir}"/>
    <unzip dest="${core.dir}">
      <fileset dir="${lib.dir}">
        <include name="external/${loggingAPI.jar}"/>
        <include name="external/${logging-minimal.jar}"/>
      </fileset>
    </unzip>

    <copy file="README.TEMPLATE" tofile="${build.dir}/README" overwrite="true">
      <filterset>
        <filter token="BUILDTIME" value="${build.time}"/>
        <filter token="VERSION" value="${release.version}"/>
        <filter token="VERSION.MINOR" value="${release.version.minor}"/>
      </filterset>
    </copy>

    <copy file="CHANGES.txt" tofile="${build.dir}/CHANGES" overwrite="true">
      <filterset>
        <filter token="BUILDTIME" value="${build.time}"/>
        <filter token="VERSION" value="${release.version}"/>
        <filter token="VERSION.MINOR" value="${release.version.minor}"/>
      </filterset>
    </copy>

    <jar jarfile="${build.dir}/${jarCore}" index="true">
      <fileset dir="${build.classes.dir}"/>
      <fileset dir="${build.dir}" includes="README"/>
      <fileset dir="${build.dir}" includes="CHANGES"/>
      <fileset dir="${core.dir}"/>

      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-On" value="${build.time}"/>
        <attribute name="Implementation-Title" value="NetCDF-Java-MinimalLibrary"/>
        <attribute name="Implementation-Version" value="${release.version.minor}"/>
        <attribute name="Implementation-Vendor" value="UCAR/Unidata"/>
      </manifest>

    </jar>
  </target>

  <!-- $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$  -->
  <!-- main library  -->

  <patternset id="sources">
    <include name="thredds/catalog/**/*.java"/>
    <include name="thredds/catalog2/**/*.java"/>
    <include name="thredds/filesystem/**/*.java"/>
    <include name="thredds/inventory/**/*.java"/>
    <include name="thredds/util/**/*.java"/>
    <!-- The following includes, to ***, are needed by TDS. -->
    <include name="thredds/cataloggen/**/*.java"/>
    <include name="thredds/crawlabledataset/**/*.java"/>
    <include name="thredds/wcs/**/*.java"/>
    <!-- *** -->
    <include name="ucar/**/*.java"/>
    <exclude name="ucar/nc2/ft2/*"/>
    <exclude name="ucar/nc2/jni/**"/>
    <exclude name="ucar/nc2/util/reflect/*"/>
    <!--exclude name="ucar/unidata/geoloc/ogc/*"/--> <!-- Also needed by TDS. -->
    <!-- include name="dods/**/*.java"/ -->
  </patternset>

  <target name="compile" depends="release-settings" description="library compile">
    <delete dir="${build.classes.dir}" failonerror="false"/>
    <mkdir dir="${build.classes.dir}"/>

    <javac destdir="${build.classes.dir}" debug="${build.debug}" debuglevel="${build.debuglevel}" includeAntRuntime="false">
      <src refid="sourcepath"/>
      <patternset refid="sources"/>
      <classpath refid="compile.classpath"/>
    </javac>
  </target>

  <!-- make library jars -->
  <property name="jarMain" value="netcdf-${release.version}.jar"/>
  <target name="makeMain" depends="compile" description="make library jars">
    <copy file="README.TEMPLATE" tofile="${build.dir}/README" overwrite="true">
      <filterset>
        <filter token="BUILDTIME" value="${build.time}"/>
        <filter token="VERSION" value="${release.version}"/>
        <filter token="VERSION.MINOR" value="${release.version.minor}"/>
      </filterset>
    </copy>

    <copy file="CHANGES.txt" tofile="${build.dir}/CHANGES" overwrite="true">
      <filterset>
        <filter token="BUILDTIME" value="${build.time}"/>
        <filter token="VERSION" value="${release.version}"/>
        <filter token="VERSION.MINOR" value="${release.version.minor}"/>
      </filterset>
    </copy>

    <jar jarfile="${build.dir}/${jarMain}" index="true">
      <fileset dir="${build.classes.dir}">
        <!-- exclude name="thredds/catalog2/**"/-->
        <!-- exclude name="thredds/wcs/**"/ -->
        <!-- exclude name="ucar/unidata/geoloc/ogc/**"/ -->
      </fileset>
      <fileset dir="${build.dir}" includes="README"/>
      <fileset dir="${build.dir}" includes="CHANGES"/>

      <fileset dir="${resources.dir}">
        <include name="resources/nj22/**"/>
        <include name="resources/thredds/**"/>
        <include name="resources/wmo/**"/>
      </fileset>

      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-On" value="${build.time}"/>
        <attribute name="Implementation-Title" value="NetCDF-Java-Library"/>
        <attribute name="Implementation-Version" value="${release.version.minor}"/>
        <attribute name="Implementation-Vendor" value="UCAR/Unidata"/>
      </manifest>

    </jar>

  </target>

  <property name="jarMainComplete" value="netcdfAll-${release.version}.jar"/>
  <property name="main.dir" value="${build.dir}/main"/>
  <target name="makeMainComplete" depends="makeMain" description="make netcdfAll jar">
    <delete dir="${main.dir}" failonerror="false"/>
    <mkdir dir="${main.dir}"/>
    <unzip dest="${main.dir}">
      <fileset dir="${lib.dir}">
        <include name="release/${bdb.jar}"/>
        <include name="release/${bufr.jar}"/>
        <include name="release/${ehcache.jar}"/>
        <include name="release/${grib.jar}"/>
        <include name="external/${jdom.jar}"/>
        <include name="external/${joda.jar}"/>
        <include name="external/${httpclient3.jar}"/>
        <include name="external/${http-codec.jar}"/>
        <include name="external/${commons-logging.jar}"/>
        <include name="external/${loggingAPI.jar}"/>
        <include name="external/${logging-minimal.jar}"/>
        <include name="release/${opendap.jar}"/>
        <include name="external/${protobuf.jar}"/>
        <include name="external/${quartz.jar}"/>
        <include name="release/${visadCdm.jar}"/>
      </fileset>
    </unzip>
    <unzip dest="${main.dir}">
      <fileset dir="${build.dir}">
        <include name="${jarMain}"/>
      </fileset>
    </unzip>

    <jar jarfile="${build.dir}/${jarMainComplete}" index="false" duplicate="preserve">
      <fileset dir="${main.dir}"/>

      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-On" value="${build.time}"/>
        <attribute name="Implementation-Title" value="NetCDF-Java-Library Complete"/>
        <attribute name="Implementation-Version" value="${release.version.minor}"/>
        <attribute name="Implementation-Vendor" value="UCAR/Unidata"/>
      </manifest>
    </jar>

    <copy todir="${lib.dir}/release" overwrite="true">
      <fileset dir="${build.dir}" includes="${jarMainComplete}"/>
    </copy>
  </target>

  <property name="testJar.dir" value="${build.dir}/testJar"/>
  <target name="makeTestJar" description="make test jar">
    <delete dir="${testJar.dir}" failonerror="false"/>
    <mkdir dir="${testJar.dir}"/>
    <unzip dest="${testJar.dir}">
      <fileset dir="${lib.dir}">
        <include name="external/${ehcache.jar}"/>
        <include name="external/${loggingAPI.jar}"/>
        <include name="external/${logging-minimal.jar}"/>
      </fileset>
    </unzip>
    <unzip dest="${testJar.dir}">
      <fileset dir="${build.dir}">
        <include name="${jarMain}"/>
      </fileset>
    </unzip>

    <jar jarfile="${build.dir}/test.jar" index="true" duplicate="preserve">
      <fileset dir="${testJar.dir}"/>

      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-On" value="${build.time}"/>
        <attribute name="Implementation-Title" value="test Jar"/>
        <attribute name="Implementation-Version" value="${release.version.minor}"/>
        <attribute name="Implementation-Vendor" value="UCAR/Unidata"/>
      </manifest>
    </jar>
  </target>

  <property name="zip.dir" value="${build.dir}/zip"/>
  <property name="uiZip.dir" value="${build.dir}/uiZip"/>

  <!-- $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$  -->
  <!-- idv library  -->

  <property name="jarIdv" value="ncIdv.jar"/>
  <property name="idv.dir" value="${build.dir}/idv"/>
  <target name="makeIDVjar" depends="makeMain" description="create jar for idv">
    <mkdir dir="${idv.dir}"/>
    <unzip dest="${idv.dir}">
      <fileset dir="${lib.dir}">
        <include name="release/${bufr.jar}"/>
        <include name="release/${grib.jar}"/>
        <include name="release/${opendap.jar}"/>
        <include name="external/${jdom.jar}"/>
        <include name="external/${httpclient3.jar}"/>
        <include name="external/${http-codec.jar}"/>
        <include name="external/${commons-logging.jar}"/>
        <include name="external/${loggingAPI.jar}"/>
        <include name="external/${logging-minimal.jar}"/>
        <include name="external/${protobuf.jar}"/>
        <!-- include name="external/${bdb.jar}"/ -->
      </fileset>
    </unzip>
    <unzip dest="${idv.dir}">
      <fileset dir="${build.dir}">
        <include name="${jarMain}"/>
      </fileset>
    </unzip>

    <jar jarfile="${build.dir}/${jarIdv}" index="true" duplicate="preserve">
      <fileset dir="${build.dir}" includes="README"/>
      <fileset dir="${build.dir}" includes="CHANGES"/>
      <fileset dir="${idv.dir}"/>

      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-On" value="${build.time}"/>
        <attribute name="Implementation-Title" value="NetCDF-Java-IDV-library"/>
        <attribute name="Implementation-Version" value="${release.version.minor}"/>
        <attribute name="Implementation-Vendor" value="UCAR/Unidata"/>
      </manifest>
    </jar>
  </target>


  <!-- $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$  -->
  <!-- make javadoc -->
  <property name="jarJavadoc" value="javadoc-${release.version}.jar"/>
  <target name="javadoc" description="make the javadocs">
    <mkdir dir="${javadoc.dir}"/>
    <javadoc Doctitle="NetCDF-Java ${release.version} API" Use="true" Windowtitle="NetCDF-Java ${release.version} Public API"
             maxmemory="256m" sourcepathref="sourcepath" destdir="${javadoc.dir}" public="true" source="1.5">
      <classpath refid="compile.classpath"/>

      <package name="thredds.catalog"/>
      <package name="ucar.ma2"/>
      <package name="ucar.nc2"/>
      <package name="ucar.nc2.constants"/>
      <package name="ucar.nc2.dataset"/>
      <package name="ucar.nc2.dataset.conv"/>
      <package name="ucar.nc2.dataset.transform"/>
      <package name="ucar.nc2.dt"/>
      <package name="ucar.nc2.ft"/>
      <package name="ucar.nc2.units"/>
      <package name="ucar.nc2.util"/>
      <package name="ucar.unidata.geoloc"/>
      <package name="ucar.unidata.geoloc.projection"/>
      <package name="ucar.unidata.geoloc.vertical"/>
      <package name="ucar.unidata.io"/>
      <package name="ucar.unidata.util"/>
    </javadoc>

    <jar jarfile="${build.dir}/${jarJavadoc}" index="true" duplicate="preserve">
      <fileset dir="${javadoc.dir}"/>

      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-On" value="${build.time}"/>
        <attribute name="Implementation-Title" value="Public Javadoc for NetCDF-Java-library "/>
        <attribute name="Implementation-Version" value="${release.version.minor}"/>
        <attribute name="Implementation-Vendor" value="UCAR/Unidata"/>
      </manifest>
    </jar>
  </target>


  <property name="jarJavadocAll" value="javadocAll-${release.version}.jar"/>
  <target name="javadocAll" description="make all javadocs">
    <mkdir dir="${javadocAll.dir}"/>
    <javadoc Doctitle="NetCDF-Java ${release.version} API" Use="true" Windowtitle="NetCDF-Java ${release.version} Public and Private API"
             maxmemory="256m" sourcepathref="sourcepath" destdir="${javadocAll.dir}" protected="true" source="1.5">
      <classpath refid="compile.classpath"/>
      <classpath refid="compileUI.classpath"/>
      <package name="dods.*"/>
      <package name="thredds.*"/>
      <package name="ucar.*"/>
      <excludepackage name="ucar/nc2/dataset/grid"/>
      <excludepackage name="ucar/nc2/stream/**"/>
      <excludepackage name="ucar/nc2/jni"/>
      <excludepackage name="ucar/nc2/jni/**"/>
      <excludepackage name="ucar/nc2/util/reflect"/>
      <excludepackage name="thredds/catalog2/**"/>
      <!-- excludepackage name="ucar/unidata/geoloc/ogc"/>
      <excludepackage name="thredds/wcs/**" / -->
    </javadoc>

    <jar jarfile="${build.dir}/${jarJavadocAll}" index="true" duplicate="preserve">
      <fileset dir="${javadocAll.dir}"/>

      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-On" value="${build.time}"/>
        <attribute name="Implementation-Title" value="All Javadoc for NetCDF-Java-library "/>
        <attribute name="Implementation-Version" value="${release.version.minor}"/>
        <attribute name="Implementation-Vendor" value="UCAR/Unidata"/>
      </manifest>
    </jar>
  </target>

  <!-- release user manual -->
  <target name="releaseDoc" description="Release user manual">
    <copy todir="${release.doc.dir}" overwrite="true">
      <fileset dir="${doc.dir}" includes="NetcdfJavaUserManual-${release.version}.doc"/>
      <fileset dir="${doc.dir}" includes="NetcdfJavaUserManual-${release.version}.pdf"/>
    </copy>
    <copy todir="${release.html.dir}" overwrite="true">
      <fileset dir="${doc.dir}" includes="NetcdfJavaUserManual-${release.version}.htm"/>
    </copy>
  </target>

  <!-- $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$  -->
  <!-- UI -->
  <property name="srcUI.dir" location="${root.dir}/../ui/src/main/java"/>
  <property name="resourcesUI.dir" location="${root.dir}/../ui/src/main/resources"/>

  <fileset id="compileUI.libraries" dir="${lib.dir}">
    <include name="release/${bufr.jar}"/>
    <include name="release/${grib.jar}"/>
    <include name="release/${opendap.jar}"/>
    <include name="release/${visadCdm.jar}"/>
    <include name="external/${bounce.jar}"/>
    <include name="external/${jgoodies.jar}"/>
    <include name="external/${jfreechart.jar}"/>
    <include name="external/${jcommon.jar}"/>
    <include name="external/${spring-beans.jar}"/>
    <include name="external/${spring-context.jar}"/>
    <include name="external/${spring-core.jar}"/>
  </fileset>

  <path id="compileUI.classpath">
    <fileset refid="compileUI.libraries"/>
  </path>

  <fileset id="runtimeUI.libraries" dir="${lib.dir}">
    <include name="external/${http-codec.jar}"/>
    <include name="external/${commons-logging.jar}"/>
    <include name="external/${logging-minimal.jar}"/>
    <include name="external/${spring-aop.jar}"/>
    <include name="external/${spring-asm.jar}"/>
    <include name="external/${spring-expression.jar}"/>
  </fileset>

  <path id="runtimeUI.classpath">
    <fileset refid="compile.libraries"/>
    <fileset refid="compileUI.libraries"/>
    <fileset refid="runtimeUI.libraries"/>
  </path>

  <path id="sourcepathUI">
    <pathelement location="${src.dir}"/>
    <pathelement location="${srcUI.dir}"/>
  </path>

  <target name="compileUI" depends="init, release-settings, compile" description="toolsUI compile">
    <pathconvert property="sourcepath.prop" refid="sourcepath" targetos="windows"/>
    <echo>sourcepath=${sourcepath.prop}</echo>
    <pathconvert property="compileUI.classpath.prop" refid="compileUI.classpath" targetos="windows"/>
    <echo>compileUI.classpath=${compileUI.classpath.prop}</echo>

    <javac destdir="${build.classes.dir}" debug="${build.debug}" debuglevel="${build.debuglevel}" includeAntRuntime="false">
      <src refid="sourcepathUI"/>

      <patternset refid="sources"/>
      <patternset>
        <include name="ucar/nc2/ui/**/*.java"/>
        <include name="thredds/ui/**/*.java"/>
        <exclude name="thredds/ui/catalog/search/*.java"/>
      </patternset>

      <classpath refid="compile.classpath"/>
      <classpath refid="compileUI.classpath"/>
    </javac>

    <!-- Setup runToolsUI script -->
    <pathconvert property="toolsUI.runtime.classpath.prop">
      <path>
        <path location="${build.classes.dir}"/>
        <path location="${resources.dir}"/>
        <path location="${resourcesUI.dir}"/>
        <fileset refid="compile.libraries"/>
        <fileset refid="compileUI.libraries"/>
        <fileset refid="runtimeUI.libraries"/>
      </path>
    </pathconvert>

    <!-- todo Should move template file to src/main/scripts/runToolsUI.sh -->
    <copy file="${root.dir}/runToolsUI.TEMPLATE"
          tofile="${build.dir}/runToolsUI" overwrite="true">
      <filterset>
        <filter token="CLASSPATH" value="${toolsUI.runtime.classpath.prop}"/>
      </filterset>
    </copy>

  </target>

  <property name="jarUI" value="netcdfUI-${release.version}.jar"/>
  <target name="makeUI" depends="compile, compileUI" description="make toolsUI jar">
    <copy file="README.TEMPLATE" tofile="${build.dir}/README" overwrite="true">
      <filterset>
        <filter token="BUILDTIME" value="${build.time}"/>
        <filter token="VERSION" value="${release.version}"/>
        <filter token="VERSION.MINOR" value="${release.version.minor}"/>
      </filterset>
    </copy>

    <copy file="CHANGES.txt" tofile="${build.dir}/CHANGES" overwrite="true">
      <filterset>
        <filter token="BUILDTIME" value="${build.time}"/>
        <filter token="VERSION" value="${release.version}"/>
        <filter token="VERSION.MINOR" value="${release.version.minor}"/>
      </filterset>
    </copy>

    <pathconvert property="ClassPath" refid="runtimeUI.classpath" pathsep=" ">
      <mapper type="flatten"/>
    </pathconvert>
    <echo>ClassPath=${ClassPath}</echo>

    <!-- Ant jar task with index="true" will create JARs hiding any Class-Path: ... entries ! -->
    <jar jarfile="${build.dir}/${jarUI}" duplicate="preserve">
      <fileset dir="${build.dir}" includes="README"/>
      <fileset dir="${build.dir}" includes="CHANGES"/>
      <fileset dir="${build.classes.dir}"/>
      <zipfileset dir="${resources.dir}/resources" prefix="resources"/>
      <zipfileset dir="${resourcesUI.dir}/resources" prefix="resources"/>

      <manifest>
        <attribute name="Main-Class" value="ucar.nc2.ui.ToolsUI"/>
        <attribute name="Class-Path" value="${ClassPath}"/>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-On" value="${build.time}"/>
        <attribute name="Implementation-Title" value="NetCDF-Java-UITools"/>
        <attribute name="Implementation-Version" value="${release.version.minor}"/>
        <attribute name="Implementation-Vendor" value="UCAR/Unidata"/>
      </manifest>

      <indexjars>
        <path refid="compile.classpath"/>
        <path refid="compileUI.classpath"/>
        <pathelement location="${lib.dir}/release/${resourcesOptional.jar}"/>
      </indexjars>

    </jar>

  </target>

  <property name="ncAll" value="netcdfAll-${release.version}.zip"/>
  <target name="makeAllzip" depends="makeMain, makeUI" description="create netcdfAll zip file">
    <copy file="${build.dir}/${jarUI}" todir="${zip.dir}" overwrite="true" preservelastmodified="true"/>
    <copy file="${build.dir}/${jarMain}" todir="${zip.dir}" overwrite="true" preservelastmodified="true"/>

    <!--gather jars for the application and make netcdfAll.zip -->
    <copy todir="${zip.dir}" flatten="true" overwrite="true" preservelastmodified="true">
      <fileset refid="compile.libraries"/>
      <fileset refid="compileUI.libraries"/>
      <fileset refid="runtimeUI.libraries"/>
      <fileset file="${lib.dir}/release/${resourcesOptional.jar}"/>
      <fileset file="${lib.dir}/external/${log4j.jar}"/>
      <fileset file="${lib.dir}/external/${logging-maximal.jar}"/>
    </copy>
    <zip destfile="${build.dir}/${ncAll}" basedir="${zip.dir}"/>

  </target>

  <property name="toolsUI" value="toolsUI-${release.version}.jar"/>
  <target name="makeToolsUI" depends="makeMain, makeUI" description="create toolsUI jar file">
    <!--unzip all so we can make uiAll -->
    <mkdir dir="${uiZip.dir}"/>
    <unzip dest="${uiZip.dir}">
      <fileset refid="compile.libraries"/>
      <fileset refid="compileUI.libraries"/>
      <fileset refid="runtimeUI.libraries"/>
      <fileset file="${build.dir}/${jarUI}"/>
      <fileset file="${lib.dir}/release/${resourcesOptional.jar}"/>
    </unzip>

    <jar jarfile="${build.dir}/${toolsUI}" index="false" duplicate="preserve">
      <fileset dir="${build.dir}" includes="README"/>
      <fileset dir="${build.dir}" includes="CHANGES"/>
      <fileset dir="${uiZip.dir}"/>

      <manifest>
        <attribute name="Main-Class" value="ucar.nc2.ui.ToolsUI"/>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-On" value="${build.time}"/>
        <attribute name="Implementation-Title" value="NetCDF-Java-ToolsUI"/>
        <attribute name="Implementation-Version" value="${release.version.minor}"/>
        <attribute name="Implementation-Vendor" value="UCAR/Unidata"/>
      </manifest>
    </jar>

  </target>

  <target name="makeAll" depends="makeCore, makeMain, makeMainComplete, makeUI, makeAllzip, makeToolsUI"
          description="create all files"/>

  <property name="jarResourcesOptional" value="resourcesOptional-${release.version}.jar"/>
  <target name="makeResourcesOptional" description="make resourcesOptional.jar">

    <jar jarfile="${build.dir}/${jarResourcesOptional}" index="true" duplicate="preserve">
      <zipfileset dir="${resources.dir}/optional" prefix="optional"/>

      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-On" value="${build.time}"/>
        <attribute name="Implementation-Title" value="NetCDF-Java Optional Resources"/>
        <attribute name="Implementation-Version" value="${release.version.minor}"/>
        <attribute name="Implementation-Vendor" value="UCAR/Unidata"/>
      </manifest>

    </jar>

  </target>

  <target name="releaseResourcesOptionalInternal" depends="makeResourcesOptional">
    <copy todir="${lib.dir}/release" overwrite="true" preservelastmodified="true">
      <fileset dir="${build.dir}" includes="${jarResourcesOptional}"/>
    </copy>
  </target>

  <!-- $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$  -->
  <target name="dist" depends="makeAll, makeIDVjar, thredds, javadoc, javadocAll"
          description="create a full distribution"/>

  <target  name="cleanReleaseInternal" depends="clean, makeAll, makeIDVjar, thredds" />

  <!-- release library for thredds build  -->
  <target name="thredds" depends="makeMain" description="internal release to lib">
    <copy todir="${lib.dir}/release" overwrite="true">
      <fileset dir="${build.dir}" includes="${jarMain}"/>
    </copy>
  </target>

  <!-- release library -->
  <target name="release" description="Release library and source jar files to release directory: do 'ant dist' first">
    <copy todir="${release.html.dir}" overwrite="true">
      <fileset file="${build.dir}/README"/>
      <fileset file="${build.dir}/CHANGES"/>
    </copy>

    <copy todir="${release.library.dir}" overwrite="true">
      <fileset dir="${build.dir}" includes="${jarCore}"/>
      <fileset dir="${build.dir}" includes="${jarMain}"/>
      <fileset dir="${build.dir}" includes="${jarMainComplete}"/>
      <fileset dir="${build.dir}" includes="${jarIdv}"/>
      <fileset dir="${build.dir}" includes="${jarUI}"/>
      <fileset dir="${build.dir}" includes="${toolsUI}"/>
      <fileset dir="${build.dir}" includes="${ncAll}"/>
      <fileset dir="${build.dir}" includes="${jarJavadoc}"/>
      <fileset dir="${build.dir}" includes="${jarJavadocAll}"/>
    </copy>

    <checksum>
      <fileset dir="${release.library.dir}">
        <include name="*.jar"/>
        <include name="*.zip"/>
      </fileset>
    </checksum>

    <copy todir="${lib.dir}/release" overwrite="true">
      <fileset dir="${build.dir}" includes="${jarMain}"/>
      <fileset dir="${build.dir}" includes="${jarIdv}"/>
    </copy>

    <copy todir="${release.javadoc.dir}" overwrite="true">
      <fileset dir="${javadoc.dir}"/>
    </copy>
    <copy todir="${release.javadocAll.dir}" overwrite="true">
      <fileset dir="${javadocAll.dir}"/>
    </copy>

  </target>

  <target name="releaseInvCatSchema" description="Release InvCatalog schema to web.">
    <copy todir="${release.schema.dir}/thredds" overwrite="true">
      <fileset file="${resources.dir}/resources/thredds/schemas/InvCatalog.1.0.4.xsd"/>
    </copy>
  </target>

  <!-- netcdfUI webstart release -->
  <target name="releaseWebstart" description="make webstart release; do dist or release first">
    <copy file="${root.dir}/netCDFtools.jnlp" toDir="${webstart_dir}" overwrite="true" />

    <signjar alias="idv" jar="${build.dir}/${jarUI}" keystore="${keystore}" signedjar="${webstart_dir}/netcdfUI.jar"
             storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/external/${bounce.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/bounce.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/release/${bufr.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/bufr.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/external/${ehcache.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/ehcache.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/release/${grib.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/grib.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/external/${joda.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/joda.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/external/${jdom.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/jdom.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/external/${jgoodies.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/jgoodies.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/external/${http-codec.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/codec.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/external/${httpclient3.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/httpclient.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/external/${commons-logging.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/httplogging.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/external/${loggingAPI.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/loggingAPI.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/external/${logging-minimal.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/logging.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/external/${bdb.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/bdb.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/external/${spring-aop.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/spring-aop.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/external/${spring-asm.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/spring-asm.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/external/${spring-aop.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/spring-aop.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/external/${spring-beans.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/spring-beans.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/external/${spring-context.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/spring-context.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/external/${spring-core.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/spring-core.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/external/${spring-expression.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/spring-expression.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/release/${opendap.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/opendap.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/external/${protobuf.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/protobuf.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/external/${quartz.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/quartz.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/release/${resourcesOptional.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/resourcesOptional.jar" storepass="${keystore.password}"/>
    <signjar alias="idv" jar="${lib.dir}/release/${visadCdm.jar}" keystore="${keystore}"
             signedjar="${webstart_dir}/visadCdm.jar" storepass="${keystore.password}"/>
  </target>

  <!-- $$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$  -->
  <property name="test.src.dir" location="${root.dir}/src/test/java"/>
  <property name="test.dir" value="${build.dir}/test"/>
  <property name="test.classes.dir" value="${test.dir}/classes"/>
  <property name="test.reports.dir" value="${test.dir}/reports"/>
  <property name="test.classes.jar" value="cdmTestClasses.jar"/>

  <path id="test.sourcepath">
    <path refid="sourcepathUI"/>
    <pathelement location="${test.src.dir}"/>
  </path>

  <fileset id="test.libraries" dir="${lib.dir}">
    <include name="external/${junit.jar}"/>
    <include name="external/${easymock.jar}"/>
  </fileset>

  <path id="test.classpath">
    <pathelement location="${build.classes.dir}"/>
    <pathelement location="${resources.dir}"/>
    <pathelement location="${resourcesUI.dir}"/>
    <fileset refid="compile.libraries"/>
    <fileset refid="compileUI.libraries"/>
    <fileset refid="runtimeUI.libraries"/>
    <fileset refid="test.libraries"/>
  </path>
  <path id="runtime.test.classpath">
    <pathelement location="${test.classes.dir}" />
    <path  refid="test.classpath" />
  </path>

  <path id="test.classpath.release">
    <pathelement location="${lib.dir}/release/${jarMain}"/>
    <fileset refid="compile.libraries"/>
    <fileset refid="compileUI.libraries"/>
    <fileset refid="runtimeUI.libraries"/>
    <fileset refid="test.libraries"/>
  </path>
  <path id="runtime.test.classpath.release">
    <pathelement location="${lib.dir}/release/${test.classes.jar}" />
    <path refid="test.classpath.release" />
  </path>


  <target name="releaseInternal-testClasses" depends="test-setup"
          description="internal release to lib of test classes">
    <copy todir="${lib.dir}/release" overwrite="true">
      <fileset dir="${build.dir}" includes="${test.classes.jar}" />
    </copy>
  </target>

  <target name="test-setup" depends="compile" description="compile and package test classes">
    <mkdir dir="${test.dir}"/>
    <mkdir dir="${test.classes.dir}"/>

    <!-- debugging path -->
    <property name="test.classpath" refid="test.classpath"/>
    <echo>test.classpath=${test.classpath}</echo>
    <javac srcdir="${test.src.dir}" destdir="${test.classes.dir}"
           debug="${build.debug}" debuglevel="${build.debuglevel}" includeAntRuntime="false">
      <exclude name="examples/**"/>
      <exclude name="ucar/nc2/jni/**"/>
      <classpath refid="test.classpath"/>
    </javac>

    <jar jarfile="${build.dir}/${test.classes.jar}" index="true" duplicate="preserve">
      <fileset dir="${test.classes.dir}" />

      <manifest>
        <attribute name="Built-By" value="${user.name}"/>
        <attribute name="Built-On" value="${build.time}"/>
        <attribute name="Implementation-Title" value="CDM Test Classes"/>
        <attribute name="Implementation-Version" value="${release.version.minor}"/>
        <attribute name="Implementation-Vendor" value="UCAR/Unidata"/>
      </manifest>
    </jar>
  </target>

  <target name="unit-test-all" depends="compile, test-setup" description="run nc unit tests">
    <antcall target="unit-test-nc" />
    <antcall target="unit-test-thredds" />
  </target>

  <target name="unit-test-all-release" description="run nc unit tests using released jars">

    <antcall target="unit-test-nc">
      <reference refid="runtime.test.classpath.release" torefid="runtime.test.classpath" />
    </antcall>
    <antcall target="unit-test-thredds">
      <reference refid="runtime.test.classpath.release" torefid="runtime.test.classpath" />
    </antcall>
  </target>

  <target name="unit-test-nc" description="run nc unit tests">
    <antcall target="unit-test-base">
      <param name="unit.test.name" value="unit-test-nc" />
      <param name="unit.test.class.name" value="ucar.nc2.TestAll" />
      <reference refid="runtime.test.classpath" />
    </antcall>
  </target>

  <target name="unit-test-thredds" description="run thredds unit tests">
    <antcall target="unit-test-base">
      <param name="unit.test.name"  value="unit-test-thredds" />
      <param name="unit.test.class.name" value="thredds.catalog.TestCatalogAll" />
      <reference refid="runtime.test.classpath" />
    </antcall>
  </target>

  <target name="unit-test-base" description="run junit tests">
    <property name="runtime.test.classpath" refid="runtime.test.classpath"/>
    <echo>runtime.test.classpath=${runtime.test.classpath}</echo>

    <property name="junit.temp.dir" value="${build.dir}/junit/temp" />
    <mkdir dir="${junit.temp.dir}" />

    <mkdir dir="${test.reports.dir}/${unit.test.name}"/>
    <junit printsummary="false" errorProperty="test.failed" failureProperty="test.failed"
           fork="true" forkmode="once" dir="${root.dir}" tempdir="${junit.temp.dir}">
      <classpath>
        <path refid="runtime.test.classpath" />
      </classpath>

      <jvmarg value="-ea"/>
      <jvmarg value="-Xmx1024m"/>
      <formatter type="xml"/>
      <formatter type="brief" usefile="false"/>
      <test todir="${test.reports.dir}/${unit.test.name}" name="${unit.test.class.name}"/>
    </junit>

    <!-- #Generate test reports -->
    <junitreport todir="${test.reports.dir}/${unit.test.name}">
      <fileset dir="${test.reports.dir}/${unit.test.name}">
        <include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${test.reports.dir}/${unit.test.name}"/>
    </junitreport>
    <!-- create temporary file indicating these tests failed -->
    <!-- #Test case bypass trick -->
    <echo message="last build failed tests" file="${test.reports.dir}/${unit.test.name}/failed"/>
    <fail if="test.failed">FAILED! Unit tests failed.  Look at ${test.reports.dir}/${unit.test.name}/index.html for details.</fail>
    <!-- Remove test failed file, as these tests succeeded -->
    <delete file="${test.reports.dir}/${unit.test.name}/failed"/>
    <echo message="SUCCESS! Unit tests succeeded.  Look at ${test.reports.dir}/${unit.test.name}/index.html for details."/>
  </target>

  <!-- -->

  <!-- Build opendap jar and copy to release dir -->

  <!-- Relative path to other dir -->
  <property name="opendap.relpath" value="../opendap"/>
  <target name="opendap">
	  <ant dir="${opendap.relpath}" target="thredds" inheritAll="false"/>
  </target>

    <!-- temporary convenience target; do not remove -->
    <target name="copyidvjar">
        <copy file="./target/ncIdv.jar"
               tofile="c:/Users/dmh/IdeaProjects/idv/trunk/lib/ncIdv.jar" />
     </target>

</project>
